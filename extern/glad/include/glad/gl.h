/**
 * Loader generated by glad 2.0.0-beta on Mon Sep 20 13:07:56 2021
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 129
 *
 * APIs:
 *  - gl:compatibility=4.6
 *
 * Options:
 *  - ALIAS = True
 *  - DEBUG = False
 *  - HEADER_ONLY = True
 *  - LOADER = False
 *  - MX = False
 *  - MX_GLOBAL = False
 *  - ON_DEMAND = True
 *
 * Commandline:
 *    --api='gl:compatibility=4.6' --extensions='GL_AMD_debug_output,GL_AMD_draw_buffers_blend,GL_AMD_multi_draw_indirect,GL_APPLE_flush_buffer_range,GL_APPLE_vertex_array_object,GL_ARB_ES2_compatibility,GL_ARB_ES3_1_compatibility,GL_ARB_base_instance,GL_ARB_blend_func_extended,GL_ARB_buffer_storage,GL_ARB_clear_buffer_object,GL_ARB_clear_texture,GL_ARB_clip_control,GL_ARB_color_buffer_float,GL_ARB_compute_shader,GL_ARB_copy_buffer,GL_ARB_copy_image,GL_ARB_debug_output,GL_ARB_direct_state_access,GL_ARB_draw_buffers,GL_ARB_draw_buffers_blend,GL_ARB_draw_elements_base_vertex,GL_ARB_draw_indirect,GL_ARB_draw_instanced,GL_ARB_framebuffer_no_attachments,GL_ARB_framebuffer_object,GL_ARB_geometry_shader4,GL_ARB_get_program_binary,GL_ARB_get_texture_sub_image,GL_ARB_gl_spirv,GL_ARB_gpu_shader_fp64,GL_ARB_imaging,GL_ARB_indirect_parameters,GL_ARB_instanced_arrays,GL_ARB_internalformat_query,GL_ARB_internalformat_query2,GL_ARB_invalidate_subdata,GL_ARB_map_buffer_range,GL_ARB_multi_bind,GL_ARB_multi_draw_indirect,GL_ARB_multisample,GL_ARB_multitexture,GL_ARB_occlusion_query,GL_ARB_point_parameters,GL_ARB_polygon_offset_clamp,GL_ARB_program_interface_query,GL_ARB_provoking_vertex,GL_ARB_robustness,GL_ARB_sample_shading,GL_ARB_sampler_objects,GL_ARB_separate_shader_objects,GL_ARB_shader_atomic_counters,GL_ARB_shader_image_load_store,GL_ARB_shader_objects,GL_ARB_shader_storage_buffer_object,GL_ARB_shader_subroutine,GL_ARB_sync,GL_ARB_tessellation_shader,GL_ARB_texture_barrier,GL_ARB_texture_buffer_object,GL_ARB_texture_buffer_range,GL_ARB_texture_compression,GL_ARB_texture_multisample,GL_ARB_texture_storage,GL_ARB_texture_storage_multisample,GL_ARB_texture_view,GL_ARB_timer_query,GL_ARB_transform_feedback2,GL_ARB_transform_feedback3,GL_ARB_transform_feedback_instanced,GL_ARB_transpose_matrix,GL_ARB_uniform_buffer_object,GL_ARB_vertex_array_object,GL_ARB_vertex_attrib_64bit,GL_ARB_vertex_attrib_binding,GL_ARB_vertex_buffer_object,GL_ARB_vertex_program,GL_ARB_vertex_shader,GL_ARB_vertex_type_2_10_10_10_rev,GL_ARB_viewport_array,GL_ARB_window_pos,GL_ATI_draw_buffers,GL_ATI_separate_stencil,GL_EXT_blend_color,GL_EXT_blend_equation_separate,GL_EXT_blend_func_separate,GL_EXT_blend_minmax,GL_EXT_copy_texture,GL_EXT_direct_state_access,GL_EXT_draw_buffers2,GL_EXT_draw_instanced,GL_EXT_draw_range_elements,GL_EXT_fog_coord,GL_EXT_framebuffer_blit,GL_EXT_framebuffer_multisample,GL_EXT_framebuffer_object,GL_EXT_geometry_shader4,GL_EXT_gpu_shader4,GL_EXT_multi_draw_arrays,GL_EXT_point_parameters,GL_EXT_polygon_offset_clamp,GL_EXT_provoking_vertex,GL_EXT_secondary_color,GL_EXT_shader_image_load_store,GL_EXT_subtexture,GL_EXT_texture3D,GL_EXT_texture_array,GL_EXT_texture_buffer_object,GL_EXT_texture_integer,GL_EXT_texture_object,GL_EXT_timer_query,GL_EXT_transform_feedback,GL_EXT_vertex_array,GL_EXT_vertex_attrib_64bit,GL_INGR_blend_func_separate,GL_KHR_debug,GL_KHR_robustness,GL_MESA_window_pos,GL_NVX_conditional_render,GL_NV_conditional_render,GL_NV_explicit_multisample,GL_NV_geometry_program4,GL_NV_point_sprite,GL_NV_transform_feedback,GL_NV_transform_feedback2,GL_NV_vertex_program,GL_NV_vertex_program4,GL_OES_single_precision,GL_SGIS_point_parameters' c --alias --header-only --on-demand
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acompatibility%3D4.6&generator=c&options=ALIAS%2CHEADER_ONLY%2CON_DEMAND
 *
 */

#ifndef GLAD_GL_H_
#define GLAD_GL_H_

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifdef __gl_h_
  #error OpenGL (gl.h) header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1
#ifdef __gl3_h_
  #error OpenGL (gl3.h) header already included (API: gl), remove previous include!
#endif
#define __gl3_h_ 1
#ifdef __glext_h_
  #error OpenGL (glext.h) header already included (API: gl), remove previous include!
#endif
#define __glext_h_ 1
#ifdef __gl3ext_h_
  #error OpenGL (gl3ext.h) header already included (API: gl), remove previous include!
#endif
#define __gl3ext_h_ 1
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#define GLAD_GL
#define GLAD_OPTION_GL_ALIAS
#define GLAD_OPTION_GL_HEADER_ONLY
#define GLAD_OPTION_GL_ON_DEMAND

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.0-beta"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_2D 0x0600
#define GL_2_BYTES 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4_BYTES 0x1409
#define GL_ACCUM 0x0100
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_ADD 0x0104
#define GL_ADD_SIGNED 0x8574
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_ALPHA32I_EXT 0x8D84
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA8I_EXT 0x8D90
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALWAYS 0x0207
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ARRAY_SIZE 0x92FB
#define GL_ARRAY_STRIDE 0x92FE
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_RIGHT 0x0403
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLEND 0x0BE2
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLOCK_INDEX 0x92FD
#define GL_BLUE 0x1905
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_BLUE_SCALE 0x0D1A
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_BUFFER 0x82E0
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_BYTE 0x1400
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_CCW 0x0901
#define GL_CLAMP 0x2900
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLEAR 0x1500
#define GL_CLEAR_BUFFER 0x82B4
#define GL_CLEAR_TEXTURE 0x9365
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COEFF 0x0A00
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_COMPONENTS 0x8283
#define GL_COLOR_ENCODING 0x8296
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_RENDERABLE 0x8286
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_SUM_EXT 0x8458
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMBINE 0x8570
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_RGB 0x8571
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_COMPILE_STATUS 0x8B81
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RG 0x8226
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_COMPUTE_SHADER 0x91B9
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAGS 0x821E
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_COORD_REPLACE 0x8862
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_CW 0x0900
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DECAL 0x2101
#define GL_DECR 0x1E03
#define GL_DECR_WRAP 0x8508
#define GL_DELETE_STATUS 0x8B80
#define GL_DEPTH 0x1801
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFUSE 0x1201
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_DISPLAY_LIST 0x82E7
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_DITHER 0x0BD0
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EVAL_BIT 0x00010000
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXTENSIONS 0x1F03
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_PLANE 0x2502
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FILL 0x1B02
#define GL_FILTER 0x829A
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIXED 0x140C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_FULL_SUPPORT 0x82B7
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEQUAL 0x0206
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_GREEN_SCALE 0x0D18
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_HALF_FLOAT 0x140B
#define GL_HIGH_FLOAT 0x8DF2
#define GL_HIGH_INT 0x8DF5
#define GL_HINT_BIT 0x00008000
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_IDENTITY_NV 0x862A
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_INCR 0x1E02
#define GL_INCR_WRAP 0x8507
#define GL_INDEX 0x8222
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_INT 0x1404
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERPOLATE 0x8575
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERSE_NV 0x862B
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_INVERT 0x150A
#define GL_ISOLINES 0x8E7A
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_ROW_MAJOR 0x9300
#define GL_KEEP 0x1E00
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAYER_NV 0x8DAA
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINE_BIT 0x00000004
#define GL_LINE_LOOP 0x0002
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_STRIP 0x0003
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_TOKEN 0x0702
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINK_STATUS 0x8B82
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LOAD 0x0101
#define GL_LOCATION 0x930E
#define GL_LOCATION_COMPONENT 0x934A
#define GL_LOCATION_INDEX 0x930F
#define GL_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOW_FLOAT 0x8DF0
#define GL_LOW_INT 0x8DF3
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_MAJOR_VERSION 0x821B
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_STENCIL 0x0D11
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX7_NV 0x8637
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX_MODE 0x0BA0
#define GL_MATRIX_STRIDE 0x92FF
#define GL_MAX 0x8008
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_EXT 0x8008
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_WIDTH 0x827E
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_MEDIUM_INT 0x8DF4
#define GL_MIN 0x8007
#define GL_MINMAX 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MINOR_VERSION 0x821C
#define GL_MIN_EXT 0x8007
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIPMAP 0x8293
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULT 0x0103
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_N3F_V3F 0x2A25
#define GL_NAME_LENGTH 0x92F9
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_NEVER 0x0200
#define GL_NEXT_BUFFER_NV -2
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_MAP 0x8511
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_NUM_EXTENSIONS 0x821D
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_PLANE 0x2501
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_OFFSET 0x92FC
#define GL_ONE 1
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_OR 0x1507
#define GL_ORDER 0x0A01
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PATCHES 0x000E
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_VERTICES 0x8E72
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_BIT 0x00000002
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_PREVIOUS 0x8578
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUADS 0x0007
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_QUAD_STRIP 0x0008
#define GL_QUERY 0x82E3
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_TARGET 0x82EA
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_R 0x2002
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R16 0x822A
#define GL_R16F 0x822D
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R16_SNORM 0x8F98
#define GL_R32F 0x822E
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_R3_G3_B2 0x2A10
#define GL_R8 0x8229
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R8_SNORM 0x8F94
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_READ_BUFFER 0x0C02
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_RED 0x1903
#define GL_REDUCE 0x8016
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_RED_SCALE 0x0D14
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFLECTION_MAP 0x8512
#define GL_RENDER 0x1C00
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERER 0x1F01
#define GL_RENDER_MODE 0x0C40
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_REPLICATE_BORDER 0x8153
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_RETURN 0x0102
#define GL_RG 0x8227
#define GL_RG16 0x822C
#define GL_RG16F 0x822F
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG16_SNORM 0x8F99
#define GL_RG32F 0x8230
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_RG8 0x822B
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG8_SNORM 0x8F95
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2UI 0x906F
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16F 0x881B
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB32F 0x8815
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB565 0x8D62
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_RGB8_SNORM 0x8F96
#define GL_RGB9_E5 0x8C3D
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16F 0x881A
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA2 0x8055
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGBA8_SNORM 0x8F97
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_RGBA_MODE 0x0C31
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGB_SCALE 0x8573
#define GL_RG_INTEGER 0x8228
#define GL_RIGHT 0x0407
#define GL_S 0x2000
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_BINDING 0x8919
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SCISSOR_BIT 0x00080000
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SEPARABLE_2D 0x8012
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SET 0x150F
#define GL_SHADER 0x82E1
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_TYPE 0x8B4F
#define GL_SHADE_MODEL 0x0B54
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SIGNALED 0x9119
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_SINGLE_COLOR 0x81F9
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SMOOTH 0x1D01
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPIR_V_BINARY 0x9552
#define GL_SPIR_V_BINARY_ARB 0x9552
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STENCIL 0x1802
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SUBTRACT 0x84E7
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_STATUS 0x9114
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_TARGET 0x1006
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_TEXTURE_VIEW 0x82B5
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_TIMESTAMP 0x8E28
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_TRANSFORM_BIT 0x00001000
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_TRANSPOSE_NV 0x862C
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRUE 1
#define GL_TYPE 0x92FA
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UPPER_LEFT 0x8CA2
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VALIDATE_STATUS 0x8B83
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_VERTEX_TEXTURE 0x829B
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BIT 0x00000800
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_ASTC_10x10_RGBA 0x9393
#define GL_VIEW_CLASS_ASTC_10x5_RGBA 0x9390
#define GL_VIEW_CLASS_ASTC_10x6_RGBA 0x9391
#define GL_VIEW_CLASS_ASTC_10x8_RGBA 0x9392
#define GL_VIEW_CLASS_ASTC_12x10_RGBA 0x9394
#define GL_VIEW_CLASS_ASTC_12x12_RGBA 0x9395
#define GL_VIEW_CLASS_ASTC_4x4_RGBA 0x9388
#define GL_VIEW_CLASS_ASTC_5x4_RGBA 0x9389
#define GL_VIEW_CLASS_ASTC_5x5_RGBA 0x938A
#define GL_VIEW_CLASS_ASTC_6x5_RGBA 0x938B
#define GL_VIEW_CLASS_ASTC_6x6_RGBA 0x938C
#define GL_VIEW_CLASS_ASTC_8x5_RGBA 0x938D
#define GL_VIEW_CLASS_ASTC_8x6_RGBA 0x938E
#define GL_VIEW_CLASS_ASTC_8x8_RGBA 0x938F
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_EAC_R11 0x9383
#define GL_VIEW_CLASS_EAC_RG11 0x9384
#define GL_VIEW_CLASS_ETC2_EAC_RGBA 0x9387
#define GL_VIEW_CLASS_ETC2_RGB 0x9385
#define GL_VIEW_CLASS_ETC2_RGBA 0x9386
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_WAIT_FAILED 0x911D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ZERO_TO_ONE 0x935F
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17


#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

#if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC)
#   define KHRONOS_STATIC 1
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(KHRONOS_STATIC)
    /* If the preprocessor constant KHRONOS_STATIC is defined, make the
     * header compatible with static linking. */
#   define KHRONOS_APICALL
#elif defined(_WIN32)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */

typedef unsigned int GLenum;

typedef unsigned char GLboolean;

typedef unsigned int GLbitfield;

typedef void GLvoid;

typedef khronos_int8_t GLbyte;

typedef khronos_uint8_t GLubyte;

typedef khronos_int16_t GLshort;

typedef khronos_uint16_t GLushort;

typedef int GLint;

typedef unsigned int GLuint;

typedef khronos_int32_t GLclampx;

typedef int GLsizei;

typedef khronos_float_t GLfloat;

typedef khronos_float_t GLclampf;

typedef double GLdouble;

typedef double GLclampd;

typedef void *GLeglClientBufferEXT;

typedef void *GLeglImageOES;

typedef char GLchar;

typedef char GLcharARB;

#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif

typedef khronos_uint16_t GLhalf;

typedef khronos_uint16_t GLhalfARB;

typedef khronos_int32_t GLfixed;

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif

typedef khronos_int64_t GLint64;

typedef khronos_int64_t GLint64EXT;

typedef khronos_uint64_t GLuint64;

typedef khronos_uint64_t GLuint64EXT;

typedef struct __GLsync *GLsync;

struct _cl_context;

struct _cl_event;

typedef void (GLAD_API_PTR *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);

typedef unsigned short GLhalfNV;

typedef GLintptr GLvdpauSurfaceNV;

typedef void (GLAD_API_PTR *GLVULKANPROCNV)(void);



#define GL_VERSION_1_0 1
#define GL_VERSION_1_1 1
#define GL_VERSION_1_2 1
#define GL_VERSION_1_3 1
#define GL_VERSION_1_4 1
#define GL_VERSION_1_5 1
#define GL_VERSION_2_0 1
#define GL_VERSION_2_1 1
#define GL_VERSION_3_0 1
#define GL_VERSION_3_1 1
#define GL_VERSION_3_2 1
#define GL_VERSION_3_3 1
#define GL_VERSION_4_0 1
#define GL_VERSION_4_1 1
#define GL_VERSION_4_2 1
#define GL_VERSION_4_3 1
#define GL_VERSION_4_4 1
#define GL_VERSION_4_5 1
#define GL_VERSION_4_6 1
#define GL_AMD_debug_output 1
#define GL_AMD_draw_buffers_blend 1
#define GL_AMD_multi_draw_indirect 1
#define GL_APPLE_flush_buffer_range 1
#define GL_APPLE_vertex_array_object 1
#define GL_ARB_ES2_compatibility 1
#define GL_ARB_ES3_1_compatibility 1
#define GL_ARB_base_instance 1
#define GL_ARB_blend_func_extended 1
#define GL_ARB_buffer_storage 1
#define GL_ARB_clear_buffer_object 1
#define GL_ARB_clear_texture 1
#define GL_ARB_clip_control 1
#define GL_ARB_color_buffer_float 1
#define GL_ARB_compute_shader 1
#define GL_ARB_copy_buffer 1
#define GL_ARB_copy_image 1
#define GL_ARB_debug_output 1
#define GL_ARB_direct_state_access 1
#define GL_ARB_draw_buffers 1
#define GL_ARB_draw_buffers_blend 1
#define GL_ARB_draw_elements_base_vertex 1
#define GL_ARB_draw_indirect 1
#define GL_ARB_draw_instanced 1
#define GL_ARB_framebuffer_no_attachments 1
#define GL_ARB_framebuffer_object 1
#define GL_ARB_geometry_shader4 1
#define GL_ARB_get_program_binary 1
#define GL_ARB_get_texture_sub_image 1
#define GL_ARB_gl_spirv 1
#define GL_ARB_gpu_shader_fp64 1
#define GL_ARB_imaging 1
#define GL_ARB_indirect_parameters 1
#define GL_ARB_instanced_arrays 1
#define GL_ARB_internalformat_query 1
#define GL_ARB_internalformat_query2 1
#define GL_ARB_invalidate_subdata 1
#define GL_ARB_map_buffer_range 1
#define GL_ARB_multi_bind 1
#define GL_ARB_multi_draw_indirect 1
#define GL_ARB_multisample 1
#define GL_ARB_multitexture 1
#define GL_ARB_occlusion_query 1
#define GL_ARB_point_parameters 1
#define GL_ARB_polygon_offset_clamp 1
#define GL_ARB_program_interface_query 1
#define GL_ARB_provoking_vertex 1
#define GL_ARB_robustness 1
#define GL_ARB_sample_shading 1
#define GL_ARB_sampler_objects 1
#define GL_ARB_separate_shader_objects 1
#define GL_ARB_shader_atomic_counters 1
#define GL_ARB_shader_image_load_store 1
#define GL_ARB_shader_objects 1
#define GL_ARB_shader_storage_buffer_object 1
#define GL_ARB_shader_subroutine 1
#define GL_ARB_sync 1
#define GL_ARB_tessellation_shader 1
#define GL_ARB_texture_barrier 1
#define GL_ARB_texture_buffer_object 1
#define GL_ARB_texture_buffer_range 1
#define GL_ARB_texture_compression 1
#define GL_ARB_texture_multisample 1
#define GL_ARB_texture_storage 1
#define GL_ARB_texture_storage_multisample 1
#define GL_ARB_texture_view 1
#define GL_ARB_timer_query 1
#define GL_ARB_transform_feedback2 1
#define GL_ARB_transform_feedback3 1
#define GL_ARB_transform_feedback_instanced 1
#define GL_ARB_transpose_matrix 1
#define GL_ARB_uniform_buffer_object 1
#define GL_ARB_vertex_array_object 1
#define GL_ARB_vertex_attrib_64bit 1
#define GL_ARB_vertex_attrib_binding 1
#define GL_ARB_vertex_buffer_object 1
#define GL_ARB_vertex_program 1
#define GL_ARB_vertex_shader 1
#define GL_ARB_vertex_type_2_10_10_10_rev 1
#define GL_ARB_viewport_array 1
#define GL_ARB_window_pos 1
#define GL_ATI_draw_buffers 1
#define GL_ATI_separate_stencil 1
#define GL_EXT_blend_color 1
#define GL_EXT_blend_equation_separate 1
#define GL_EXT_blend_func_separate 1
#define GL_EXT_blend_minmax 1
#define GL_EXT_copy_texture 1
#define GL_EXT_direct_state_access 1
#define GL_EXT_draw_buffers2 1
#define GL_EXT_draw_instanced 1
#define GL_EXT_draw_range_elements 1
#define GL_EXT_fog_coord 1
#define GL_EXT_framebuffer_blit 1
#define GL_EXT_framebuffer_multisample 1
#define GL_EXT_framebuffer_object 1
#define GL_EXT_geometry_shader4 1
#define GL_EXT_gpu_shader4 1
#define GL_EXT_multi_draw_arrays 1
#define GL_EXT_point_parameters 1
#define GL_EXT_polygon_offset_clamp 1
#define GL_EXT_provoking_vertex 1
#define GL_EXT_secondary_color 1
#define GL_EXT_shader_image_load_store 1
#define GL_EXT_subtexture 1
#define GL_EXT_texture3D 1
#define GL_EXT_texture_array 1
#define GL_EXT_texture_buffer_object 1
#define GL_EXT_texture_integer 1
#define GL_EXT_texture_object 1
#define GL_EXT_timer_query 1
#define GL_EXT_transform_feedback 1
#define GL_EXT_vertex_array 1
#define GL_EXT_vertex_attrib_64bit 1
#define GL_INGR_blend_func_separate 1
#define GL_KHR_debug 1
#define GL_KHR_robustness 1
#define GL_MESA_window_pos 1
#define GL_NVX_conditional_render 1
#define GL_NV_conditional_render 1
#define GL_NV_explicit_multisample 1
#define GL_NV_geometry_program4 1
#define GL_NV_point_sprite 1
#define GL_NV_transform_feedback 1
#define GL_NV_transform_feedback2 1
#define GL_NV_vertex_program 1
#define GL_NV_vertex_program4 1
#define GL_OES_single_precision 1
#define GL_SGIS_point_parameters 1


typedef void (GLAD_API_PTR *PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (GLAD_API_PTR *PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLACTIVEVARYINGNVPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef GLboolean (GLAD_API_PTR *PFNGLAREPROGRAMSRESIDENTNVPROC)(GLsizei n, const GLuint * programs, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTEXTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTEXTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLATTACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLBEGINPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVPROC)(GLuint id, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBEGINCONDITIONALRENDERNVXPROC)(GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYARBPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBEGINTRANSFORMFEEDBACKNVPROC)(GLenum primitiveMode);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDATTRIBLOCATIONARBPROC)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERARBPROC)(GLenum target, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASEEXTPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERBASENVPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFEROFFSETNVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGEEXTPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERRANGENVPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERSBASEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLBINDBUFFERSRANGEPROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONEXTPROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDFRAMEBUFFEREXTPROC)(GLenum target, GLuint framebuffer);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTUREPROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTUREEXTPROC)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef void (GLAD_API_PTR *PFNGLBINDIMAGETEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLBINDMULTITEXTUREEXTPROC)(GLenum texunit, GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMARBPROC)(GLenum target, GLuint program);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDRENDERBUFFEREXTPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (GLAD_API_PTR *PFNGLBINDSAMPLERSPROC)(GLuint first, GLsizei count, const GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREEXTPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREUNITPROC)(GLuint unit, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTURESPROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDTRANSFORMFEEDBACKNVPROC)(GLenum target, GLuint id);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXBUFFERPROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLBINDVERTEXBUFFERSPROC)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (GLAD_API_PTR *PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDCOLOREXTPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONINDEXEDAMDPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEEXTPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONSEPARATEIARBPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDEQUATIONIARBPROC)(GLuint buf, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCINDEXEDAMDPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEEXTPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINGRPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCSEPARATEIARBPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCIARBPROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITFRAMEBUFFEREXTPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBLITNAMEDFRAMEBUFFERPROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERDATAARBPROC)(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLBUFFERPARAMETERIAPPLEPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLBUFFERSTORAGEPROC)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data);
typedef void (GLAD_API_PTR *PFNGLCALLLISTPROC)(GLuint list);
typedef void (GLAD_API_PTR *PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void * lists);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)(GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)(GLuint framebuffer, GLenum target);
typedef GLenum (GLAD_API_PTR *PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)(GLuint framebuffer, GLenum target);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLAMPCOLORARBPROC)(GLenum target, GLenum clamp);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERDATAPROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERSUBDATAPROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIIEXTPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORIUIEXTPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHFOESPROC)(GLclampf depth);
typedef void (GLAD_API_PTR *PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERDATAPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLCLEARTEXIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLEARTEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREARBPROC)(GLenum texture);
typedef void (GLAD_API_PTR *PFNGLCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef GLenum (GLAD_API_PTR *PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLCLIPCONTROLPROC)(GLenum origin, GLenum depth);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEFOESPROC)(GLenum plane, const GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKINDEXEDEXTPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAD_API_PTR *PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (GLAD_API_PTR *PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void (GLAD_API_PTR *PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void (GLAD_API_PTR *PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint * color);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLCOMPILESHADERARBPROC)(GLhandleARB shaderObj);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAD_API_PTR *PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIPROC)(GLenum target, GLenum pname, GLint params);
typedef void (GLAD_API_PTR *PFNGLCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORSUBTABLEPROC)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCOLORTABLEPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER1DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYCONVOLUTIONFILTER2DPROC)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYIMAGESUBDATAPROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYNAMEDBUFFERSUBDATAPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCREATEBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLCREATEFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint (GLAD_API_PTR *PFNGLCREATEPROGRAMPROC)(void);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATEPROGRAMOBJECTARBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLCREATEPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLCREATEQUERIESPROC)(GLenum target, GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLCREATERENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLCREATESAMPLERSPROC)(GLsizei n, GLuint * samplers);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROC)(GLenum type);
typedef GLhandleARB (GLAD_API_PTR *PFNGLCREATESHADEROBJECTARBPROC)(GLenum shaderType);
typedef GLuint (GLAD_API_PTR *PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef void (GLAD_API_PTR *PFNGLCREATETEXTURESPROC)(GLenum target, GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLCREATETRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLCREATEVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKAMDPROC)(GLDEBUGPROCAMD callback, void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECALLBACKARBPROC)(GLDEBUGPROCARB callback, const void * userParam);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGECONTROLARBPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEENABLEAMDPROC)(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTAMDPROC)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDEBUGMESSAGEINSERTARBPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEBUFFERSARBPROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETEFRAMEBUFFERSEXTPROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void (GLAD_API_PTR *PFNGLDELETEOBJECTARBPROC)(GLhandleARB obj);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSARBPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEQUERIESARBPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETERENDERBUFFERSEXTPROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESEXTPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETETRANSFORMFEEDBACKSNVPROC)(GLsizei n, const GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDELETEVERTEXARRAYSAPPLEPROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYDVNVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEINDEXEDDNVPROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEFOESPROC)(GLclampf n, GLclampf f);
typedef void (GLAD_API_PTR *PFNGLDETACHOBJECTARBPROC)(GLhandleARB containerObj, GLhandleARB attachedObj);
typedef void (GLAD_API_PTR *PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEPROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (GLAD_API_PTR *PFNGLDISPATCHCOMPUTEINDIRECTPROC)(GLintptr indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDARBPROC)(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSINSTANCEDEXTPROC)(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSARBPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERSATIPROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDARBPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSINSTANCEDEXTPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAD_API_PTR *PFNGLDRAWRANGEELEMENTSEXTPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)(GLenum mode, GLuint id, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKNVPROC)(GLenum mode, GLuint id);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (GLAD_API_PTR *PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count, const GLboolean * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGVPROC)(const GLboolean * flag);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEIEXTPROC)(GLenum array, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYATTRIBPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)(GLuint vaobj, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXARRAYEXTPROC)(GLuint vaobj, GLenum array);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEVERTEXATTRIBARRAYARBPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDCONDITIONALRENDERNVXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDLISTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDQUERYPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYARBPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKEXTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDTRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (GLAD_API_PTR *PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT1PROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (GLAD_API_PTR *PFNGLEXECUTEPROGRAMNVPROC)(GLenum target, GLuint id, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat * buffer);
typedef GLsync (GLAD_API_PTR *PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)(GLenum target, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDPOINTEREXTPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDEXTPROC)(GLdouble coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDVPROC)(const GLdouble * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDDVEXTPROC)(const GLdouble * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFEXTPROC)(GLfloat coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFVPROC)(const GLfloat * coord);
typedef void (GLAD_API_PTR *PFNGLFOGCOORDFVEXTPROC)(const GLfloat * coord);
typedef void (GLAD_API_PTR *PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLFOGFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFOGIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERREADBUFFEREXTPROC)(GLuint framebuffer, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENBUFFERSARBPROC)(GLsizei n, GLuint * buffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAD_API_PTR *PFNGLGENFRAMEBUFFERSEXTPROC)(GLsizei n, GLuint * framebuffers);
typedef GLuint (GLAD_API_PTR *PFNGLGENLISTSPROC)(GLsizei range);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSARBPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENPROGRAMSNVPROC)(GLsizei n, GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENQUERIESARBPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENRENDERBUFFERSEXTPROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAD_API_PTR *PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint * samplers);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESEXTPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENTRANSFORMFEEDBACKSNVPROC)(GLsizei n, GLuint * ids);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENVERTEXARRAYSAPPLEPROC)(GLsizei n, GLuint * arrays);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMIPMAPEXTPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATEMULTITEXMIPMAPEXTPROC)(GLenum texunit, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGENERATETEXTUREMIPMAPPROC)(GLuint texture);
typedef void (GLAD_API_PTR *PFNGLGENERATETEXTUREMIPMAPEXTPROC)(GLuint texture, GLenum target);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEATTRIBARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMARBPROC)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETACTIVEVARYINGNVPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDOBJECTSARBPROC)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef void (GLAD_API_PTR *PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETATTRIBLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANINDEXEDVEXTPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERPOINTERVARBPROC)(GLenum target, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETBUFFERSUBDATAARBPROC)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEFOESPROC)(GLenum plane, GLfloat * equation);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, void * table);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCOLORTABLEPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint level, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint lod, void * img);
typedef void (GLAD_API_PTR *PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, void * image);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETCONVOLUTIONPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGAMDPROC)(GLuint count, GLsizei bufSize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message);
typedef GLuint (GLAD_API_PTR *PFNGLGETDEBUGMESSAGELOGARBPROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEINDEXEDVEXTPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEI_VEXTPROC)(GLenum pname, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFLOATINDEXEDVEXTPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETFLOATI_VEXTPROC)(GLenum pname, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETFRAGDATALOCATIONEXTPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSPROC)(void);
typedef GLenum (GLAD_API_PTR *PFNGLGETGRAPHICSRESETSTATUSARBPROC)(void);
typedef GLhandleARB (GLAD_API_PTR *PFNGLGETHANDLEARBPROC)(GLenum pname);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETHISTOGRAMPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETINFOLOGARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERINDEXEDVEXTPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATI64VPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETINTERNALFORMATIVPROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMINMAXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXIMAGEEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETMULTISAMPLEFVNVPROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)(GLuint buffer, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERIVPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPOINTERVPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)(GLuint framebuffer, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)(GLuint framebuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDPROGRAMIVEXTPROC)(GLuint program, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERFVARBPROC)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPARAMETERIVARBPROC)(GLhandleARB obj, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETOBJECTPTRLABELPROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERINDEXEDVEXTPROC)(GLenum target, GLuint index, void ** data);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERI_VEXTPROC)(GLenum pname, GLuint index, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVEXTPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte * mask);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMENVPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMINTERFACEIVPROC)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)(GLenum target, GLuint index, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)(GLenum target, GLuint index, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERDVNVPROC)(GLenum target, GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPARAMETERFVNVPROC)(GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef GLuint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCENAMEPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMRESOURCEIVPROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGARBPROC)(GLenum target, GLenum pname, void * string);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMSTRINGNVPROC)(GLuint id, GLenum pname, GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPROGRAMIVNVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTUI64VPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYBUFFEROBJECTUIVPROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTI64VEXTPROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTIVARBPROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUI64VEXTPROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYOBJECTUIVARBPROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETQUERYIVARBPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAD_API_PTR *PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERSOURCEARBPROC)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source);
typedef void (GLAD_API_PTR *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint * params);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef GLuint (GLAD_API_PTR *PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREIMAGEPROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREIMAGEEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERFVPROC)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERIVPROC)(GLuint texture, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXTURESUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTRACKMATRIXIVNVPROC)(GLenum target, GLuint address, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)(GLuint program, GLuint index, GLint * location);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKI64_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKI_VPROC)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETTRANSFORMFEEDBACKIVPROC)(GLuint xfb, GLenum pname, GLint * param);
typedef GLuint (GLAD_API_PTR *PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar * uniformBlockName);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar * name);
typedef GLint (GLAD_API_PTR *PFNGLGETUNIFORMLOCATIONARBPROC)(GLhandleARB programObj, const GLcharARB * name);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMFVARBPROC)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMIVARBPROC)(GLhandleARB programObj, GLint location, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETUNIFORMUIVEXTPROC)(GLuint program, GLint location, GLuint * params);
typedef GLint (GLAD_API_PTR *PFNGLGETVARYINGLOCATIONNVPROC)(GLuint program, const GLchar * name);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINDEXED64IVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINDEXEDIVPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYINTEGERVEXTPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)(GLuint vaobj, GLuint index, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYPOINTERVEXTPROC)(GLuint vaobj, GLenum pname, void ** param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXARRAYIVPROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIIVEXTPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIUIVEXTPROC)(GLuint index, GLenum pname, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBLDVEXTPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVARBPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBPOINTERVNVPROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVARBPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBDVNVPROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVARBPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBFVNVPROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVARBPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETVERTEXATTRIBIVNVPROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNCOLORTABLEPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void (GLAD_API_PTR *PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);
typedef void (GLAD_API_PTR *PFNGLGETNCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint lod, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void * img);
typedef void (GLAD_API_PTR *PFNGLGETNCONVOLUTIONFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void (GLAD_API_PTR *PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);
typedef void (GLAD_API_PTR *PFNGLGETNHISTOGRAMPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNMAPDVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPFVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPIVPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETNMINMAXPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPFVPROC)(GLenum map, GLsizei bufSize, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUIVPROC)(GLenum map, GLsizei bufSize, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUSVPROC)(GLenum map, GLsizei bufSize, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETNPOLYGONSTIPPLEPROC)(GLsizei bufSize, GLubyte * pattern);
typedef void (GLAD_API_PTR *PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte * pattern);
typedef void (GLAD_API_PTR *PFNGLGETNSEPARABLEFILTERPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);
typedef void (GLAD_API_PTR *PFNGLGETNTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMDVPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLHISTOGRAMPROC)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXDPROC)(GLdouble c);
typedef void (GLAD_API_PTR *PFNGLINDEXDVPROC)(const GLdouble * c);
typedef void (GLAD_API_PTR *PFNGLINDEXFPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLINDEXFVPROC)(const GLfloat * c);
typedef void (GLAD_API_PTR *PFNGLINDEXIPROC)(GLint c);
typedef void (GLAD_API_PTR *PFNGLINDEXIVPROC)(const GLint * c);
typedef void (GLAD_API_PTR *PFNGLINDEXSPROC)(GLshort c);
typedef void (GLAD_API_PTR *PFNGLINDEXSVPROC)(const GLshort * c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBPROC)(GLubyte c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBVPROC)(const GLubyte * c);
typedef void (GLAD_API_PTR *PFNGLINITNAMESPROC)(void);
typedef void (GLAD_API_PTR *PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEBUFFERDATAPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAD_API_PTR *PFNGLINVALIDATEFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAD_API_PTR *PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAD_API_PTR *PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLINVALIDATESUBFRAMEBUFFERPROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLINVALIDATETEXIMAGEPROC)(GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLINVALIDATETEXSUBIMAGEPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISBUFFERARBPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDINDEXEDEXTPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISFRAMEBUFFEREXTPROC)(GLuint framebuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISLISTPROC)(GLuint list);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMARBPROC)(GLuint program);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISQUERYARBPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISRENDERBUFFEREXTPROC)(GLuint renderbuffer);
typedef GLboolean (GLAD_API_PTR *PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean (GLAD_API_PTR *PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean (GLAD_API_PTR *PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREEXTPROC)(GLuint texture);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISTRANSFORMFEEDBACKNVPROC)(GLuint id);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef GLboolean (GLAD_API_PTR *PFNGLISVERTEXARRAYAPPLEPROC)(GLuint array);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLLINKPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLLISTBASEPROC)(GLuint base);
typedef void (GLAD_API_PTR *PFNGLLOADIDENTITYPROC)(void);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOADNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLLOADPROGRAMNVPROC)(GLenum target, GLuint id, GLsizei len, const GLubyte * program);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOADTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (GLAD_API_PTR *PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERARBPROC)(GLenum target, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERPROC)(GLuint buffer, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFEREXTPROC)(GLuint buffer, GLenum access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERRANGEPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void * (GLAD_API_PTR *PFNGLMAPNAMEDBUFFERRANGEEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAD_API_PTR *PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMATRIXFRUSTUMEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADIDENTITYEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXLOADFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTTRANSPOSEFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTDEXTPROC)(GLenum mode, const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXMULTFEXTPROC)(GLenum mode, const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMATRIXORTHOEXTPROC)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLMATRIXPOPEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXPUSHEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEDEXTPROC)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXROTATEFEXTPROC)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXSCALEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEDEXTPROC)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLMATRIXTRANSLATEFEXTPROC)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIERBYREGIONPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMEMORYBARRIEREXTPROC)(GLbitfield barriers);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMINSAMPLESHADINGARBPROC)(GLfloat value);
typedef void (GLAD_API_PTR *PFNGLMINMAXPROC)(GLenum target, GLenum internalformat, GLboolean sink);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXDARBPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMULTTRANSPOSEMATRIXFARBPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSEXTPROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTPROC)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSEXTPROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLMULTITEXBUFFEREXTPROC)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DARBPROC)(GLenum target, GLdouble s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FARBPROC)(GLenum target, GLfloat s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IARBPROC)(GLenum target, GLint s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SARBPROC)(GLenum target, GLshort s);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD1SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DARBPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FARBPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IARBPROC)(GLenum target, GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SARBPROC)(GLenum target, GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD2SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IARBPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD3SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DARBPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4DVARBPROC)(GLenum target, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FARBPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4FVARBPROC)(GLenum target, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IARBPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4IVARBPROC)(GLenum target, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SARBPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORD4SVARBPROC)(GLenum target, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLMULTITEXCOORDPOINTEREXTPROC)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXENVIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENDVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENFVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXGENIVEXTPROC)(GLenum texunit, GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIUIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERFVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIEXTPROC)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMULTITEXPARAMETERIVEXTPROC)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMULTITEXRENDERBUFFEREXTPROC)(GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE1DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE2DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLMULTITEXSUBIMAGE3DEXTPROC)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERDATAPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERDATAEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSTORAGEEXTPROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSUBDATAPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLNAMEDBUFFERSUBDATAEXTPROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAD_API_PTR *PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)(GLuint framebuffer, GLenum buf);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)(GLuint framebuffer, GLenum src);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLNAMEDPROGRAMSTRINGEXTPROC)(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLOBJECTPTRLABELPROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void (GLAD_API_PTR *PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLORTHOFOESPROC)(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
typedef void (GLAD_API_PTR *PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPAUSETRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort * values);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFARBPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFEXTPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFSGISPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVARBPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVEXTPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERFVSGISPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERINVPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTPARAMETERIVNVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETCLAMPPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETCLAMPEXTPROC)(GLfloat factor, GLfloat units, GLfloat clamp);
typedef void (GLAD_API_PTR *PFNGLPOLYGONSTIPPLEPROC)(const GLubyte * mask);
typedef void (GLAD_API_PTR *PFNGLPOPATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPDEBUGGROUPPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPNAMEPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESEXTPROC)(GLsizei n, const GLuint * textures, const GLclampf * priorities);
typedef void (GLAD_API_PTR *PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMENVPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DARBPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)(GLenum target, GLuint index, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FARBPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)(GLenum target, GLuint index, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DNVPROC)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4DVNVPROC)(GLenum target, GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FNVPROC)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETER4FVNVPROC)(GLenum target, GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIARBPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERIEXTPROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4DVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMPARAMETERS4FVNVPROC)(GLenum target, GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLPROGRAMSTRINGARBPROC)(GLenum target, GLenum format, GLsizei len, const void * string);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DEXTPROC)(GLuint program, GLint location, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FEXTPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IEXTPROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIEXTPROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM1UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM2UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM3UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DEXTPROC)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4DVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FEXTPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4FVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IEXTPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4IVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIEXTPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORM4UIVEXTPROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLPROGRAMVERTEXLIMITNVPROC)(GLenum target, GLint limit);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPROVOKINGVERTEXEXTPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (GLAD_API_PTR *PFNGLPUSHMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAD_API_PTR *PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (GLAD_API_PTR *PFNGLRECTDVPROC)(const GLdouble * v1, const GLdouble * v2);
typedef void (GLAD_API_PTR *PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (GLAD_API_PTR *PFNGLRECTFVPROC)(const GLfloat * v1, const GLfloat * v2);
typedef void (GLAD_API_PTR *PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (GLAD_API_PTR *PFNGLRECTIVPROC)(const GLint * v1, const GLint * v2);
typedef void (GLAD_API_PTR *PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (GLAD_API_PTR *PFNGLRECTSVPROC)(const GLshort * v1, const GLshort * v2);
typedef void (GLAD_API_PTR *PFNGLRELEASESHADERCOMPILERPROC)(void);
typedef GLint (GLAD_API_PTR *PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEEXTPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLREQUESTRESIDENTPROGRAMSNVPROC)(GLsizei n, const GLuint * programs);
typedef void (GLAD_API_PTR *PFNGLRESETHISTOGRAMPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLRESETMINMAXPROC)(GLenum target);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKPROC)(void);
typedef void (GLAD_API_PTR *PFNGLRESUMETRANSFORMFEEDBACKNVPROC)(void);
typedef void (GLAD_API_PTR *PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKINDEXEDNVPROC)(GLuint index, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BEXTPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3BVEXTPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DEXTPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3DVEXTPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FEXTPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3FVEXTPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IEXTPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3IVEXTPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SEXTPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3SVEXTPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBEXTPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UBVEXTPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIEXTPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3UIVEXTPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USEXTPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLOR3USVEXTPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint * color);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLSECONDARYCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint * buffer);
typedef void (GLAD_API_PTR *PFNGLSEPARABLEFILTER2DPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column);
typedef void (GLAD_API_PTR *PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSOURCEARBPROC)(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length);
typedef void (GLAD_API_PTR *PFNGLSHADERSTORAGEBLOCKBINDINGPROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (GLAD_API_PTR *PFNGLSPECIALIZESHADERPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void (GLAD_API_PTR *PFNGLSPECIALIZESHADERARBPROC)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCSEPARATEATIPROC)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPSEPARATEATIPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERARBPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFEREXTPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXBUFFERRANGEPROC)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint * coords);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DEXTPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIIVEXTPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIUIVEXTPROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXRENDERBUFFERNVPROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE1DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DPROC)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXSTORAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE3DEXTPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBARRIERPROC)(void);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERPROC)(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFEREXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERRANGEPROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXTUREBUFFERRANGEEXTPROC)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPAGECOMMITMENTEXTPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIIVPROC)(GLuint texture, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIUIVPROC)(GLuint texture, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIUIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFPROC)(GLuint texture, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFVPROC)(GLuint texture, GLenum pname, const GLfloat * param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERFVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIPROC)(GLuint texture, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIEXTPROC)(GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIVPROC)(GLuint texture, GLenum pname, const GLint * param);
typedef void (GLAD_API_PTR *PFNGLTEXTUREPARAMETERIVEXTPROC)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXTURERENDERBUFFEREXTPROC)(GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE1DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE1DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DPROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DEXTPROC)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE1DPROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE1DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE2DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE2DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE3DPROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTURESUBIMAGE3DEXTPROC)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXTUREVIEWPROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (GLAD_API_PTR *PFNGLTRACKMATRIXNVPROC)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)(GLuint xfb, GLuint index, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FARBPROC)(GLint location, GLfloat v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IARBPROC)(GLint location, GLint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIEXTPROC)(GLint location, GLuint v0);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM1UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FARBPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IARBPROC)(GLint location, GLint v0, GLint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIEXTPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM2UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM3UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FARBPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4FVARBPROC)(GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IARBPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4IVARBPROC)(GLint location, GLsizei count, const GLint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIEXTPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORM4UIVEXTPROC)(GLint location, GLsizei count, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4FVARBPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAD_API_PTR *PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint * indices);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPBUFFERARBPROC)(GLenum target);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPNAMEDBUFFERPROC)(GLuint buffer);
typedef GLboolean (GLAD_API_PTR *PFNGLUNMAPNAMEDBUFFEREXTPROC)(GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMOBJECTARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMARBPROC)(GLhandleARB programObj);
typedef void (GLAD_API_PTR *PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBBINDINGPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBIFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYATTRIBLFORMATPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYBINDINGDIVISORPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYELEMENTBUFFERPROC)(GLuint vaobj, GLuint buffer);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)(GLuint vaobj, GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBUFFERPROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXBUFFERSPROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (GLAD_API_PTR *PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DARBPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DNVPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FARBPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FNVPROC)(GLuint index, GLfloat x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SARBPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SNVPROC)(GLuint index, GLshort x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB1SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DARBPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DNVPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FARBPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FNVPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SARBPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SNVPROC)(GLuint index, GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB2SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB3SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NBVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NIVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NSVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBARBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4NUSVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4BVARBPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DARBPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DNVPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVARBPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4DVNVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FARBPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FNVPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVARBPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4FVNVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4IVARBPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SARBPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SNVPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVARBPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4SVNVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBNVPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVARBPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UBVNVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4UIVARBPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIB4USVARBPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBBINDINGPROC)(GLuint attribindex, GLuint bindingindex);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBDIVISORARBPROC)(GLuint index, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IEXTPROC)(GLuint index, GLint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIEXTPROC)(GLuint index, GLuint x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI1UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IEXTPROC)(GLuint index, GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIEXTPROC)(GLuint index, GLuint x, GLuint y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI2UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IEXTPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI3UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4BVEXTPROC)(GLuint index, const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IEXTPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4IVEXTPROC)(GLuint index, const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4SVEXTPROC)(GLuint index, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UBVEXTPROC)(GLuint index, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIEXTPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4UIVEXTPROC)(GLuint index, const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBI4USVEXTPROC)(GLuint index, const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBIPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DEXTPROC)(GLuint index, GLdouble x);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL1DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DEXTPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL2DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL3DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DEXTPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBL4DVEXTPROC)(GLuint index, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLFORMATPROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBLPOINTEREXTPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERARBPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBPOINTERNVPROC)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS1SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS2SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS3SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4DVNVPROC)(GLuint index, GLsizei count, const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4FVNVPROC)(GLuint index, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4SVNVPROC)(GLuint index, GLsizei count, const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXATTRIBS4UBVNVPROC)(GLuint index, GLsizei count, const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXBINDINGDIVISORPROC)(GLuint bindingindex, GLuint divisor);
typedef void (GLAD_API_PTR *PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void (GLAD_API_PTR *PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint * value);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DARBPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DMESAPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DVARBPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2DVMESAPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FARBPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FMESAPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FVARBPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2FVMESAPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IARBPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IMESAPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IVARBPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2IVMESAPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SARBPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SMESAPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SVARBPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS2SVMESAPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DARBPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DMESAPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DVARBPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3DVMESAPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FARBPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FMESAPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FVARBPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3FVMESAPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IARBPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IMESAPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IVARBPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3IVMESAPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SARBPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SMESAPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SVARBPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS3SVMESAPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4DMESAPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4DVMESAPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4FMESAPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4FVMESAPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4IMESAPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4IVMESAPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4SMESAPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLWINDOWPOS4SVMESAPROC)(const GLshort * v);

GLAD_API_CALL PFNGLACCUMPROC glad_glAccum;
#define glAccum glad_glAccum
GLAD_API_CALL PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
#define glActiveShaderProgram glad_glActiveShaderProgram
GLAD_API_CALL PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
#define glActiveTexture glad_glActiveTexture
GLAD_API_CALL PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB;
#define glActiveTextureARB glad_glActiveTextureARB
GLAD_API_CALL PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV;
#define glActiveVaryingNV glad_glActiveVaryingNV
GLAD_API_CALL PFNGLALPHAFUNCPROC glad_glAlphaFunc;
#define glAlphaFunc glad_glAlphaFunc
GLAD_API_CALL PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV;
#define glAreProgramsResidentNV glad_glAreProgramsResidentNV
GLAD_API_CALL PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
#define glAreTexturesResident glad_glAreTexturesResident
GLAD_API_CALL PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT;
#define glAreTexturesResidentEXT glad_glAreTexturesResidentEXT
GLAD_API_CALL PFNGLARRAYELEMENTPROC glad_glArrayElement;
#define glArrayElement glad_glArrayElement
GLAD_API_CALL PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT;
#define glArrayElementEXT glad_glArrayElementEXT
GLAD_API_CALL PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB;
#define glAttachObjectARB glad_glAttachObjectARB
GLAD_API_CALL PFNGLATTACHSHADERPROC glad_glAttachShader;
#define glAttachShader glad_glAttachShader
GLAD_API_CALL PFNGLBEGINPROC glad_glBegin;
#define glBegin glad_glBegin
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
#define glBeginConditionalRender glad_glBeginConditionalRender
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV;
#define glBeginConditionalRenderNV glad_glBeginConditionalRenderNV
GLAD_API_CALL PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX;
#define glBeginConditionalRenderNVX glad_glBeginConditionalRenderNVX
GLAD_API_CALL PFNGLBEGINQUERYPROC glad_glBeginQuery;
#define glBeginQuery glad_glBeginQuery
GLAD_API_CALL PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB;
#define glBeginQueryARB glad_glBeginQueryARB
GLAD_API_CALL PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
#define glBeginQueryIndexed glad_glBeginQueryIndexed
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
#define glBeginTransformFeedback glad_glBeginTransformFeedback
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT;
#define glBeginTransformFeedbackEXT glad_glBeginTransformFeedbackEXT
GLAD_API_CALL PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV;
#define glBeginTransformFeedbackNV glad_glBeginTransformFeedbackNV
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
#define glBindAttribLocation glad_glBindAttribLocation
GLAD_API_CALL PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB;
#define glBindAttribLocationARB glad_glBindAttribLocationARB
GLAD_API_CALL PFNGLBINDBUFFERPROC glad_glBindBuffer;
#define glBindBuffer glad_glBindBuffer
GLAD_API_CALL PFNGLBINDBUFFERARBPROC glad_glBindBufferARB;
#define glBindBufferARB glad_glBindBufferARB
GLAD_API_CALL PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
#define glBindBufferBase glad_glBindBufferBase
GLAD_API_CALL PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT;
#define glBindBufferBaseEXT glad_glBindBufferBaseEXT
GLAD_API_CALL PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV;
#define glBindBufferBaseNV glad_glBindBufferBaseNV
GLAD_API_CALL PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT;
#define glBindBufferOffsetEXT glad_glBindBufferOffsetEXT
GLAD_API_CALL PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV;
#define glBindBufferOffsetNV glad_glBindBufferOffsetNV
GLAD_API_CALL PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
#define glBindBufferRange glad_glBindBufferRange
GLAD_API_CALL PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT;
#define glBindBufferRangeEXT glad_glBindBufferRangeEXT
GLAD_API_CALL PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV;
#define glBindBufferRangeNV glad_glBindBufferRangeNV
GLAD_API_CALL PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase;
#define glBindBuffersBase glad_glBindBuffersBase
GLAD_API_CALL PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange;
#define glBindBuffersRange glad_glBindBuffersRange
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
#define glBindFragDataLocation glad_glBindFragDataLocation
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT;
#define glBindFragDataLocationEXT glad_glBindFragDataLocationEXT
GLAD_API_CALL PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed glad_glBindFragDataLocationIndexed
GLAD_API_CALL PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
#define glBindFramebuffer glad_glBindFramebuffer
GLAD_API_CALL PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT;
#define glBindFramebufferEXT glad_glBindFramebufferEXT
GLAD_API_CALL PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture;
#define glBindImageTexture glad_glBindImageTexture
GLAD_API_CALL PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT;
#define glBindImageTextureEXT glad_glBindImageTextureEXT
GLAD_API_CALL PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures;
#define glBindImageTextures glad_glBindImageTextures
GLAD_API_CALL PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT;
#define glBindMultiTextureEXT glad_glBindMultiTextureEXT
GLAD_API_CALL PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB;
#define glBindProgramARB glad_glBindProgramARB
GLAD_API_CALL PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV;
#define glBindProgramNV glad_glBindProgramNV
GLAD_API_CALL PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
#define glBindProgramPipeline glad_glBindProgramPipeline
GLAD_API_CALL PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
#define glBindRenderbuffer glad_glBindRenderbuffer
GLAD_API_CALL PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT;
#define glBindRenderbufferEXT glad_glBindRenderbufferEXT
GLAD_API_CALL PFNGLBINDSAMPLERPROC glad_glBindSampler;
#define glBindSampler glad_glBindSampler
GLAD_API_CALL PFNGLBINDSAMPLERSPROC glad_glBindSamplers;
#define glBindSamplers glad_glBindSamplers
GLAD_API_CALL PFNGLBINDTEXTUREPROC glad_glBindTexture;
#define glBindTexture glad_glBindTexture
GLAD_API_CALL PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT;
#define glBindTextureEXT glad_glBindTextureEXT
GLAD_API_CALL PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit;
#define glBindTextureUnit glad_glBindTextureUnit
GLAD_API_CALL PFNGLBINDTEXTURESPROC glad_glBindTextures;
#define glBindTextures glad_glBindTextures
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
#define glBindTransformFeedback glad_glBindTransformFeedback
GLAD_API_CALL PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV;
#define glBindTransformFeedbackNV glad_glBindTransformFeedbackNV
GLAD_API_CALL PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
#define glBindVertexArray glad_glBindVertexArray
GLAD_API_CALL PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE;
#define glBindVertexArrayAPPLE glad_glBindVertexArrayAPPLE
GLAD_API_CALL PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer;
#define glBindVertexBuffer glad_glBindVertexBuffer
GLAD_API_CALL PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers;
#define glBindVertexBuffers glad_glBindVertexBuffers
GLAD_API_CALL PFNGLBITMAPPROC glad_glBitmap;
#define glBitmap glad_glBitmap
GLAD_API_CALL PFNGLBLENDCOLORPROC glad_glBlendColor;
#define glBlendColor glad_glBlendColor
GLAD_API_CALL PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT;
#define glBlendColorEXT glad_glBlendColorEXT
GLAD_API_CALL PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
#define glBlendEquation glad_glBlendEquation
GLAD_API_CALL PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT;
#define glBlendEquationEXT glad_glBlendEquationEXT
GLAD_API_CALL PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD;
#define glBlendEquationIndexedAMD glad_glBlendEquationIndexedAMD
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
#define glBlendEquationSeparate glad_glBlendEquationSeparate
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT;
#define glBlendEquationSeparateEXT glad_glBlendEquationSeparateEXT
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD;
#define glBlendEquationSeparateIndexedAMD glad_glBlendEquationSeparateIndexedAMD
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
#define glBlendEquationSeparatei glad_glBlendEquationSeparatei
GLAD_API_CALL PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB;
#define glBlendEquationSeparateiARB glad_glBlendEquationSeparateiARB
GLAD_API_CALL PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
#define glBlendEquationi glad_glBlendEquationi
GLAD_API_CALL PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB;
#define glBlendEquationiARB glad_glBlendEquationiARB
GLAD_API_CALL PFNGLBLENDFUNCPROC glad_glBlendFunc;
#define glBlendFunc glad_glBlendFunc
GLAD_API_CALL PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD;
#define glBlendFuncIndexedAMD glad_glBlendFuncIndexedAMD
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
#define glBlendFuncSeparate glad_glBlendFuncSeparate
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT;
#define glBlendFuncSeparateEXT glad_glBlendFuncSeparateEXT
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR;
#define glBlendFuncSeparateINGR glad_glBlendFuncSeparateINGR
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD;
#define glBlendFuncSeparateIndexedAMD glad_glBlendFuncSeparateIndexedAMD
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
#define glBlendFuncSeparatei glad_glBlendFuncSeparatei
GLAD_API_CALL PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB;
#define glBlendFuncSeparateiARB glad_glBlendFuncSeparateiARB
GLAD_API_CALL PFNGLBLENDFUNCIPROC glad_glBlendFunci;
#define glBlendFunci glad_glBlendFunci
GLAD_API_CALL PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB;
#define glBlendFunciARB glad_glBlendFunciARB
GLAD_API_CALL PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
#define glBlitFramebuffer glad_glBlitFramebuffer
GLAD_API_CALL PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT;
#define glBlitFramebufferEXT glad_glBlitFramebufferEXT
GLAD_API_CALL PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer;
#define glBlitNamedFramebuffer glad_glBlitNamedFramebuffer
GLAD_API_CALL PFNGLBUFFERDATAPROC glad_glBufferData;
#define glBufferData glad_glBufferData
GLAD_API_CALL PFNGLBUFFERDATAARBPROC glad_glBufferDataARB;
#define glBufferDataARB glad_glBufferDataARB
GLAD_API_CALL PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE;
#define glBufferParameteriAPPLE glad_glBufferParameteriAPPLE
GLAD_API_CALL PFNGLBUFFERSTORAGEPROC glad_glBufferStorage;
#define glBufferStorage glad_glBufferStorage
GLAD_API_CALL PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
#define glBufferSubData glad_glBufferSubData
GLAD_API_CALL PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB;
#define glBufferSubDataARB glad_glBufferSubDataARB
GLAD_API_CALL PFNGLCALLLISTPROC glad_glCallList;
#define glCallList glad_glCallList
GLAD_API_CALL PFNGLCALLLISTSPROC glad_glCallLists;
#define glCallLists glad_glCallLists
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
#define glCheckFramebufferStatus glad_glCheckFramebufferStatus
GLAD_API_CALL PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT;
#define glCheckFramebufferStatusEXT glad_glCheckFramebufferStatusEXT
GLAD_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus;
#define glCheckNamedFramebufferStatus glad_glCheckNamedFramebufferStatus
GLAD_API_CALL PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT;
#define glCheckNamedFramebufferStatusEXT glad_glCheckNamedFramebufferStatusEXT
GLAD_API_CALL PFNGLCLAMPCOLORPROC glad_glClampColor;
#define glClampColor glad_glClampColor
GLAD_API_CALL PFNGLCLAMPCOLORARBPROC glad_glClampColorARB;
#define glClampColorARB glad_glClampColorARB
GLAD_API_CALL PFNGLCLEARPROC glad_glClear;
#define glClear glad_glClear
GLAD_API_CALL PFNGLCLEARACCUMPROC glad_glClearAccum;
#define glClearAccum glad_glClearAccum
GLAD_API_CALL PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData;
#define glClearBufferData glad_glClearBufferData
GLAD_API_CALL PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData;
#define glClearBufferSubData glad_glClearBufferSubData
GLAD_API_CALL PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
#define glClearBufferfi glad_glClearBufferfi
GLAD_API_CALL PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
#define glClearBufferfv glad_glClearBufferfv
GLAD_API_CALL PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
#define glClearBufferiv glad_glClearBufferiv
GLAD_API_CALL PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
#define glClearBufferuiv glad_glClearBufferuiv
GLAD_API_CALL PFNGLCLEARCOLORPROC glad_glClearColor;
#define glClearColor glad_glClearColor
GLAD_API_CALL PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT;
#define glClearColorIiEXT glad_glClearColorIiEXT
GLAD_API_CALL PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT;
#define glClearColorIuiEXT glad_glClearColorIuiEXT
GLAD_API_CALL PFNGLCLEARDEPTHPROC glad_glClearDepth;
#define glClearDepth glad_glClearDepth
GLAD_API_CALL PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
#define glClearDepthf glad_glClearDepthf
GLAD_API_CALL PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES;
#define glClearDepthfOES glad_glClearDepthfOES
GLAD_API_CALL PFNGLCLEARINDEXPROC glad_glClearIndex;
#define glClearIndex glad_glClearIndex
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData;
#define glClearNamedBufferData glad_glClearNamedBufferData
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT;
#define glClearNamedBufferDataEXT glad_glClearNamedBufferDataEXT
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData;
#define glClearNamedBufferSubData glad_glClearNamedBufferSubData
GLAD_API_CALL PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT;
#define glClearNamedBufferSubDataEXT glad_glClearNamedBufferSubDataEXT
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi;
#define glClearNamedFramebufferfi glad_glClearNamedFramebufferfi
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv;
#define glClearNamedFramebufferfv glad_glClearNamedFramebufferfv
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv;
#define glClearNamedFramebufferiv glad_glClearNamedFramebufferiv
GLAD_API_CALL PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv;
#define glClearNamedFramebufferuiv glad_glClearNamedFramebufferuiv
GLAD_API_CALL PFNGLCLEARSTENCILPROC glad_glClearStencil;
#define glClearStencil glad_glClearStencil
GLAD_API_CALL PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage;
#define glClearTexImage glad_glClearTexImage
GLAD_API_CALL PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage;
#define glClearTexSubImage glad_glClearTexSubImage
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;
#define glClientActiveTexture glad_glClientActiveTexture
GLAD_API_CALL PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB;
#define glClientActiveTextureARB glad_glClientActiveTextureARB
GLAD_API_CALL PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT;
#define glClientAttribDefaultEXT glad_glClientAttribDefaultEXT
GLAD_API_CALL PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
#define glClientWaitSync glad_glClientWaitSync
GLAD_API_CALL PFNGLCLIPCONTROLPROC glad_glClipControl;
#define glClipControl glad_glClipControl
GLAD_API_CALL PFNGLCLIPPLANEPROC glad_glClipPlane;
#define glClipPlane glad_glClipPlane
GLAD_API_CALL PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES;
#define glClipPlanefOES glad_glClipPlanefOES
GLAD_API_CALL PFNGLCOLOR3BPROC glad_glColor3b;
#define glColor3b glad_glColor3b
GLAD_API_CALL PFNGLCOLOR3BVPROC glad_glColor3bv;
#define glColor3bv glad_glColor3bv
GLAD_API_CALL PFNGLCOLOR3DPROC glad_glColor3d;
#define glColor3d glad_glColor3d
GLAD_API_CALL PFNGLCOLOR3DVPROC glad_glColor3dv;
#define glColor3dv glad_glColor3dv
GLAD_API_CALL PFNGLCOLOR3FPROC glad_glColor3f;
#define glColor3f glad_glColor3f
GLAD_API_CALL PFNGLCOLOR3FVPROC glad_glColor3fv;
#define glColor3fv glad_glColor3fv
GLAD_API_CALL PFNGLCOLOR3IPROC glad_glColor3i;
#define glColor3i glad_glColor3i
GLAD_API_CALL PFNGLCOLOR3IVPROC glad_glColor3iv;
#define glColor3iv glad_glColor3iv
GLAD_API_CALL PFNGLCOLOR3SPROC glad_glColor3s;
#define glColor3s glad_glColor3s
GLAD_API_CALL PFNGLCOLOR3SVPROC glad_glColor3sv;
#define glColor3sv glad_glColor3sv
GLAD_API_CALL PFNGLCOLOR3UBPROC glad_glColor3ub;
#define glColor3ub glad_glColor3ub
GLAD_API_CALL PFNGLCOLOR3UBVPROC glad_glColor3ubv;
#define glColor3ubv glad_glColor3ubv
GLAD_API_CALL PFNGLCOLOR3UIPROC glad_glColor3ui;
#define glColor3ui glad_glColor3ui
GLAD_API_CALL PFNGLCOLOR3UIVPROC glad_glColor3uiv;
#define glColor3uiv glad_glColor3uiv
GLAD_API_CALL PFNGLCOLOR3USPROC glad_glColor3us;
#define glColor3us glad_glColor3us
GLAD_API_CALL PFNGLCOLOR3USVPROC glad_glColor3usv;
#define glColor3usv glad_glColor3usv
GLAD_API_CALL PFNGLCOLOR4BPROC glad_glColor4b;
#define glColor4b glad_glColor4b
GLAD_API_CALL PFNGLCOLOR4BVPROC glad_glColor4bv;
#define glColor4bv glad_glColor4bv
GLAD_API_CALL PFNGLCOLOR4DPROC glad_glColor4d;
#define glColor4d glad_glColor4d
GLAD_API_CALL PFNGLCOLOR4DVPROC glad_glColor4dv;
#define glColor4dv glad_glColor4dv
GLAD_API_CALL PFNGLCOLOR4FPROC glad_glColor4f;
#define glColor4f glad_glColor4f
GLAD_API_CALL PFNGLCOLOR4FVPROC glad_glColor4fv;
#define glColor4fv glad_glColor4fv
GLAD_API_CALL PFNGLCOLOR4IPROC glad_glColor4i;
#define glColor4i glad_glColor4i
GLAD_API_CALL PFNGLCOLOR4IVPROC glad_glColor4iv;
#define glColor4iv glad_glColor4iv
GLAD_API_CALL PFNGLCOLOR4SPROC glad_glColor4s;
#define glColor4s glad_glColor4s
GLAD_API_CALL PFNGLCOLOR4SVPROC glad_glColor4sv;
#define glColor4sv glad_glColor4sv
GLAD_API_CALL PFNGLCOLOR4UBPROC glad_glColor4ub;
#define glColor4ub glad_glColor4ub
GLAD_API_CALL PFNGLCOLOR4UBVPROC glad_glColor4ubv;
#define glColor4ubv glad_glColor4ubv
GLAD_API_CALL PFNGLCOLOR4UIPROC glad_glColor4ui;
#define glColor4ui glad_glColor4ui
GLAD_API_CALL PFNGLCOLOR4UIVPROC glad_glColor4uiv;
#define glColor4uiv glad_glColor4uiv
GLAD_API_CALL PFNGLCOLOR4USPROC glad_glColor4us;
#define glColor4us glad_glColor4us
GLAD_API_CALL PFNGLCOLOR4USVPROC glad_glColor4usv;
#define glColor4usv glad_glColor4usv
GLAD_API_CALL PFNGLCOLORMASKPROC glad_glColorMask;
#define glColorMask glad_glColorMask
GLAD_API_CALL PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT;
#define glColorMaskIndexedEXT glad_glColorMaskIndexedEXT
GLAD_API_CALL PFNGLCOLORMASKIPROC glad_glColorMaski;
#define glColorMaski glad_glColorMaski
GLAD_API_CALL PFNGLCOLORMATERIALPROC glad_glColorMaterial;
#define glColorMaterial glad_glColorMaterial
GLAD_API_CALL PFNGLCOLORP3UIPROC glad_glColorP3ui;
#define glColorP3ui glad_glColorP3ui
GLAD_API_CALL PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
#define glColorP3uiv glad_glColorP3uiv
GLAD_API_CALL PFNGLCOLORP4UIPROC glad_glColorP4ui;
#define glColorP4ui glad_glColorP4ui
GLAD_API_CALL PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
#define glColorP4uiv glad_glColorP4uiv
GLAD_API_CALL PFNGLCOLORPOINTERPROC glad_glColorPointer;
#define glColorPointer glad_glColorPointer
GLAD_API_CALL PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT;
#define glColorPointerEXT glad_glColorPointerEXT
GLAD_API_CALL PFNGLCOLORSUBTABLEPROC glad_glColorSubTable;
#define glColorSubTable glad_glColorSubTable
GLAD_API_CALL PFNGLCOLORTABLEPROC glad_glColorTable;
#define glColorTable glad_glColorTable
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv;
#define glColorTableParameterfv glad_glColorTableParameterfv
GLAD_API_CALL PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv;
#define glColorTableParameteriv glad_glColorTableParameteriv
GLAD_API_CALL PFNGLCOMPILESHADERPROC glad_glCompileShader;
#define glCompileShader glad_glCompileShader
GLAD_API_CALL PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB;
#define glCompileShaderARB glad_glCompileShaderARB
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT;
#define glCompressedMultiTexImage1DEXT glad_glCompressedMultiTexImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT;
#define glCompressedMultiTexImage2DEXT glad_glCompressedMultiTexImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT;
#define glCompressedMultiTexImage3DEXT glad_glCompressedMultiTexImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT;
#define glCompressedMultiTexSubImage1DEXT glad_glCompressedMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT;
#define glCompressedMultiTexSubImage2DEXT glad_glCompressedMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT;
#define glCompressedMultiTexSubImage3DEXT glad_glCompressedMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
#define glCompressedTexImage1D glad_glCompressedTexImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB;
#define glCompressedTexImage1DARB glad_glCompressedTexImage1DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
#define glCompressedTexImage2D glad_glCompressedTexImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB;
#define glCompressedTexImage2DARB glad_glCompressedTexImage2DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
#define glCompressedTexImage3D glad_glCompressedTexImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB;
#define glCompressedTexImage3DARB glad_glCompressedTexImage3DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D glad_glCompressedTexSubImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB;
#define glCompressedTexSubImage1DARB glad_glCompressedTexSubImage1DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D glad_glCompressedTexSubImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB;
#define glCompressedTexSubImage2DARB glad_glCompressedTexSubImage2DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D glad_glCompressedTexSubImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB;
#define glCompressedTexSubImage3DARB glad_glCompressedTexSubImage3DARB
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT;
#define glCompressedTextureImage1DEXT glad_glCompressedTextureImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT;
#define glCompressedTextureImage2DEXT glad_glCompressedTextureImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT;
#define glCompressedTextureImage3DEXT glad_glCompressedTextureImage3DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D;
#define glCompressedTextureSubImage1D glad_glCompressedTextureSubImage1D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT;
#define glCompressedTextureSubImage1DEXT glad_glCompressedTextureSubImage1DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D;
#define glCompressedTextureSubImage2D glad_glCompressedTextureSubImage2D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT;
#define glCompressedTextureSubImage2DEXT glad_glCompressedTextureSubImage2DEXT
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D;
#define glCompressedTextureSubImage3D glad_glCompressedTextureSubImage3D
GLAD_API_CALL PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT;
#define glCompressedTextureSubImage3DEXT glad_glCompressedTextureSubImage3DEXT
GLAD_API_CALL PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D;
#define glConvolutionFilter1D glad_glConvolutionFilter1D
GLAD_API_CALL PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D;
#define glConvolutionFilter2D glad_glConvolutionFilter2D
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf;
#define glConvolutionParameterf glad_glConvolutionParameterf
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv;
#define glConvolutionParameterfv glad_glConvolutionParameterfv
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri;
#define glConvolutionParameteri glad_glConvolutionParameteri
GLAD_API_CALL PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv;
#define glConvolutionParameteriv glad_glConvolutionParameteriv
GLAD_API_CALL PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
#define glCopyBufferSubData glad_glCopyBufferSubData
GLAD_API_CALL PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable;
#define glCopyColorSubTable glad_glCopyColorSubTable
GLAD_API_CALL PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable;
#define glCopyColorTable glad_glCopyColorTable
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D;
#define glCopyConvolutionFilter1D glad_glCopyConvolutionFilter1D
GLAD_API_CALL PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D;
#define glCopyConvolutionFilter2D glad_glCopyConvolutionFilter2D
GLAD_API_CALL PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData;
#define glCopyImageSubData glad_glCopyImageSubData
GLAD_API_CALL PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT;
#define glCopyMultiTexImage1DEXT glad_glCopyMultiTexImage1DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT;
#define glCopyMultiTexImage2DEXT glad_glCopyMultiTexImage2DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT;
#define glCopyMultiTexSubImage1DEXT glad_glCopyMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT;
#define glCopyMultiTexSubImage2DEXT glad_glCopyMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT;
#define glCopyMultiTexSubImage3DEXT glad_glCopyMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData;
#define glCopyNamedBufferSubData glad_glCopyNamedBufferSubData
GLAD_API_CALL PFNGLCOPYPIXELSPROC glad_glCopyPixels;
#define glCopyPixels glad_glCopyPixels
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
#define glCopyTexImage1D glad_glCopyTexImage1D
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT;
#define glCopyTexImage1DEXT glad_glCopyTexImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
#define glCopyTexImage2D glad_glCopyTexImage2D
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT;
#define glCopyTexImage2DEXT glad_glCopyTexImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
#define glCopyTexSubImage1D glad_glCopyTexSubImage1D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT;
#define glCopyTexSubImage1DEXT glad_glCopyTexSubImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
#define glCopyTexSubImage2D glad_glCopyTexSubImage2D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT;
#define glCopyTexSubImage2DEXT glad_glCopyTexSubImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
#define glCopyTexSubImage3D glad_glCopyTexSubImage3D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT;
#define glCopyTexSubImage3DEXT glad_glCopyTexSubImage3DEXT
GLAD_API_CALL PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT;
#define glCopyTextureImage1DEXT glad_glCopyTextureImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT;
#define glCopyTextureImage2DEXT glad_glCopyTextureImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D;
#define glCopyTextureSubImage1D glad_glCopyTextureSubImage1D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT;
#define glCopyTextureSubImage1DEXT glad_glCopyTextureSubImage1DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D;
#define glCopyTextureSubImage2D glad_glCopyTextureSubImage2D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glad_glCopyTextureSubImage2DEXT;
#define glCopyTextureSubImage2DEXT glad_glCopyTextureSubImage2DEXT
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D;
#define glCopyTextureSubImage3D glad_glCopyTextureSubImage3D
GLAD_API_CALL PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glad_glCopyTextureSubImage3DEXT;
#define glCopyTextureSubImage3DEXT glad_glCopyTextureSubImage3DEXT
GLAD_API_CALL PFNGLCREATEBUFFERSPROC glad_glCreateBuffers;
#define glCreateBuffers glad_glCreateBuffers
GLAD_API_CALL PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers;
#define glCreateFramebuffers glad_glCreateFramebuffers
GLAD_API_CALL PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
#define glCreateProgram glad_glCreateProgram
GLAD_API_CALL PFNGLCREATEPROGRAMOBJECTARBPROC glad_glCreateProgramObjectARB;
#define glCreateProgramObjectARB glad_glCreateProgramObjectARB
GLAD_API_CALL PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines;
#define glCreateProgramPipelines glad_glCreateProgramPipelines
GLAD_API_CALL PFNGLCREATEQUERIESPROC glad_glCreateQueries;
#define glCreateQueries glad_glCreateQueries
GLAD_API_CALL PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers;
#define glCreateRenderbuffers glad_glCreateRenderbuffers
GLAD_API_CALL PFNGLCREATESAMPLERSPROC glad_glCreateSamplers;
#define glCreateSamplers glad_glCreateSamplers
GLAD_API_CALL PFNGLCREATESHADERPROC glad_glCreateShader;
#define glCreateShader glad_glCreateShader
GLAD_API_CALL PFNGLCREATESHADEROBJECTARBPROC glad_glCreateShaderObjectARB;
#define glCreateShaderObjectARB glad_glCreateShaderObjectARB
GLAD_API_CALL PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
#define glCreateShaderProgramv glad_glCreateShaderProgramv
GLAD_API_CALL PFNGLCREATETEXTURESPROC glad_glCreateTextures;
#define glCreateTextures glad_glCreateTextures
GLAD_API_CALL PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks;
#define glCreateTransformFeedbacks glad_glCreateTransformFeedbacks
GLAD_API_CALL PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays;
#define glCreateVertexArrays glad_glCreateVertexArrays
GLAD_API_CALL PFNGLCULLFACEPROC glad_glCullFace;
#define glCullFace glad_glCullFace
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback;
#define glDebugMessageCallback glad_glDebugMessageCallback
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKAMDPROC glad_glDebugMessageCallbackAMD;
#define glDebugMessageCallbackAMD glad_glDebugMessageCallbackAMD
GLAD_API_CALL PFNGLDEBUGMESSAGECALLBACKARBPROC glad_glDebugMessageCallbackARB;
#define glDebugMessageCallbackARB glad_glDebugMessageCallbackARB
GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl;
#define glDebugMessageControl glad_glDebugMessageControl
GLAD_API_CALL PFNGLDEBUGMESSAGECONTROLARBPROC glad_glDebugMessageControlARB;
#define glDebugMessageControlARB glad_glDebugMessageControlARB
GLAD_API_CALL PFNGLDEBUGMESSAGEENABLEAMDPROC glad_glDebugMessageEnableAMD;
#define glDebugMessageEnableAMD glad_glDebugMessageEnableAMD
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert;
#define glDebugMessageInsert glad_glDebugMessageInsert
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTAMDPROC glad_glDebugMessageInsertAMD;
#define glDebugMessageInsertAMD glad_glDebugMessageInsertAMD
GLAD_API_CALL PFNGLDEBUGMESSAGEINSERTARBPROC glad_glDebugMessageInsertARB;
#define glDebugMessageInsertARB glad_glDebugMessageInsertARB
GLAD_API_CALL PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
#define glDeleteBuffers glad_glDeleteBuffers
GLAD_API_CALL PFNGLDELETEBUFFERSARBPROC glad_glDeleteBuffersARB;
#define glDeleteBuffersARB glad_glDeleteBuffersARB
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
#define glDeleteFramebuffers glad_glDeleteFramebuffers
GLAD_API_CALL PFNGLDELETEFRAMEBUFFERSEXTPROC glad_glDeleteFramebuffersEXT;
#define glDeleteFramebuffersEXT glad_glDeleteFramebuffersEXT
GLAD_API_CALL PFNGLDELETELISTSPROC glad_glDeleteLists;
#define glDeleteLists glad_glDeleteLists
GLAD_API_CALL PFNGLDELETEOBJECTARBPROC glad_glDeleteObjectARB;
#define glDeleteObjectARB glad_glDeleteObjectARB
GLAD_API_CALL PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
#define glDeleteProgram glad_glDeleteProgram
GLAD_API_CALL PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
#define glDeleteProgramPipelines glad_glDeleteProgramPipelines
GLAD_API_CALL PFNGLDELETEPROGRAMSARBPROC glad_glDeleteProgramsARB;
#define glDeleteProgramsARB glad_glDeleteProgramsARB
GLAD_API_CALL PFNGLDELETEPROGRAMSNVPROC glad_glDeleteProgramsNV;
#define glDeleteProgramsNV glad_glDeleteProgramsNV
GLAD_API_CALL PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
#define glDeleteQueries glad_glDeleteQueries
GLAD_API_CALL PFNGLDELETEQUERIESARBPROC glad_glDeleteQueriesARB;
#define glDeleteQueriesARB glad_glDeleteQueriesARB
GLAD_API_CALL PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
#define glDeleteRenderbuffers glad_glDeleteRenderbuffers
GLAD_API_CALL PFNGLDELETERENDERBUFFERSEXTPROC glad_glDeleteRenderbuffersEXT;
#define glDeleteRenderbuffersEXT glad_glDeleteRenderbuffersEXT
GLAD_API_CALL PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
#define glDeleteSamplers glad_glDeleteSamplers
GLAD_API_CALL PFNGLDELETESHADERPROC glad_glDeleteShader;
#define glDeleteShader glad_glDeleteShader
GLAD_API_CALL PFNGLDELETESYNCPROC glad_glDeleteSync;
#define glDeleteSync glad_glDeleteSync
GLAD_API_CALL PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
#define glDeleteTextures glad_glDeleteTextures
GLAD_API_CALL PFNGLDELETETEXTURESEXTPROC glad_glDeleteTexturesEXT;
#define glDeleteTexturesEXT glad_glDeleteTexturesEXT
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks glad_glDeleteTransformFeedbacks
GLAD_API_CALL PFNGLDELETETRANSFORMFEEDBACKSNVPROC glad_glDeleteTransformFeedbacksNV;
#define glDeleteTransformFeedbacksNV glad_glDeleteTransformFeedbacksNV
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
#define glDeleteVertexArrays glad_glDeleteVertexArrays
GLAD_API_CALL PFNGLDELETEVERTEXARRAYSAPPLEPROC glad_glDeleteVertexArraysAPPLE;
#define glDeleteVertexArraysAPPLE glad_glDeleteVertexArraysAPPLE
GLAD_API_CALL PFNGLDEPTHFUNCPROC glad_glDepthFunc;
#define glDepthFunc glad_glDepthFunc
GLAD_API_CALL PFNGLDEPTHMASKPROC glad_glDepthMask;
#define glDepthMask glad_glDepthMask
GLAD_API_CALL PFNGLDEPTHRANGEPROC glad_glDepthRange;
#define glDepthRange glad_glDepthRange
GLAD_API_CALL PFNGLDEPTHRANGEARRAYDVNVPROC glad_glDepthRangeArraydvNV;
#define glDepthRangeArraydvNV glad_glDepthRangeArraydvNV
GLAD_API_CALL PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
#define glDepthRangeArrayv glad_glDepthRangeArrayv
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
#define glDepthRangeIndexed glad_glDepthRangeIndexed
GLAD_API_CALL PFNGLDEPTHRANGEINDEXEDDNVPROC glad_glDepthRangeIndexeddNV;
#define glDepthRangeIndexeddNV glad_glDepthRangeIndexeddNV
GLAD_API_CALL PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
#define glDepthRangef glad_glDepthRangef
GLAD_API_CALL PFNGLDEPTHRANGEFOESPROC glad_glDepthRangefOES;
#define glDepthRangefOES glad_glDepthRangefOES
GLAD_API_CALL PFNGLDETACHOBJECTARBPROC glad_glDetachObjectARB;
#define glDetachObjectARB glad_glDetachObjectARB
GLAD_API_CALL PFNGLDETACHSHADERPROC glad_glDetachShader;
#define glDetachShader glad_glDetachShader
GLAD_API_CALL PFNGLDISABLEPROC glad_glDisable;
#define glDisable glad_glDisable
GLAD_API_CALL PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
#define glDisableClientState glad_glDisableClientState
GLAD_API_CALL PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glad_glDisableClientStateIndexedEXT;
#define glDisableClientStateIndexedEXT glad_glDisableClientStateIndexedEXT
GLAD_API_CALL PFNGLDISABLECLIENTSTATEIEXTPROC glad_glDisableClientStateiEXT;
#define glDisableClientStateiEXT glad_glDisableClientStateiEXT
GLAD_API_CALL PFNGLDISABLEINDEXEDEXTPROC glad_glDisableIndexedEXT;
#define glDisableIndexedEXT glad_glDisableIndexedEXT
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib;
#define glDisableVertexArrayAttrib glad_glDisableVertexArrayAttrib
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glad_glDisableVertexArrayAttribEXT;
#define glDisableVertexArrayAttribEXT glad_glDisableVertexArrayAttribEXT
GLAD_API_CALL PFNGLDISABLEVERTEXARRAYEXTPROC glad_glDisableVertexArrayEXT;
#define glDisableVertexArrayEXT glad_glDisableVertexArrayEXT
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
#define glDisableVertexAttribArray glad_glDisableVertexAttribArray
GLAD_API_CALL PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_glDisableVertexAttribArrayARB;
#define glDisableVertexAttribArrayARB glad_glDisableVertexAttribArrayARB
GLAD_API_CALL PFNGLDISABLEIPROC glad_glDisablei;
#define glDisablei glad_glDisablei
GLAD_API_CALL PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute;
#define glDispatchCompute glad_glDispatchCompute
GLAD_API_CALL PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect;
#define glDispatchComputeIndirect glad_glDispatchComputeIndirect
GLAD_API_CALL PFNGLDRAWARRAYSPROC glad_glDrawArrays;
#define glDrawArrays glad_glDrawArrays
GLAD_API_CALL PFNGLDRAWARRAYSEXTPROC glad_glDrawArraysEXT;
#define glDrawArraysEXT glad_glDrawArraysEXT
GLAD_API_CALL PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
#define glDrawArraysIndirect glad_glDrawArraysIndirect
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
#define glDrawArraysInstanced glad_glDrawArraysInstanced
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDARBPROC glad_glDrawArraysInstancedARB;
#define glDrawArraysInstancedARB glad_glDrawArraysInstancedARB
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance;
#define glDrawArraysInstancedBaseInstance glad_glDrawArraysInstancedBaseInstance
GLAD_API_CALL PFNGLDRAWARRAYSINSTANCEDEXTPROC glad_glDrawArraysInstancedEXT;
#define glDrawArraysInstancedEXT glad_glDrawArraysInstancedEXT
GLAD_API_CALL PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
#define glDrawBuffer glad_glDrawBuffer
GLAD_API_CALL PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
#define glDrawBuffers glad_glDrawBuffers
GLAD_API_CALL PFNGLDRAWBUFFERSARBPROC glad_glDrawBuffersARB;
#define glDrawBuffersARB glad_glDrawBuffersARB
GLAD_API_CALL PFNGLDRAWBUFFERSATIPROC glad_glDrawBuffersATI;
#define glDrawBuffersATI glad_glDrawBuffersATI
GLAD_API_CALL PFNGLDRAWELEMENTSPROC glad_glDrawElements;
#define glDrawElements glad_glDrawElements
GLAD_API_CALL PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex glad_glDrawElementsBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
#define glDrawElementsIndirect glad_glDrawElementsIndirect
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
#define glDrawElementsInstanced glad_glDrawElementsInstanced
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_glDrawElementsInstancedARB;
#define glDrawElementsInstancedARB glad_glDrawElementsInstancedARB
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance;
#define glDrawElementsInstancedBaseInstance glad_glDrawElementsInstancedBaseInstance
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex glad_glDrawElementsInstancedBaseVertex
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance;
#define glDrawElementsInstancedBaseVertexBaseInstance glad_glDrawElementsInstancedBaseVertexBaseInstance
GLAD_API_CALL PFNGLDRAWELEMENTSINSTANCEDEXTPROC glad_glDrawElementsInstancedEXT;
#define glDrawElementsInstancedEXT glad_glDrawElementsInstancedEXT
GLAD_API_CALL PFNGLDRAWPIXELSPROC glad_glDrawPixels;
#define glDrawPixels glad_glDrawPixels
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
#define glDrawRangeElements glad_glDrawRangeElements
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex glad_glDrawRangeElementsBaseVertex
GLAD_API_CALL PFNGLDRAWRANGEELEMENTSEXTPROC glad_glDrawRangeElementsEXT;
#define glDrawRangeElementsEXT glad_glDrawRangeElementsEXT
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
#define glDrawTransformFeedback glad_glDrawTransformFeedback
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced;
#define glDrawTransformFeedbackInstanced glad_glDrawTransformFeedbackInstanced
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKNVPROC glad_glDrawTransformFeedbackNV;
#define glDrawTransformFeedbackNV glad_glDrawTransformFeedbackNV
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream glad_glDrawTransformFeedbackStream
GLAD_API_CALL PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced;
#define glDrawTransformFeedbackStreamInstanced glad_glDrawTransformFeedbackStreamInstanced
GLAD_API_CALL PFNGLEDGEFLAGPROC glad_glEdgeFlag;
#define glEdgeFlag glad_glEdgeFlag
GLAD_API_CALL PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
#define glEdgeFlagPointer glad_glEdgeFlagPointer
GLAD_API_CALL PFNGLEDGEFLAGPOINTEREXTPROC glad_glEdgeFlagPointerEXT;
#define glEdgeFlagPointerEXT glad_glEdgeFlagPointerEXT
GLAD_API_CALL PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
#define glEdgeFlagv glad_glEdgeFlagv
GLAD_API_CALL PFNGLENABLEPROC glad_glEnable;
#define glEnable glad_glEnable
GLAD_API_CALL PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
#define glEnableClientState glad_glEnableClientState
GLAD_API_CALL PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glad_glEnableClientStateIndexedEXT;
#define glEnableClientStateIndexedEXT glad_glEnableClientStateIndexedEXT
GLAD_API_CALL PFNGLENABLECLIENTSTATEIEXTPROC glad_glEnableClientStateiEXT;
#define glEnableClientStateiEXT glad_glEnableClientStateiEXT
GLAD_API_CALL PFNGLENABLEINDEXEDEXTPROC glad_glEnableIndexedEXT;
#define glEnableIndexedEXT glad_glEnableIndexedEXT
GLAD_API_CALL PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib;
#define glEnableVertexArrayAttrib glad_glEnableVertexArrayAttrib
GLAD_API_CALL PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glad_glEnableVertexArrayAttribEXT;
#define glEnableVertexArrayAttribEXT glad_glEnableVertexArrayAttribEXT
GLAD_API_CALL PFNGLENABLEVERTEXARRAYEXTPROC glad_glEnableVertexArrayEXT;
#define glEnableVertexArrayEXT glad_glEnableVertexArrayEXT
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
#define glEnableVertexAttribArray glad_glEnableVertexAttribArray
GLAD_API_CALL PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_glEnableVertexAttribArrayARB;
#define glEnableVertexAttribArrayARB glad_glEnableVertexAttribArrayARB
GLAD_API_CALL PFNGLENABLEIPROC glad_glEnablei;
#define glEnablei glad_glEnablei
GLAD_API_CALL PFNGLENDPROC glad_glEnd;
#define glEnd glad_glEnd
GLAD_API_CALL PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
#define glEndConditionalRender glad_glEndConditionalRender
GLAD_API_CALL PFNGLENDCONDITIONALRENDERNVPROC glad_glEndConditionalRenderNV;
#define glEndConditionalRenderNV glad_glEndConditionalRenderNV
GLAD_API_CALL PFNGLENDCONDITIONALRENDERNVXPROC glad_glEndConditionalRenderNVX;
#define glEndConditionalRenderNVX glad_glEndConditionalRenderNVX
GLAD_API_CALL PFNGLENDLISTPROC glad_glEndList;
#define glEndList glad_glEndList
GLAD_API_CALL PFNGLENDQUERYPROC glad_glEndQuery;
#define glEndQuery glad_glEndQuery
GLAD_API_CALL PFNGLENDQUERYARBPROC glad_glEndQueryARB;
#define glEndQueryARB glad_glEndQueryARB
GLAD_API_CALL PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
#define glEndQueryIndexed glad_glEndQueryIndexed
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
#define glEndTransformFeedback glad_glEndTransformFeedback
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKEXTPROC glad_glEndTransformFeedbackEXT;
#define glEndTransformFeedbackEXT glad_glEndTransformFeedbackEXT
GLAD_API_CALL PFNGLENDTRANSFORMFEEDBACKNVPROC glad_glEndTransformFeedbackNV;
#define glEndTransformFeedbackNV glad_glEndTransformFeedbackNV
GLAD_API_CALL PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
#define glEvalCoord1d glad_glEvalCoord1d
GLAD_API_CALL PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
#define glEvalCoord1dv glad_glEvalCoord1dv
GLAD_API_CALL PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
#define glEvalCoord1f glad_glEvalCoord1f
GLAD_API_CALL PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
#define glEvalCoord1fv glad_glEvalCoord1fv
GLAD_API_CALL PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
#define glEvalCoord2d glad_glEvalCoord2d
GLAD_API_CALL PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
#define glEvalCoord2dv glad_glEvalCoord2dv
GLAD_API_CALL PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
#define glEvalCoord2f glad_glEvalCoord2f
GLAD_API_CALL PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
#define glEvalCoord2fv glad_glEvalCoord2fv
GLAD_API_CALL PFNGLEVALMESH1PROC glad_glEvalMesh1;
#define glEvalMesh1 glad_glEvalMesh1
GLAD_API_CALL PFNGLEVALMESH2PROC glad_glEvalMesh2;
#define glEvalMesh2 glad_glEvalMesh2
GLAD_API_CALL PFNGLEVALPOINT1PROC glad_glEvalPoint1;
#define glEvalPoint1 glad_glEvalPoint1
GLAD_API_CALL PFNGLEVALPOINT2PROC glad_glEvalPoint2;
#define glEvalPoint2 glad_glEvalPoint2
GLAD_API_CALL PFNGLEXECUTEPROGRAMNVPROC glad_glExecuteProgramNV;
#define glExecuteProgramNV glad_glExecuteProgramNV
GLAD_API_CALL PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
#define glFeedbackBuffer glad_glFeedbackBuffer
GLAD_API_CALL PFNGLFENCESYNCPROC glad_glFenceSync;
#define glFenceSync glad_glFenceSync
GLAD_API_CALL PFNGLFINISHPROC glad_glFinish;
#define glFinish glad_glFinish
GLAD_API_CALL PFNGLFLUSHPROC glad_glFlush;
#define glFlush glad_glFlush
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
#define glFlushMappedBufferRange glad_glFlushMappedBufferRange
GLAD_API_CALL PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glad_glFlushMappedBufferRangeAPPLE;
#define glFlushMappedBufferRangeAPPLE glad_glFlushMappedBufferRangeAPPLE
GLAD_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange;
#define glFlushMappedNamedBufferRange glad_glFlushMappedNamedBufferRange
GLAD_API_CALL PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glad_glFlushMappedNamedBufferRangeEXT;
#define glFlushMappedNamedBufferRangeEXT glad_glFlushMappedNamedBufferRangeEXT
GLAD_API_CALL PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;
#define glFogCoordPointer glad_glFogCoordPointer
GLAD_API_CALL PFNGLFOGCOORDPOINTEREXTPROC glad_glFogCoordPointerEXT;
#define glFogCoordPointerEXT glad_glFogCoordPointerEXT
GLAD_API_CALL PFNGLFOGCOORDDPROC glad_glFogCoordd;
#define glFogCoordd glad_glFogCoordd
GLAD_API_CALL PFNGLFOGCOORDDEXTPROC glad_glFogCoorddEXT;
#define glFogCoorddEXT glad_glFogCoorddEXT
GLAD_API_CALL PFNGLFOGCOORDDVPROC glad_glFogCoorddv;
#define glFogCoorddv glad_glFogCoorddv
GLAD_API_CALL PFNGLFOGCOORDDVEXTPROC glad_glFogCoorddvEXT;
#define glFogCoorddvEXT glad_glFogCoorddvEXT
GLAD_API_CALL PFNGLFOGCOORDFPROC glad_glFogCoordf;
#define glFogCoordf glad_glFogCoordf
GLAD_API_CALL PFNGLFOGCOORDFEXTPROC glad_glFogCoordfEXT;
#define glFogCoordfEXT glad_glFogCoordfEXT
GLAD_API_CALL PFNGLFOGCOORDFVPROC glad_glFogCoordfv;
#define glFogCoordfv glad_glFogCoordfv
GLAD_API_CALL PFNGLFOGCOORDFVEXTPROC glad_glFogCoordfvEXT;
#define glFogCoordfvEXT glad_glFogCoordfvEXT
GLAD_API_CALL PFNGLFOGFPROC glad_glFogf;
#define glFogf glad_glFogf
GLAD_API_CALL PFNGLFOGFVPROC glad_glFogfv;
#define glFogfv glad_glFogfv
GLAD_API_CALL PFNGLFOGIPROC glad_glFogi;
#define glFogi glad_glFogi
GLAD_API_CALL PFNGLFOGIVPROC glad_glFogiv;
#define glFogiv glad_glFogiv
GLAD_API_CALL PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glad_glFramebufferDrawBufferEXT;
#define glFramebufferDrawBufferEXT glad_glFramebufferDrawBufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glad_glFramebufferDrawBuffersEXT;
#define glFramebufferDrawBuffersEXT glad_glFramebufferDrawBuffersEXT
GLAD_API_CALL PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri;
#define glFramebufferParameteri glad_glFramebufferParameteri
GLAD_API_CALL PFNGLFRAMEBUFFERREADBUFFEREXTPROC glad_glFramebufferReadBufferEXT;
#define glFramebufferReadBufferEXT glad_glFramebufferReadBufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer glad_glFramebufferRenderbuffer
GLAD_API_CALL PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glad_glFramebufferRenderbufferEXT;
#define glFramebufferRenderbufferEXT glad_glFramebufferRenderbufferEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
#define glFramebufferTexture glad_glFramebufferTexture
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
#define glFramebufferTexture1D glad_glFramebufferTexture1D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glad_glFramebufferTexture1DEXT;
#define glFramebufferTexture1DEXT glad_glFramebufferTexture1DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
#define glFramebufferTexture2D glad_glFramebufferTexture2D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glad_glFramebufferTexture2DEXT;
#define glFramebufferTexture2DEXT glad_glFramebufferTexture2DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
#define glFramebufferTexture3D glad_glFramebufferTexture3D
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glad_glFramebufferTexture3DEXT;
#define glFramebufferTexture3DEXT glad_glFramebufferTexture3DEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREARBPROC glad_glFramebufferTextureARB;
#define glFramebufferTextureARB glad_glFramebufferTextureARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREEXTPROC glad_glFramebufferTextureEXT;
#define glFramebufferTextureEXT glad_glFramebufferTextureEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_glFramebufferTextureFaceARB;
#define glFramebufferTextureFaceARB glad_glFramebufferTextureFaceARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glad_glFramebufferTextureFaceEXT;
#define glFramebufferTextureFaceEXT glad_glFramebufferTextureFaceEXT
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
#define glFramebufferTextureLayer glad_glFramebufferTextureLayer
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_glFramebufferTextureLayerARB;
#define glFramebufferTextureLayerARB glad_glFramebufferTextureLayerARB
GLAD_API_CALL PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glad_glFramebufferTextureLayerEXT;
#define glFramebufferTextureLayerEXT glad_glFramebufferTextureLayerEXT
GLAD_API_CALL PFNGLFRONTFACEPROC glad_glFrontFace;
#define glFrontFace glad_glFrontFace
GLAD_API_CALL PFNGLFRUSTUMPROC glad_glFrustum;
#define glFrustum glad_glFrustum
GLAD_API_CALL PFNGLFRUSTUMFOESPROC glad_glFrustumfOES;
#define glFrustumfOES glad_glFrustumfOES
GLAD_API_CALL PFNGLGENBUFFERSPROC glad_glGenBuffers;
#define glGenBuffers glad_glGenBuffers
GLAD_API_CALL PFNGLGENBUFFERSARBPROC glad_glGenBuffersARB;
#define glGenBuffersARB glad_glGenBuffersARB
GLAD_API_CALL PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
#define glGenFramebuffers glad_glGenFramebuffers
GLAD_API_CALL PFNGLGENFRAMEBUFFERSEXTPROC glad_glGenFramebuffersEXT;
#define glGenFramebuffersEXT glad_glGenFramebuffersEXT
GLAD_API_CALL PFNGLGENLISTSPROC glad_glGenLists;
#define glGenLists glad_glGenLists
GLAD_API_CALL PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
#define glGenProgramPipelines glad_glGenProgramPipelines
GLAD_API_CALL PFNGLGENPROGRAMSARBPROC glad_glGenProgramsARB;
#define glGenProgramsARB glad_glGenProgramsARB
GLAD_API_CALL PFNGLGENPROGRAMSNVPROC glad_glGenProgramsNV;
#define glGenProgramsNV glad_glGenProgramsNV
GLAD_API_CALL PFNGLGENQUERIESPROC glad_glGenQueries;
#define glGenQueries glad_glGenQueries
GLAD_API_CALL PFNGLGENQUERIESARBPROC glad_glGenQueriesARB;
#define glGenQueriesARB glad_glGenQueriesARB
GLAD_API_CALL PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
#define glGenRenderbuffers glad_glGenRenderbuffers
GLAD_API_CALL PFNGLGENRENDERBUFFERSEXTPROC glad_glGenRenderbuffersEXT;
#define glGenRenderbuffersEXT glad_glGenRenderbuffersEXT
GLAD_API_CALL PFNGLGENSAMPLERSPROC glad_glGenSamplers;
#define glGenSamplers glad_glGenSamplers
GLAD_API_CALL PFNGLGENTEXTURESPROC glad_glGenTextures;
#define glGenTextures glad_glGenTextures
GLAD_API_CALL PFNGLGENTEXTURESEXTPROC glad_glGenTexturesEXT;
#define glGenTexturesEXT glad_glGenTexturesEXT
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
#define glGenTransformFeedbacks glad_glGenTransformFeedbacks
GLAD_API_CALL PFNGLGENTRANSFORMFEEDBACKSNVPROC glad_glGenTransformFeedbacksNV;
#define glGenTransformFeedbacksNV glad_glGenTransformFeedbacksNV
GLAD_API_CALL PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
#define glGenVertexArrays glad_glGenVertexArrays
GLAD_API_CALL PFNGLGENVERTEXARRAYSAPPLEPROC glad_glGenVertexArraysAPPLE;
#define glGenVertexArraysAPPLE glad_glGenVertexArraysAPPLE
GLAD_API_CALL PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
#define glGenerateMipmap glad_glGenerateMipmap
GLAD_API_CALL PFNGLGENERATEMIPMAPEXTPROC glad_glGenerateMipmapEXT;
#define glGenerateMipmapEXT glad_glGenerateMipmapEXT
GLAD_API_CALL PFNGLGENERATEMULTITEXMIPMAPEXTPROC glad_glGenerateMultiTexMipmapEXT;
#define glGenerateMultiTexMipmapEXT glad_glGenerateMultiTexMipmapEXT
GLAD_API_CALL PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap;
#define glGenerateTextureMipmap glad_glGenerateTextureMipmap
GLAD_API_CALL PFNGLGENERATETEXTUREMIPMAPEXTPROC glad_glGenerateTextureMipmapEXT;
#define glGenerateTextureMipmapEXT glad_glGenerateTextureMipmapEXT
GLAD_API_CALL PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv;
#define glGetActiveAtomicCounterBufferiv glad_glGetActiveAtomicCounterBufferiv
GLAD_API_CALL PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
#define glGetActiveAttrib glad_glGetActiveAttrib
GLAD_API_CALL PFNGLGETACTIVEATTRIBARBPROC glad_glGetActiveAttribARB;
#define glGetActiveAttribARB glad_glGetActiveAttribARB
GLAD_API_CALL PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
#define glGetActiveSubroutineName glad_glGetActiveSubroutineName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName glad_glGetActiveSubroutineUniformName
GLAD_API_CALL PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv glad_glGetActiveSubroutineUniformiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
#define glGetActiveUniform glad_glGetActiveUniform
GLAD_API_CALL PFNGLGETACTIVEUNIFORMARBPROC glad_glGetActiveUniformARB;
#define glGetActiveUniformARB glad_glGetActiveUniformARB
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName glad_glGetActiveUniformBlockName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv glad_glGetActiveUniformBlockiv
GLAD_API_CALL PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
#define glGetActiveUniformName glad_glGetActiveUniformName
GLAD_API_CALL PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
#define glGetActiveUniformsiv glad_glGetActiveUniformsiv
GLAD_API_CALL PFNGLGETACTIVEVARYINGNVPROC glad_glGetActiveVaryingNV;
#define glGetActiveVaryingNV glad_glGetActiveVaryingNV
GLAD_API_CALL PFNGLGETATTACHEDOBJECTSARBPROC glad_glGetAttachedObjectsARB;
#define glGetAttachedObjectsARB glad_glGetAttachedObjectsARB
GLAD_API_CALL PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
#define glGetAttachedShaders glad_glGetAttachedShaders
GLAD_API_CALL PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
#define glGetAttribLocation glad_glGetAttribLocation
GLAD_API_CALL PFNGLGETATTRIBLOCATIONARBPROC glad_glGetAttribLocationARB;
#define glGetAttribLocationARB glad_glGetAttribLocationARB
GLAD_API_CALL PFNGLGETBOOLEANINDEXEDVEXTPROC glad_glGetBooleanIndexedvEXT;
#define glGetBooleanIndexedvEXT glad_glGetBooleanIndexedvEXT
GLAD_API_CALL PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
#define glGetBooleani_v glad_glGetBooleani_v
GLAD_API_CALL PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
#define glGetBooleanv glad_glGetBooleanv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
#define glGetBufferParameteri64v glad_glGetBufferParameteri64v
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
#define glGetBufferParameteriv glad_glGetBufferParameteriv
GLAD_API_CALL PFNGLGETBUFFERPARAMETERIVARBPROC glad_glGetBufferParameterivARB;
#define glGetBufferParameterivARB glad_glGetBufferParameterivARB
GLAD_API_CALL PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
#define glGetBufferPointerv glad_glGetBufferPointerv
GLAD_API_CALL PFNGLGETBUFFERPOINTERVARBPROC glad_glGetBufferPointervARB;
#define glGetBufferPointervARB glad_glGetBufferPointervARB
GLAD_API_CALL PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
#define glGetBufferSubData glad_glGetBufferSubData
GLAD_API_CALL PFNGLGETBUFFERSUBDATAARBPROC glad_glGetBufferSubDataARB;
#define glGetBufferSubDataARB glad_glGetBufferSubDataARB
GLAD_API_CALL PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
#define glGetClipPlane glad_glGetClipPlane
GLAD_API_CALL PFNGLGETCLIPPLANEFOESPROC glad_glGetClipPlanefOES;
#define glGetClipPlanefOES glad_glGetClipPlanefOES
GLAD_API_CALL PFNGLGETCOLORTABLEPROC glad_glGetColorTable;
#define glGetColorTable glad_glGetColorTable
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERFVPROC glad_glGetColorTableParameterfv;
#define glGetColorTableParameterfv glad_glGetColorTableParameterfv
GLAD_API_CALL PFNGLGETCOLORTABLEPARAMETERIVPROC glad_glGetColorTableParameteriv;
#define glGetColorTableParameteriv glad_glGetColorTableParameteriv
GLAD_API_CALL PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glad_glGetCompressedMultiTexImageEXT;
#define glGetCompressedMultiTexImageEXT glad_glGetCompressedMultiTexImageEXT
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
#define glGetCompressedTexImage glad_glGetCompressedTexImage
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_glGetCompressedTexImageARB;
#define glGetCompressedTexImageARB glad_glGetCompressedTexImageARB
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage;
#define glGetCompressedTextureImage glad_glGetCompressedTextureImage
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glad_glGetCompressedTextureImageEXT;
#define glGetCompressedTextureImageEXT glad_glGetCompressedTextureImageEXT
GLAD_API_CALL PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage;
#define glGetCompressedTextureSubImage glad_glGetCompressedTextureSubImage
GLAD_API_CALL PFNGLGETCONVOLUTIONFILTERPROC glad_glGetConvolutionFilter;
#define glGetConvolutionFilter glad_glGetConvolutionFilter
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_glGetConvolutionParameterfv;
#define glGetConvolutionParameterfv glad_glGetConvolutionParameterfv
GLAD_API_CALL PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_glGetConvolutionParameteriv;
#define glGetConvolutionParameteriv glad_glGetConvolutionParameteriv
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog;
#define glGetDebugMessageLog glad_glGetDebugMessageLog
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGAMDPROC glad_glGetDebugMessageLogAMD;
#define glGetDebugMessageLogAMD glad_glGetDebugMessageLogAMD
GLAD_API_CALL PFNGLGETDEBUGMESSAGELOGARBPROC glad_glGetDebugMessageLogARB;
#define glGetDebugMessageLogARB glad_glGetDebugMessageLogARB
GLAD_API_CALL PFNGLGETDOUBLEINDEXEDVEXTPROC glad_glGetDoubleIndexedvEXT;
#define glGetDoubleIndexedvEXT glad_glGetDoubleIndexedvEXT
GLAD_API_CALL PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
#define glGetDoublei_v glad_glGetDoublei_v
GLAD_API_CALL PFNGLGETDOUBLEI_VEXTPROC glad_glGetDoublei_vEXT;
#define glGetDoublei_vEXT glad_glGetDoublei_vEXT
GLAD_API_CALL PFNGLGETDOUBLEVPROC glad_glGetDoublev;
#define glGetDoublev glad_glGetDoublev
GLAD_API_CALL PFNGLGETERRORPROC glad_glGetError;
#define glGetError glad_glGetError
GLAD_API_CALL PFNGLGETFLOATINDEXEDVEXTPROC glad_glGetFloatIndexedvEXT;
#define glGetFloatIndexedvEXT glad_glGetFloatIndexedvEXT
GLAD_API_CALL PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
#define glGetFloati_v glad_glGetFloati_v
GLAD_API_CALL PFNGLGETFLOATI_VEXTPROC glad_glGetFloati_vEXT;
#define glGetFloati_vEXT glad_glGetFloati_vEXT
GLAD_API_CALL PFNGLGETFLOATVPROC glad_glGetFloatv;
#define glGetFloatv glad_glGetFloatv
GLAD_API_CALL PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
#define glGetFragDataIndex glad_glGetFragDataIndex
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
#define glGetFragDataLocation glad_glGetFragDataLocation
GLAD_API_CALL PFNGLGETFRAGDATALOCATIONEXTPROC glad_glGetFragDataLocationEXT;
#define glGetFragDataLocationEXT glad_glGetFragDataLocationEXT
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv glad_glGetFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetFramebufferAttachmentParameterivEXT;
#define glGetFramebufferAttachmentParameterivEXT glad_glGetFramebufferAttachmentParameterivEXT
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv;
#define glGetFramebufferParameteriv glad_glGetFramebufferParameteriv
GLAD_API_CALL PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetFramebufferParameterivEXT;
#define glGetFramebufferParameterivEXT glad_glGetFramebufferParameterivEXT
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus;
#define glGetGraphicsResetStatus glad_glGetGraphicsResetStatus
GLAD_API_CALL PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB;
#define glGetGraphicsResetStatusARB glad_glGetGraphicsResetStatusARB
GLAD_API_CALL PFNGLGETHANDLEARBPROC glad_glGetHandleARB;
#define glGetHandleARB glad_glGetHandleARB
GLAD_API_CALL PFNGLGETHISTOGRAMPROC glad_glGetHistogram;
#define glGetHistogram glad_glGetHistogram
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERFVPROC glad_glGetHistogramParameterfv;
#define glGetHistogramParameterfv glad_glGetHistogramParameterfv
GLAD_API_CALL PFNGLGETHISTOGRAMPARAMETERIVPROC glad_glGetHistogramParameteriv;
#define glGetHistogramParameteriv glad_glGetHistogramParameteriv
GLAD_API_CALL PFNGLGETINFOLOGARBPROC glad_glGetInfoLogARB;
#define glGetInfoLogARB glad_glGetInfoLogARB
GLAD_API_CALL PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
#define glGetInteger64i_v glad_glGetInteger64i_v
GLAD_API_CALL PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
#define glGetInteger64v glad_glGetInteger64v
GLAD_API_CALL PFNGLGETINTEGERINDEXEDVEXTPROC glad_glGetIntegerIndexedvEXT;
#define glGetIntegerIndexedvEXT glad_glGetIntegerIndexedvEXT
GLAD_API_CALL PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
#define glGetIntegeri_v glad_glGetIntegeri_v
GLAD_API_CALL PFNGLGETINTEGERVPROC glad_glGetIntegerv;
#define glGetIntegerv glad_glGetIntegerv
GLAD_API_CALL PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v;
#define glGetInternalformati64v glad_glGetInternalformati64v
GLAD_API_CALL PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ;
#define glGetInternalformativ glad_glGetInternalformativ
GLAD_API_CALL PFNGLGETLIGHTFVPROC glad_glGetLightfv;
#define glGetLightfv glad_glGetLightfv
GLAD_API_CALL PFNGLGETLIGHTIVPROC glad_glGetLightiv;
#define glGetLightiv glad_glGetLightiv
GLAD_API_CALL PFNGLGETMAPDVPROC glad_glGetMapdv;
#define glGetMapdv glad_glGetMapdv
GLAD_API_CALL PFNGLGETMAPFVPROC glad_glGetMapfv;
#define glGetMapfv glad_glGetMapfv
GLAD_API_CALL PFNGLGETMAPIVPROC glad_glGetMapiv;
#define glGetMapiv glad_glGetMapiv
GLAD_API_CALL PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
#define glGetMaterialfv glad_glGetMaterialfv
GLAD_API_CALL PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
#define glGetMaterialiv glad_glGetMaterialiv
GLAD_API_CALL PFNGLGETMINMAXPROC glad_glGetMinmax;
#define glGetMinmax glad_glGetMinmax
GLAD_API_CALL PFNGLGETMINMAXPARAMETERFVPROC glad_glGetMinmaxParameterfv;
#define glGetMinmaxParameterfv glad_glGetMinmaxParameterfv
GLAD_API_CALL PFNGLGETMINMAXPARAMETERIVPROC glad_glGetMinmaxParameteriv;
#define glGetMinmaxParameteriv glad_glGetMinmaxParameteriv
GLAD_API_CALL PFNGLGETMULTITEXENVFVEXTPROC glad_glGetMultiTexEnvfvEXT;
#define glGetMultiTexEnvfvEXT glad_glGetMultiTexEnvfvEXT
GLAD_API_CALL PFNGLGETMULTITEXENVIVEXTPROC glad_glGetMultiTexEnvivEXT;
#define glGetMultiTexEnvivEXT glad_glGetMultiTexEnvivEXT
GLAD_API_CALL PFNGLGETMULTITEXGENDVEXTPROC glad_glGetMultiTexGendvEXT;
#define glGetMultiTexGendvEXT glad_glGetMultiTexGendvEXT
GLAD_API_CALL PFNGLGETMULTITEXGENFVEXTPROC glad_glGetMultiTexGenfvEXT;
#define glGetMultiTexGenfvEXT glad_glGetMultiTexGenfvEXT
GLAD_API_CALL PFNGLGETMULTITEXGENIVEXTPROC glad_glGetMultiTexGenivEXT;
#define glGetMultiTexGenivEXT glad_glGetMultiTexGenivEXT
GLAD_API_CALL PFNGLGETMULTITEXIMAGEEXTPROC glad_glGetMultiTexImageEXT;
#define glGetMultiTexImageEXT glad_glGetMultiTexImageEXT
GLAD_API_CALL PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glad_glGetMultiTexLevelParameterfvEXT;
#define glGetMultiTexLevelParameterfvEXT glad_glGetMultiTexLevelParameterfvEXT
GLAD_API_CALL PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glad_glGetMultiTexLevelParameterivEXT;
#define glGetMultiTexLevelParameterivEXT glad_glGetMultiTexLevelParameterivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIIVEXTPROC glad_glGetMultiTexParameterIivEXT;
#define glGetMultiTexParameterIivEXT glad_glGetMultiTexParameterIivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glad_glGetMultiTexParameterIuivEXT;
#define glGetMultiTexParameterIuivEXT glad_glGetMultiTexParameterIuivEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERFVEXTPROC glad_glGetMultiTexParameterfvEXT;
#define glGetMultiTexParameterfvEXT glad_glGetMultiTexParameterfvEXT
GLAD_API_CALL PFNGLGETMULTITEXPARAMETERIVEXTPROC glad_glGetMultiTexParameterivEXT;
#define glGetMultiTexParameterivEXT glad_glGetMultiTexParameterivEXT
GLAD_API_CALL PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
#define glGetMultisamplefv glad_glGetMultisamplefv
GLAD_API_CALL PFNGLGETMULTISAMPLEFVNVPROC glad_glGetMultisamplefvNV;
#define glGetMultisamplefvNV glad_glGetMultisamplefvNV
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v;
#define glGetNamedBufferParameteri64v glad_glGetNamedBufferParameteri64v
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv;
#define glGetNamedBufferParameteriv glad_glGetNamedBufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glad_glGetNamedBufferParameterivEXT;
#define glGetNamedBufferParameterivEXT glad_glGetNamedBufferParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv;
#define glGetNamedBufferPointerv glad_glGetNamedBufferPointerv
GLAD_API_CALL PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glad_glGetNamedBufferPointervEXT;
#define glGetNamedBufferPointervEXT glad_glGetNamedBufferPointervEXT
GLAD_API_CALL PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData;
#define glGetNamedBufferSubData glad_glGetNamedBufferSubData
GLAD_API_CALL PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glad_glGetNamedBufferSubDataEXT;
#define glGetNamedBufferSubDataEXT glad_glGetNamedBufferSubDataEXT
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv;
#define glGetNamedFramebufferAttachmentParameteriv glad_glGetNamedFramebufferAttachmentParameteriv
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetNamedFramebufferAttachmentParameterivEXT;
#define glGetNamedFramebufferAttachmentParameterivEXT glad_glGetNamedFramebufferAttachmentParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv;
#define glGetNamedFramebufferParameteriv glad_glGetNamedFramebufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetNamedFramebufferParameterivEXT;
#define glGetNamedFramebufferParameterivEXT glad_glGetNamedFramebufferParameterivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glad_glGetNamedProgramLocalParameterIivEXT;
#define glGetNamedProgramLocalParameterIivEXT glad_glGetNamedProgramLocalParameterIivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glad_glGetNamedProgramLocalParameterIuivEXT;
#define glGetNamedProgramLocalParameterIuivEXT glad_glGetNamedProgramLocalParameterIuivEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glad_glGetNamedProgramLocalParameterdvEXT;
#define glGetNamedProgramLocalParameterdvEXT glad_glGetNamedProgramLocalParameterdvEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glad_glGetNamedProgramLocalParameterfvEXT;
#define glGetNamedProgramLocalParameterfvEXT glad_glGetNamedProgramLocalParameterfvEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glad_glGetNamedProgramStringEXT;
#define glGetNamedProgramStringEXT glad_glGetNamedProgramStringEXT
GLAD_API_CALL PFNGLGETNAMEDPROGRAMIVEXTPROC glad_glGetNamedProgramivEXT;
#define glGetNamedProgramivEXT glad_glGetNamedProgramivEXT
GLAD_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv;
#define glGetNamedRenderbufferParameteriv glad_glGetNamedRenderbufferParameteriv
GLAD_API_CALL PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glad_glGetNamedRenderbufferParameterivEXT;
#define glGetNamedRenderbufferParameterivEXT glad_glGetNamedRenderbufferParameterivEXT
GLAD_API_CALL PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel;
#define glGetObjectLabel glad_glGetObjectLabel
GLAD_API_CALL PFNGLGETOBJECTPARAMETERFVARBPROC glad_glGetObjectParameterfvARB;
#define glGetObjectParameterfvARB glad_glGetObjectParameterfvARB
GLAD_API_CALL PFNGLGETOBJECTPARAMETERIVARBPROC glad_glGetObjectParameterivARB;
#define glGetObjectParameterivARB glad_glGetObjectParameterivARB
GLAD_API_CALL PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel;
#define glGetObjectPtrLabel glad_glGetObjectPtrLabel
GLAD_API_CALL PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
#define glGetPixelMapfv glad_glGetPixelMapfv
GLAD_API_CALL PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
#define glGetPixelMapuiv glad_glGetPixelMapuiv
GLAD_API_CALL PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
#define glGetPixelMapusv glad_glGetPixelMapusv
GLAD_API_CALL PFNGLGETPOINTERINDEXEDVEXTPROC glad_glGetPointerIndexedvEXT;
#define glGetPointerIndexedvEXT glad_glGetPointerIndexedvEXT
GLAD_API_CALL PFNGLGETPOINTERI_VEXTPROC glad_glGetPointeri_vEXT;
#define glGetPointeri_vEXT glad_glGetPointeri_vEXT
GLAD_API_CALL PFNGLGETPOINTERVPROC glad_glGetPointerv;
#define glGetPointerv glad_glGetPointerv
GLAD_API_CALL PFNGLGETPOINTERVEXTPROC glad_glGetPointervEXT;
#define glGetPointervEXT glad_glGetPointervEXT
GLAD_API_CALL PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
#define glGetPolygonStipple glad_glGetPolygonStipple
GLAD_API_CALL PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
#define glGetProgramBinary glad_glGetProgramBinary
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_glGetProgramEnvParameterdvARB;
#define glGetProgramEnvParameterdvARB glad_glGetProgramEnvParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_glGetProgramEnvParameterfvARB;
#define glGetProgramEnvParameterfvARB glad_glGetProgramEnvParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
#define glGetProgramInfoLog glad_glGetProgramInfoLog
GLAD_API_CALL PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv;
#define glGetProgramInterfaceiv glad_glGetProgramInterfaceiv
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_glGetProgramLocalParameterdvARB;
#define glGetProgramLocalParameterdvARB glad_glGetProgramLocalParameterdvARB
GLAD_API_CALL PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_glGetProgramLocalParameterfvARB;
#define glGetProgramLocalParameterfvARB glad_glGetProgramLocalParameterfvARB
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERDVNVPROC glad_glGetProgramParameterdvNV;
#define glGetProgramParameterdvNV glad_glGetProgramParameterdvNV
GLAD_API_CALL PFNGLGETPROGRAMPARAMETERFVNVPROC glad_glGetProgramParameterfvNV;
#define glGetProgramParameterfvNV glad_glGetProgramParameterfvNV
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog glad_glGetProgramPipelineInfoLog
GLAD_API_CALL PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
#define glGetProgramPipelineiv glad_glGetProgramPipelineiv
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex;
#define glGetProgramResourceIndex glad_glGetProgramResourceIndex
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation;
#define glGetProgramResourceLocation glad_glGetProgramResourceLocation
GLAD_API_CALL PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex;
#define glGetProgramResourceLocationIndex glad_glGetProgramResourceLocationIndex
GLAD_API_CALL PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName;
#define glGetProgramResourceName glad_glGetProgramResourceName
GLAD_API_CALL PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv;
#define glGetProgramResourceiv glad_glGetProgramResourceiv
GLAD_API_CALL PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
#define glGetProgramStageiv glad_glGetProgramStageiv
GLAD_API_CALL PFNGLGETPROGRAMSTRINGARBPROC glad_glGetProgramStringARB;
#define glGetProgramStringARB glad_glGetProgramStringARB
GLAD_API_CALL PFNGLGETPROGRAMSTRINGNVPROC glad_glGetProgramStringNV;
#define glGetProgramStringNV glad_glGetProgramStringNV
GLAD_API_CALL PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
#define glGetProgramiv glad_glGetProgramiv
GLAD_API_CALL PFNGLGETPROGRAMIVARBPROC glad_glGetProgramivARB;
#define glGetProgramivARB glad_glGetProgramivARB
GLAD_API_CALL PFNGLGETPROGRAMIVNVPROC glad_glGetProgramivNV;
#define glGetProgramivNV glad_glGetProgramivNV
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v;
#define glGetQueryBufferObjecti64v glad_glGetQueryBufferObjecti64v
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv;
#define glGetQueryBufferObjectiv glad_glGetQueryBufferObjectiv
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v;
#define glGetQueryBufferObjectui64v glad_glGetQueryBufferObjectui64v
GLAD_API_CALL PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv;
#define glGetQueryBufferObjectuiv glad_glGetQueryBufferObjectuiv
GLAD_API_CALL PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
#define glGetQueryIndexediv glad_glGetQueryIndexediv
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
#define glGetQueryObjecti64v glad_glGetQueryObjecti64v
GLAD_API_CALL PFNGLGETQUERYOBJECTI64VEXTPROC glad_glGetQueryObjecti64vEXT;
#define glGetQueryObjecti64vEXT glad_glGetQueryObjecti64vEXT
GLAD_API_CALL PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
#define glGetQueryObjectiv glad_glGetQueryObjectiv
GLAD_API_CALL PFNGLGETQUERYOBJECTIVARBPROC glad_glGetQueryObjectivARB;
#define glGetQueryObjectivARB glad_glGetQueryObjectivARB
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
#define glGetQueryObjectui64v glad_glGetQueryObjectui64v
GLAD_API_CALL PFNGLGETQUERYOBJECTUI64VEXTPROC glad_glGetQueryObjectui64vEXT;
#define glGetQueryObjectui64vEXT glad_glGetQueryObjectui64vEXT
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
#define glGetQueryObjectuiv glad_glGetQueryObjectuiv
GLAD_API_CALL PFNGLGETQUERYOBJECTUIVARBPROC glad_glGetQueryObjectuivARB;
#define glGetQueryObjectuivARB glad_glGetQueryObjectuivARB
GLAD_API_CALL PFNGLGETQUERYIVPROC glad_glGetQueryiv;
#define glGetQueryiv glad_glGetQueryiv
GLAD_API_CALL PFNGLGETQUERYIVARBPROC glad_glGetQueryivARB;
#define glGetQueryivARB glad_glGetQueryivARB
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv glad_glGetRenderbufferParameteriv
GLAD_API_CALL PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glad_glGetRenderbufferParameterivEXT;
#define glGetRenderbufferParameterivEXT glad_glGetRenderbufferParameterivEXT
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv glad_glGetSamplerParameterIiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv glad_glGetSamplerParameterIuiv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
#define glGetSamplerParameterfv glad_glGetSamplerParameterfv
GLAD_API_CALL PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
#define glGetSamplerParameteriv glad_glGetSamplerParameteriv
GLAD_API_CALL PFNGLGETSEPARABLEFILTERPROC glad_glGetSeparableFilter;
#define glGetSeparableFilter glad_glGetSeparableFilter
GLAD_API_CALL PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
#define glGetShaderInfoLog glad_glGetShaderInfoLog
GLAD_API_CALL PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat glad_glGetShaderPrecisionFormat
GLAD_API_CALL PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
#define glGetShaderSource glad_glGetShaderSource
GLAD_API_CALL PFNGLGETSHADERSOURCEARBPROC glad_glGetShaderSourceARB;
#define glGetShaderSourceARB glad_glGetShaderSourceARB
GLAD_API_CALL PFNGLGETSHADERIVPROC glad_glGetShaderiv;
#define glGetShaderiv glad_glGetShaderiv
GLAD_API_CALL PFNGLGETSTRINGPROC glad_glGetString;
#define glGetString glad_glGetString
GLAD_API_CALL PFNGLGETSTRINGIPROC glad_glGetStringi;
#define glGetStringi glad_glGetStringi
GLAD_API_CALL PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
#define glGetSubroutineIndex glad_glGetSubroutineIndex
GLAD_API_CALL PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation glad_glGetSubroutineUniformLocation
GLAD_API_CALL PFNGLGETSYNCIVPROC glad_glGetSynciv;
#define glGetSynciv glad_glGetSynciv
GLAD_API_CALL PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
#define glGetTexEnvfv glad_glGetTexEnvfv
GLAD_API_CALL PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
#define glGetTexEnviv glad_glGetTexEnviv
GLAD_API_CALL PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
#define glGetTexGendv glad_glGetTexGendv
GLAD_API_CALL PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
#define glGetTexGenfv glad_glGetTexGenfv
GLAD_API_CALL PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
#define glGetTexGeniv glad_glGetTexGeniv
GLAD_API_CALL PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
#define glGetTexImage glad_glGetTexImage
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv glad_glGetTexLevelParameterfv
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv glad_glGetTexLevelParameteriv
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
#define glGetTexParameterIiv glad_glGetTexParameterIiv
GLAD_API_CALL PFNGLGETTEXPARAMETERIIVEXTPROC glad_glGetTexParameterIivEXT;
#define glGetTexParameterIivEXT glad_glGetTexParameterIivEXT
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
#define glGetTexParameterIuiv glad_glGetTexParameterIuiv
GLAD_API_CALL PFNGLGETTEXPARAMETERIUIVEXTPROC glad_glGetTexParameterIuivEXT;
#define glGetTexParameterIuivEXT glad_glGetTexParameterIuivEXT
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
#define glGetTexParameterfv glad_glGetTexParameterfv
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
#define glGetTexParameteriv glad_glGetTexParameteriv
GLAD_API_CALL PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage;
#define glGetTextureImage glad_glGetTextureImage
GLAD_API_CALL PFNGLGETTEXTUREIMAGEEXTPROC glad_glGetTextureImageEXT;
#define glGetTextureImageEXT glad_glGetTextureImageEXT
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv;
#define glGetTextureLevelParameterfv glad_glGetTextureLevelParameterfv
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glad_glGetTextureLevelParameterfvEXT;
#define glGetTextureLevelParameterfvEXT glad_glGetTextureLevelParameterfvEXT
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv;
#define glGetTextureLevelParameteriv glad_glGetTextureLevelParameteriv
GLAD_API_CALL PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glad_glGetTextureLevelParameterivEXT;
#define glGetTextureLevelParameterivEXT glad_glGetTextureLevelParameterivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv;
#define glGetTextureParameterIiv glad_glGetTextureParameterIiv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIIVEXTPROC glad_glGetTextureParameterIivEXT;
#define glGetTextureParameterIivEXT glad_glGetTextureParameterIivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv;
#define glGetTextureParameterIuiv glad_glGetTextureParameterIuiv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glad_glGetTextureParameterIuivEXT;
#define glGetTextureParameterIuivEXT glad_glGetTextureParameterIuivEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv;
#define glGetTextureParameterfv glad_glGetTextureParameterfv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERFVEXTPROC glad_glGetTextureParameterfvEXT;
#define glGetTextureParameterfvEXT glad_glGetTextureParameterfvEXT
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv;
#define glGetTextureParameteriv glad_glGetTextureParameteriv
GLAD_API_CALL PFNGLGETTEXTUREPARAMETERIVEXTPROC glad_glGetTextureParameterivEXT;
#define glGetTextureParameterivEXT glad_glGetTextureParameterivEXT
GLAD_API_CALL PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage;
#define glGetTextureSubImage glad_glGetTextureSubImage
GLAD_API_CALL PFNGLGETTRACKMATRIXIVNVPROC glad_glGetTrackMatrixivNV;
#define glGetTrackMatrixivNV glad_glGetTrackMatrixivNV
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying glad_glGetTransformFeedbackVarying
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glad_glGetTransformFeedbackVaryingEXT;
#define glGetTransformFeedbackVaryingEXT glad_glGetTransformFeedbackVaryingEXT
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glad_glGetTransformFeedbackVaryingNV;
#define glGetTransformFeedbackVaryingNV glad_glGetTransformFeedbackVaryingNV
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v;
#define glGetTransformFeedbacki64_v glad_glGetTransformFeedbacki64_v
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v;
#define glGetTransformFeedbacki_v glad_glGetTransformFeedbacki_v
GLAD_API_CALL PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv;
#define glGetTransformFeedbackiv glad_glGetTransformFeedbackiv
GLAD_API_CALL PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
#define glGetUniformBlockIndex glad_glGetUniformBlockIndex
GLAD_API_CALL PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
#define glGetUniformIndices glad_glGetUniformIndices
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
#define glGetUniformLocation glad_glGetUniformLocation
GLAD_API_CALL PFNGLGETUNIFORMLOCATIONARBPROC glad_glGetUniformLocationARB;
#define glGetUniformLocationARB glad_glGetUniformLocationARB
GLAD_API_CALL PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv glad_glGetUniformSubroutineuiv
GLAD_API_CALL PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
#define glGetUniformdv glad_glGetUniformdv
GLAD_API_CALL PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
#define glGetUniformfv glad_glGetUniformfv
GLAD_API_CALL PFNGLGETUNIFORMFVARBPROC glad_glGetUniformfvARB;
#define glGetUniformfvARB glad_glGetUniformfvARB
GLAD_API_CALL PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
#define glGetUniformiv glad_glGetUniformiv
GLAD_API_CALL PFNGLGETUNIFORMIVARBPROC glad_glGetUniformivARB;
#define glGetUniformivARB glad_glGetUniformivARB
GLAD_API_CALL PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
#define glGetUniformuiv glad_glGetUniformuiv
GLAD_API_CALL PFNGLGETUNIFORMUIVEXTPROC glad_glGetUniformuivEXT;
#define glGetUniformuivEXT glad_glGetUniformuivEXT
GLAD_API_CALL PFNGLGETVARYINGLOCATIONNVPROC glad_glGetVaryingLocationNV;
#define glGetVaryingLocationNV glad_glGetVaryingLocationNV
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv;
#define glGetVertexArrayIndexed64iv glad_glGetVertexArrayIndexed64iv
GLAD_API_CALL PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv;
#define glGetVertexArrayIndexediv glad_glGetVertexArrayIndexediv
GLAD_API_CALL PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glad_glGetVertexArrayIntegeri_vEXT;
#define glGetVertexArrayIntegeri_vEXT glad_glGetVertexArrayIntegeri_vEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYINTEGERVEXTPROC glad_glGetVertexArrayIntegervEXT;
#define glGetVertexArrayIntegervEXT glad_glGetVertexArrayIntegervEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glad_glGetVertexArrayPointeri_vEXT;
#define glGetVertexArrayPointeri_vEXT glad_glGetVertexArrayPointeri_vEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYPOINTERVEXTPROC glad_glGetVertexArrayPointervEXT;
#define glGetVertexArrayPointervEXT glad_glGetVertexArrayPointervEXT
GLAD_API_CALL PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv;
#define glGetVertexArrayiv glad_glGetVertexArrayiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
#define glGetVertexAttribIiv glad_glGetVertexAttribIiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIIVEXTPROC glad_glGetVertexAttribIivEXT;
#define glGetVertexAttribIivEXT glad_glGetVertexAttribIivEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv glad_glGetVertexAttribIuiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIUIVEXTPROC glad_glGetVertexAttribIuivEXT;
#define glGetVertexAttribIuivEXT glad_glGetVertexAttribIuivEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
#define glGetVertexAttribLdv glad_glGetVertexAttribLdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBLDVEXTPROC glad_glGetVertexAttribLdvEXT;
#define glGetVertexAttribLdvEXT glad_glGetVertexAttribLdvEXT
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv glad_glGetVertexAttribPointerv
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_glGetVertexAttribPointervARB;
#define glGetVertexAttribPointervARB glad_glGetVertexAttribPointervARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBPOINTERVNVPROC glad_glGetVertexAttribPointervNV;
#define glGetVertexAttribPointervNV glad_glGetVertexAttribPointervNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
#define glGetVertexAttribdv glad_glGetVertexAttribdv
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVARBPROC glad_glGetVertexAttribdvARB;
#define glGetVertexAttribdvARB glad_glGetVertexAttribdvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBDVNVPROC glad_glGetVertexAttribdvNV;
#define glGetVertexAttribdvNV glad_glGetVertexAttribdvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
#define glGetVertexAttribfv glad_glGetVertexAttribfv
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVARBPROC glad_glGetVertexAttribfvARB;
#define glGetVertexAttribfvARB glad_glGetVertexAttribfvARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBFVNVPROC glad_glGetVertexAttribfvNV;
#define glGetVertexAttribfvNV glad_glGetVertexAttribfvNV
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
#define glGetVertexAttribiv glad_glGetVertexAttribiv
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVARBPROC glad_glGetVertexAttribivARB;
#define glGetVertexAttribivARB glad_glGetVertexAttribivARB
GLAD_API_CALL PFNGLGETVERTEXATTRIBIVNVPROC glad_glGetVertexAttribivNV;
#define glGetVertexAttribivNV glad_glGetVertexAttribivNV
GLAD_API_CALL PFNGLGETNCOLORTABLEPROC glad_glGetnColorTable;
#define glGetnColorTable glad_glGetnColorTable
GLAD_API_CALL PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB;
#define glGetnColorTableARB glad_glGetnColorTableARB
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_glGetnCompressedTexImage;
#define glGetnCompressedTexImage glad_glGetnCompressedTexImage
GLAD_API_CALL PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB;
#define glGetnCompressedTexImageARB glad_glGetnCompressedTexImageARB
GLAD_API_CALL PFNGLGETNCONVOLUTIONFILTERPROC glad_glGetnConvolutionFilter;
#define glGetnConvolutionFilter glad_glGetnConvolutionFilter
GLAD_API_CALL PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB;
#define glGetnConvolutionFilterARB glad_glGetnConvolutionFilterARB
GLAD_API_CALL PFNGLGETNHISTOGRAMPROC glad_glGetnHistogram;
#define glGetnHistogram glad_glGetnHistogram
GLAD_API_CALL PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB;
#define glGetnHistogramARB glad_glGetnHistogramARB
GLAD_API_CALL PFNGLGETNMAPDVPROC glad_glGetnMapdv;
#define glGetnMapdv glad_glGetnMapdv
GLAD_API_CALL PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB;
#define glGetnMapdvARB glad_glGetnMapdvARB
GLAD_API_CALL PFNGLGETNMAPFVPROC glad_glGetnMapfv;
#define glGetnMapfv glad_glGetnMapfv
GLAD_API_CALL PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB;
#define glGetnMapfvARB glad_glGetnMapfvARB
GLAD_API_CALL PFNGLGETNMAPIVPROC glad_glGetnMapiv;
#define glGetnMapiv glad_glGetnMapiv
GLAD_API_CALL PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB;
#define glGetnMapivARB glad_glGetnMapivARB
GLAD_API_CALL PFNGLGETNMINMAXPROC glad_glGetnMinmax;
#define glGetnMinmax glad_glGetnMinmax
GLAD_API_CALL PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB;
#define glGetnMinmaxARB glad_glGetnMinmaxARB
GLAD_API_CALL PFNGLGETNPIXELMAPFVPROC glad_glGetnPixelMapfv;
#define glGetnPixelMapfv glad_glGetnPixelMapfv
GLAD_API_CALL PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB;
#define glGetnPixelMapfvARB glad_glGetnPixelMapfvARB
GLAD_API_CALL PFNGLGETNPIXELMAPUIVPROC glad_glGetnPixelMapuiv;
#define glGetnPixelMapuiv glad_glGetnPixelMapuiv
GLAD_API_CALL PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB;
#define glGetnPixelMapuivARB glad_glGetnPixelMapuivARB
GLAD_API_CALL PFNGLGETNPIXELMAPUSVPROC glad_glGetnPixelMapusv;
#define glGetnPixelMapusv glad_glGetnPixelMapusv
GLAD_API_CALL PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB;
#define glGetnPixelMapusvARB glad_glGetnPixelMapusvARB
GLAD_API_CALL PFNGLGETNPOLYGONSTIPPLEPROC glad_glGetnPolygonStipple;
#define glGetnPolygonStipple glad_glGetnPolygonStipple
GLAD_API_CALL PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB;
#define glGetnPolygonStippleARB glad_glGetnPolygonStippleARB
GLAD_API_CALL PFNGLGETNSEPARABLEFILTERPROC glad_glGetnSeparableFilter;
#define glGetnSeparableFilter glad_glGetnSeparableFilter
GLAD_API_CALL PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB;
#define glGetnSeparableFilterARB glad_glGetnSeparableFilterARB
GLAD_API_CALL PFNGLGETNTEXIMAGEPROC glad_glGetnTexImage;
#define glGetnTexImage glad_glGetnTexImage
GLAD_API_CALL PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB;
#define glGetnTexImageARB glad_glGetnTexImageARB
GLAD_API_CALL PFNGLGETNUNIFORMDVPROC glad_glGetnUniformdv;
#define glGetnUniformdv glad_glGetnUniformdv
GLAD_API_CALL PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB;
#define glGetnUniformdvARB glad_glGetnUniformdvARB
GLAD_API_CALL PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv;
#define glGetnUniformfv glad_glGetnUniformfv
GLAD_API_CALL PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB;
#define glGetnUniformfvARB glad_glGetnUniformfvARB
GLAD_API_CALL PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv;
#define glGetnUniformiv glad_glGetnUniformiv
GLAD_API_CALL PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB;
#define glGetnUniformivARB glad_glGetnUniformivARB
GLAD_API_CALL PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv;
#define glGetnUniformuiv glad_glGetnUniformuiv
GLAD_API_CALL PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB;
#define glGetnUniformuivARB glad_glGetnUniformuivARB
GLAD_API_CALL PFNGLHINTPROC glad_glHint;
#define glHint glad_glHint
GLAD_API_CALL PFNGLHISTOGRAMPROC glad_glHistogram;
#define glHistogram glad_glHistogram
GLAD_API_CALL PFNGLINDEXMASKPROC glad_glIndexMask;
#define glIndexMask glad_glIndexMask
GLAD_API_CALL PFNGLINDEXPOINTERPROC glad_glIndexPointer;
#define glIndexPointer glad_glIndexPointer
GLAD_API_CALL PFNGLINDEXPOINTEREXTPROC glad_glIndexPointerEXT;
#define glIndexPointerEXT glad_glIndexPointerEXT
GLAD_API_CALL PFNGLINDEXDPROC glad_glIndexd;
#define glIndexd glad_glIndexd
GLAD_API_CALL PFNGLINDEXDVPROC glad_glIndexdv;
#define glIndexdv glad_glIndexdv
GLAD_API_CALL PFNGLINDEXFPROC glad_glIndexf;
#define glIndexf glad_glIndexf
GLAD_API_CALL PFNGLINDEXFVPROC glad_glIndexfv;
#define glIndexfv glad_glIndexfv
GLAD_API_CALL PFNGLINDEXIPROC glad_glIndexi;
#define glIndexi glad_glIndexi
GLAD_API_CALL PFNGLINDEXIVPROC glad_glIndexiv;
#define glIndexiv glad_glIndexiv
GLAD_API_CALL PFNGLINDEXSPROC glad_glIndexs;
#define glIndexs glad_glIndexs
GLAD_API_CALL PFNGLINDEXSVPROC glad_glIndexsv;
#define glIndexsv glad_glIndexsv
GLAD_API_CALL PFNGLINDEXUBPROC glad_glIndexub;
#define glIndexub glad_glIndexub
GLAD_API_CALL PFNGLINDEXUBVPROC glad_glIndexubv;
#define glIndexubv glad_glIndexubv
GLAD_API_CALL PFNGLINITNAMESPROC glad_glInitNames;
#define glInitNames glad_glInitNames
GLAD_API_CALL PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
#define glInterleavedArrays glad_glInterleavedArrays
GLAD_API_CALL PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData;
#define glInvalidateBufferData glad_glInvalidateBufferData
GLAD_API_CALL PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData;
#define glInvalidateBufferSubData glad_glInvalidateBufferSubData
GLAD_API_CALL PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer;
#define glInvalidateFramebuffer glad_glInvalidateFramebuffer
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData;
#define glInvalidateNamedFramebufferData glad_glInvalidateNamedFramebufferData
GLAD_API_CALL PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData;
#define glInvalidateNamedFramebufferSubData glad_glInvalidateNamedFramebufferSubData
GLAD_API_CALL PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer;
#define glInvalidateSubFramebuffer glad_glInvalidateSubFramebuffer
GLAD_API_CALL PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage;
#define glInvalidateTexImage glad_glInvalidateTexImage
GLAD_API_CALL PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage;
#define glInvalidateTexSubImage glad_glInvalidateTexSubImage
GLAD_API_CALL PFNGLISBUFFERPROC glad_glIsBuffer;
#define glIsBuffer glad_glIsBuffer
GLAD_API_CALL PFNGLISBUFFERARBPROC glad_glIsBufferARB;
#define glIsBufferARB glad_glIsBufferARB
GLAD_API_CALL PFNGLISENABLEDPROC glad_glIsEnabled;
#define glIsEnabled glad_glIsEnabled
GLAD_API_CALL PFNGLISENABLEDINDEXEDEXTPROC glad_glIsEnabledIndexedEXT;
#define glIsEnabledIndexedEXT glad_glIsEnabledIndexedEXT
GLAD_API_CALL PFNGLISENABLEDIPROC glad_glIsEnabledi;
#define glIsEnabledi glad_glIsEnabledi
GLAD_API_CALL PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
#define glIsFramebuffer glad_glIsFramebuffer
GLAD_API_CALL PFNGLISFRAMEBUFFEREXTPROC glad_glIsFramebufferEXT;
#define glIsFramebufferEXT glad_glIsFramebufferEXT
GLAD_API_CALL PFNGLISLISTPROC glad_glIsList;
#define glIsList glad_glIsList
GLAD_API_CALL PFNGLISPROGRAMPROC glad_glIsProgram;
#define glIsProgram glad_glIsProgram
GLAD_API_CALL PFNGLISPROGRAMARBPROC glad_glIsProgramARB;
#define glIsProgramARB glad_glIsProgramARB
GLAD_API_CALL PFNGLISPROGRAMNVPROC glad_glIsProgramNV;
#define glIsProgramNV glad_glIsProgramNV
GLAD_API_CALL PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
#define glIsProgramPipeline glad_glIsProgramPipeline
GLAD_API_CALL PFNGLISQUERYPROC glad_glIsQuery;
#define glIsQuery glad_glIsQuery
GLAD_API_CALL PFNGLISQUERYARBPROC glad_glIsQueryARB;
#define glIsQueryARB glad_glIsQueryARB
GLAD_API_CALL PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
#define glIsRenderbuffer glad_glIsRenderbuffer
GLAD_API_CALL PFNGLISRENDERBUFFEREXTPROC glad_glIsRenderbufferEXT;
#define glIsRenderbufferEXT glad_glIsRenderbufferEXT
GLAD_API_CALL PFNGLISSAMPLERPROC glad_glIsSampler;
#define glIsSampler glad_glIsSampler
GLAD_API_CALL PFNGLISSHADERPROC glad_glIsShader;
#define glIsShader glad_glIsShader
GLAD_API_CALL PFNGLISSYNCPROC glad_glIsSync;
#define glIsSync glad_glIsSync
GLAD_API_CALL PFNGLISTEXTUREPROC glad_glIsTexture;
#define glIsTexture glad_glIsTexture
GLAD_API_CALL PFNGLISTEXTUREEXTPROC glad_glIsTextureEXT;
#define glIsTextureEXT glad_glIsTextureEXT
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
#define glIsTransformFeedback glad_glIsTransformFeedback
GLAD_API_CALL PFNGLISTRANSFORMFEEDBACKNVPROC glad_glIsTransformFeedbackNV;
#define glIsTransformFeedbackNV glad_glIsTransformFeedbackNV
GLAD_API_CALL PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
#define glIsVertexArray glad_glIsVertexArray
GLAD_API_CALL PFNGLISVERTEXARRAYAPPLEPROC glad_glIsVertexArrayAPPLE;
#define glIsVertexArrayAPPLE glad_glIsVertexArrayAPPLE
GLAD_API_CALL PFNGLLIGHTMODELFPROC glad_glLightModelf;
#define glLightModelf glad_glLightModelf
GLAD_API_CALL PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
#define glLightModelfv glad_glLightModelfv
GLAD_API_CALL PFNGLLIGHTMODELIPROC glad_glLightModeli;
#define glLightModeli glad_glLightModeli
GLAD_API_CALL PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
#define glLightModeliv glad_glLightModeliv
GLAD_API_CALL PFNGLLIGHTFPROC glad_glLightf;
#define glLightf glad_glLightf
GLAD_API_CALL PFNGLLIGHTFVPROC glad_glLightfv;
#define glLightfv glad_glLightfv
GLAD_API_CALL PFNGLLIGHTIPROC glad_glLighti;
#define glLighti glad_glLighti
GLAD_API_CALL PFNGLLIGHTIVPROC glad_glLightiv;
#define glLightiv glad_glLightiv
GLAD_API_CALL PFNGLLINESTIPPLEPROC glad_glLineStipple;
#define glLineStipple glad_glLineStipple
GLAD_API_CALL PFNGLLINEWIDTHPROC glad_glLineWidth;
#define glLineWidth glad_glLineWidth
GLAD_API_CALL PFNGLLINKPROGRAMPROC glad_glLinkProgram;
#define glLinkProgram glad_glLinkProgram
GLAD_API_CALL PFNGLLINKPROGRAMARBPROC glad_glLinkProgramARB;
#define glLinkProgramARB glad_glLinkProgramARB
GLAD_API_CALL PFNGLLISTBASEPROC glad_glListBase;
#define glListBase glad_glListBase
GLAD_API_CALL PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
#define glLoadIdentity glad_glLoadIdentity
GLAD_API_CALL PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
#define glLoadMatrixd glad_glLoadMatrixd
GLAD_API_CALL PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
#define glLoadMatrixf glad_glLoadMatrixf
GLAD_API_CALL PFNGLLOADNAMEPROC glad_glLoadName;
#define glLoadName glad_glLoadName
GLAD_API_CALL PFNGLLOADPROGRAMNVPROC glad_glLoadProgramNV;
#define glLoadProgramNV glad_glLoadProgramNV
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;
#define glLoadTransposeMatrixd glad_glLoadTransposeMatrixd
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_glLoadTransposeMatrixdARB;
#define glLoadTransposeMatrixdARB glad_glLoadTransposeMatrixdARB
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;
#define glLoadTransposeMatrixf glad_glLoadTransposeMatrixf
GLAD_API_CALL PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_glLoadTransposeMatrixfARB;
#define glLoadTransposeMatrixfARB glad_glLoadTransposeMatrixfARB
GLAD_API_CALL PFNGLLOGICOPPROC glad_glLogicOp;
#define glLogicOp glad_glLogicOp
GLAD_API_CALL PFNGLMAP1DPROC glad_glMap1d;
#define glMap1d glad_glMap1d
GLAD_API_CALL PFNGLMAP1FPROC glad_glMap1f;
#define glMap1f glad_glMap1f
GLAD_API_CALL PFNGLMAP2DPROC glad_glMap2d;
#define glMap2d glad_glMap2d
GLAD_API_CALL PFNGLMAP2FPROC glad_glMap2f;
#define glMap2f glad_glMap2f
GLAD_API_CALL PFNGLMAPBUFFERPROC glad_glMapBuffer;
#define glMapBuffer glad_glMapBuffer
GLAD_API_CALL PFNGLMAPBUFFERARBPROC glad_glMapBufferARB;
#define glMapBufferARB glad_glMapBufferARB
GLAD_API_CALL PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
#define glMapBufferRange glad_glMapBufferRange
GLAD_API_CALL PFNGLMAPGRID1DPROC glad_glMapGrid1d;
#define glMapGrid1d glad_glMapGrid1d
GLAD_API_CALL PFNGLMAPGRID1FPROC glad_glMapGrid1f;
#define glMapGrid1f glad_glMapGrid1f
GLAD_API_CALL PFNGLMAPGRID2DPROC glad_glMapGrid2d;
#define glMapGrid2d glad_glMapGrid2d
GLAD_API_CALL PFNGLMAPGRID2FPROC glad_glMapGrid2f;
#define glMapGrid2f glad_glMapGrid2f
GLAD_API_CALL PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer;
#define glMapNamedBuffer glad_glMapNamedBuffer
GLAD_API_CALL PFNGLMAPNAMEDBUFFEREXTPROC glad_glMapNamedBufferEXT;
#define glMapNamedBufferEXT glad_glMapNamedBufferEXT
GLAD_API_CALL PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange;
#define glMapNamedBufferRange glad_glMapNamedBufferRange
GLAD_API_CALL PFNGLMAPNAMEDBUFFERRANGEEXTPROC glad_glMapNamedBufferRangeEXT;
#define glMapNamedBufferRangeEXT glad_glMapNamedBufferRangeEXT
GLAD_API_CALL PFNGLMATERIALFPROC glad_glMaterialf;
#define glMaterialf glad_glMaterialf
GLAD_API_CALL PFNGLMATERIALFVPROC glad_glMaterialfv;
#define glMaterialfv glad_glMaterialfv
GLAD_API_CALL PFNGLMATERIALIPROC glad_glMateriali;
#define glMateriali glad_glMateriali
GLAD_API_CALL PFNGLMATERIALIVPROC glad_glMaterialiv;
#define glMaterialiv glad_glMaterialiv
GLAD_API_CALL PFNGLMATRIXFRUSTUMEXTPROC glad_glMatrixFrustumEXT;
#define glMatrixFrustumEXT glad_glMatrixFrustumEXT
GLAD_API_CALL PFNGLMATRIXLOADIDENTITYEXTPROC glad_glMatrixLoadIdentityEXT;
#define glMatrixLoadIdentityEXT glad_glMatrixLoadIdentityEXT
GLAD_API_CALL PFNGLMATRIXLOADTRANSPOSEDEXTPROC glad_glMatrixLoadTransposedEXT;
#define glMatrixLoadTransposedEXT glad_glMatrixLoadTransposedEXT
GLAD_API_CALL PFNGLMATRIXLOADTRANSPOSEFEXTPROC glad_glMatrixLoadTransposefEXT;
#define glMatrixLoadTransposefEXT glad_glMatrixLoadTransposefEXT
GLAD_API_CALL PFNGLMATRIXLOADDEXTPROC glad_glMatrixLoaddEXT;
#define glMatrixLoaddEXT glad_glMatrixLoaddEXT
GLAD_API_CALL PFNGLMATRIXLOADFEXTPROC glad_glMatrixLoadfEXT;
#define glMatrixLoadfEXT glad_glMatrixLoadfEXT
GLAD_API_CALL PFNGLMATRIXMODEPROC glad_glMatrixMode;
#define glMatrixMode glad_glMatrixMode
GLAD_API_CALL PFNGLMATRIXMULTTRANSPOSEDEXTPROC glad_glMatrixMultTransposedEXT;
#define glMatrixMultTransposedEXT glad_glMatrixMultTransposedEXT
GLAD_API_CALL PFNGLMATRIXMULTTRANSPOSEFEXTPROC glad_glMatrixMultTransposefEXT;
#define glMatrixMultTransposefEXT glad_glMatrixMultTransposefEXT
GLAD_API_CALL PFNGLMATRIXMULTDEXTPROC glad_glMatrixMultdEXT;
#define glMatrixMultdEXT glad_glMatrixMultdEXT
GLAD_API_CALL PFNGLMATRIXMULTFEXTPROC glad_glMatrixMultfEXT;
#define glMatrixMultfEXT glad_glMatrixMultfEXT
GLAD_API_CALL PFNGLMATRIXORTHOEXTPROC glad_glMatrixOrthoEXT;
#define glMatrixOrthoEXT glad_glMatrixOrthoEXT
GLAD_API_CALL PFNGLMATRIXPOPEXTPROC glad_glMatrixPopEXT;
#define glMatrixPopEXT glad_glMatrixPopEXT
GLAD_API_CALL PFNGLMATRIXPUSHEXTPROC glad_glMatrixPushEXT;
#define glMatrixPushEXT glad_glMatrixPushEXT
GLAD_API_CALL PFNGLMATRIXROTATEDEXTPROC glad_glMatrixRotatedEXT;
#define glMatrixRotatedEXT glad_glMatrixRotatedEXT
GLAD_API_CALL PFNGLMATRIXROTATEFEXTPROC glad_glMatrixRotatefEXT;
#define glMatrixRotatefEXT glad_glMatrixRotatefEXT
GLAD_API_CALL PFNGLMATRIXSCALEDEXTPROC glad_glMatrixScaledEXT;
#define glMatrixScaledEXT glad_glMatrixScaledEXT
GLAD_API_CALL PFNGLMATRIXSCALEFEXTPROC glad_glMatrixScalefEXT;
#define glMatrixScalefEXT glad_glMatrixScalefEXT
GLAD_API_CALL PFNGLMATRIXTRANSLATEDEXTPROC glad_glMatrixTranslatedEXT;
#define glMatrixTranslatedEXT glad_glMatrixTranslatedEXT
GLAD_API_CALL PFNGLMATRIXTRANSLATEFEXTPROC glad_glMatrixTranslatefEXT;
#define glMatrixTranslatefEXT glad_glMatrixTranslatefEXT
GLAD_API_CALL PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier;
#define glMemoryBarrier glad_glMemoryBarrier
GLAD_API_CALL PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion;
#define glMemoryBarrierByRegion glad_glMemoryBarrierByRegion
GLAD_API_CALL PFNGLMEMORYBARRIEREXTPROC glad_glMemoryBarrierEXT;
#define glMemoryBarrierEXT glad_glMemoryBarrierEXT
GLAD_API_CALL PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
#define glMinSampleShading glad_glMinSampleShading
GLAD_API_CALL PFNGLMINSAMPLESHADINGARBPROC glad_glMinSampleShadingARB;
#define glMinSampleShadingARB glad_glMinSampleShadingARB
GLAD_API_CALL PFNGLMINMAXPROC glad_glMinmax;
#define glMinmax glad_glMinmax
GLAD_API_CALL PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
#define glMultMatrixd glad_glMultMatrixd
GLAD_API_CALL PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
#define glMultMatrixf glad_glMultMatrixf
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;
#define glMultTransposeMatrixd glad_glMultTransposeMatrixd
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_glMultTransposeMatrixdARB;
#define glMultTransposeMatrixdARB glad_glMultTransposeMatrixdARB
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;
#define glMultTransposeMatrixf glad_glMultTransposeMatrixf
GLAD_API_CALL PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_glMultTransposeMatrixfARB;
#define glMultTransposeMatrixfARB glad_glMultTransposeMatrixfARB
GLAD_API_CALL PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
#define glMultiDrawArrays glad_glMultiDrawArrays
GLAD_API_CALL PFNGLMULTIDRAWARRAYSEXTPROC glad_glMultiDrawArraysEXT;
#define glMultiDrawArraysEXT glad_glMultiDrawArraysEXT
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect;
#define glMultiDrawArraysIndirect glad_glMultiDrawArraysIndirect
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glad_glMultiDrawArraysIndirectAMD;
#define glMultiDrawArraysIndirectAMD glad_glMultiDrawArraysIndirectAMD
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_glMultiDrawArraysIndirectCount;
#define glMultiDrawArraysIndirectCount glad_glMultiDrawArraysIndirectCount
GLAD_API_CALL PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_glMultiDrawArraysIndirectCountARB;
#define glMultiDrawArraysIndirectCountARB glad_glMultiDrawArraysIndirectCountARB
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
#define glMultiDrawElements glad_glMultiDrawElements
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex glad_glMultiDrawElementsBaseVertex
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSEXTPROC glad_glMultiDrawElementsEXT;
#define glMultiDrawElementsEXT glad_glMultiDrawElementsEXT
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect;
#define glMultiDrawElementsIndirect glad_glMultiDrawElementsIndirect
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glad_glMultiDrawElementsIndirectAMD;
#define glMultiDrawElementsIndirectAMD glad_glMultiDrawElementsIndirectAMD
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_glMultiDrawElementsIndirectCount;
#define glMultiDrawElementsIndirectCount glad_glMultiDrawElementsIndirectCount
GLAD_API_CALL PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_glMultiDrawElementsIndirectCountARB;
#define glMultiDrawElementsIndirectCountARB glad_glMultiDrawElementsIndirectCountARB
GLAD_API_CALL PFNGLMULTITEXBUFFEREXTPROC glad_glMultiTexBufferEXT;
#define glMultiTexBufferEXT glad_glMultiTexBufferEXT
GLAD_API_CALL PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;
#define glMultiTexCoord1d glad_glMultiTexCoord1d
GLAD_API_CALL PFNGLMULTITEXCOORD1DARBPROC glad_glMultiTexCoord1dARB;
#define glMultiTexCoord1dARB glad_glMultiTexCoord1dARB
GLAD_API_CALL PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;
#define glMultiTexCoord1dv glad_glMultiTexCoord1dv
GLAD_API_CALL PFNGLMULTITEXCOORD1DVARBPROC glad_glMultiTexCoord1dvARB;
#define glMultiTexCoord1dvARB glad_glMultiTexCoord1dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;
#define glMultiTexCoord1f glad_glMultiTexCoord1f
GLAD_API_CALL PFNGLMULTITEXCOORD1FARBPROC glad_glMultiTexCoord1fARB;
#define glMultiTexCoord1fARB glad_glMultiTexCoord1fARB
GLAD_API_CALL PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;
#define glMultiTexCoord1fv glad_glMultiTexCoord1fv
GLAD_API_CALL PFNGLMULTITEXCOORD1FVARBPROC glad_glMultiTexCoord1fvARB;
#define glMultiTexCoord1fvARB glad_glMultiTexCoord1fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;
#define glMultiTexCoord1i glad_glMultiTexCoord1i
GLAD_API_CALL PFNGLMULTITEXCOORD1IARBPROC glad_glMultiTexCoord1iARB;
#define glMultiTexCoord1iARB glad_glMultiTexCoord1iARB
GLAD_API_CALL PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;
#define glMultiTexCoord1iv glad_glMultiTexCoord1iv
GLAD_API_CALL PFNGLMULTITEXCOORD1IVARBPROC glad_glMultiTexCoord1ivARB;
#define glMultiTexCoord1ivARB glad_glMultiTexCoord1ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;
#define glMultiTexCoord1s glad_glMultiTexCoord1s
GLAD_API_CALL PFNGLMULTITEXCOORD1SARBPROC glad_glMultiTexCoord1sARB;
#define glMultiTexCoord1sARB glad_glMultiTexCoord1sARB
GLAD_API_CALL PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;
#define glMultiTexCoord1sv glad_glMultiTexCoord1sv
GLAD_API_CALL PFNGLMULTITEXCOORD1SVARBPROC glad_glMultiTexCoord1svARB;
#define glMultiTexCoord1svARB glad_glMultiTexCoord1svARB
GLAD_API_CALL PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;
#define glMultiTexCoord2d glad_glMultiTexCoord2d
GLAD_API_CALL PFNGLMULTITEXCOORD2DARBPROC glad_glMultiTexCoord2dARB;
#define glMultiTexCoord2dARB glad_glMultiTexCoord2dARB
GLAD_API_CALL PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;
#define glMultiTexCoord2dv glad_glMultiTexCoord2dv
GLAD_API_CALL PFNGLMULTITEXCOORD2DVARBPROC glad_glMultiTexCoord2dvARB;
#define glMultiTexCoord2dvARB glad_glMultiTexCoord2dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;
#define glMultiTexCoord2f glad_glMultiTexCoord2f
GLAD_API_CALL PFNGLMULTITEXCOORD2FARBPROC glad_glMultiTexCoord2fARB;
#define glMultiTexCoord2fARB glad_glMultiTexCoord2fARB
GLAD_API_CALL PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;
#define glMultiTexCoord2fv glad_glMultiTexCoord2fv
GLAD_API_CALL PFNGLMULTITEXCOORD2FVARBPROC glad_glMultiTexCoord2fvARB;
#define glMultiTexCoord2fvARB glad_glMultiTexCoord2fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;
#define glMultiTexCoord2i glad_glMultiTexCoord2i
GLAD_API_CALL PFNGLMULTITEXCOORD2IARBPROC glad_glMultiTexCoord2iARB;
#define glMultiTexCoord2iARB glad_glMultiTexCoord2iARB
GLAD_API_CALL PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;
#define glMultiTexCoord2iv glad_glMultiTexCoord2iv
GLAD_API_CALL PFNGLMULTITEXCOORD2IVARBPROC glad_glMultiTexCoord2ivARB;
#define glMultiTexCoord2ivARB glad_glMultiTexCoord2ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;
#define glMultiTexCoord2s glad_glMultiTexCoord2s
GLAD_API_CALL PFNGLMULTITEXCOORD2SARBPROC glad_glMultiTexCoord2sARB;
#define glMultiTexCoord2sARB glad_glMultiTexCoord2sARB
GLAD_API_CALL PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;
#define glMultiTexCoord2sv glad_glMultiTexCoord2sv
GLAD_API_CALL PFNGLMULTITEXCOORD2SVARBPROC glad_glMultiTexCoord2svARB;
#define glMultiTexCoord2svARB glad_glMultiTexCoord2svARB
GLAD_API_CALL PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;
#define glMultiTexCoord3d glad_glMultiTexCoord3d
GLAD_API_CALL PFNGLMULTITEXCOORD3DARBPROC glad_glMultiTexCoord3dARB;
#define glMultiTexCoord3dARB glad_glMultiTexCoord3dARB
GLAD_API_CALL PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;
#define glMultiTexCoord3dv glad_glMultiTexCoord3dv
GLAD_API_CALL PFNGLMULTITEXCOORD3DVARBPROC glad_glMultiTexCoord3dvARB;
#define glMultiTexCoord3dvARB glad_glMultiTexCoord3dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;
#define glMultiTexCoord3f glad_glMultiTexCoord3f
GLAD_API_CALL PFNGLMULTITEXCOORD3FARBPROC glad_glMultiTexCoord3fARB;
#define glMultiTexCoord3fARB glad_glMultiTexCoord3fARB
GLAD_API_CALL PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;
#define glMultiTexCoord3fv glad_glMultiTexCoord3fv
GLAD_API_CALL PFNGLMULTITEXCOORD3FVARBPROC glad_glMultiTexCoord3fvARB;
#define glMultiTexCoord3fvARB glad_glMultiTexCoord3fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;
#define glMultiTexCoord3i glad_glMultiTexCoord3i
GLAD_API_CALL PFNGLMULTITEXCOORD3IARBPROC glad_glMultiTexCoord3iARB;
#define glMultiTexCoord3iARB glad_glMultiTexCoord3iARB
GLAD_API_CALL PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;
#define glMultiTexCoord3iv glad_glMultiTexCoord3iv
GLAD_API_CALL PFNGLMULTITEXCOORD3IVARBPROC glad_glMultiTexCoord3ivARB;
#define glMultiTexCoord3ivARB glad_glMultiTexCoord3ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;
#define glMultiTexCoord3s glad_glMultiTexCoord3s
GLAD_API_CALL PFNGLMULTITEXCOORD3SARBPROC glad_glMultiTexCoord3sARB;
#define glMultiTexCoord3sARB glad_glMultiTexCoord3sARB
GLAD_API_CALL PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;
#define glMultiTexCoord3sv glad_glMultiTexCoord3sv
GLAD_API_CALL PFNGLMULTITEXCOORD3SVARBPROC glad_glMultiTexCoord3svARB;
#define glMultiTexCoord3svARB glad_glMultiTexCoord3svARB
GLAD_API_CALL PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;
#define glMultiTexCoord4d glad_glMultiTexCoord4d
GLAD_API_CALL PFNGLMULTITEXCOORD4DARBPROC glad_glMultiTexCoord4dARB;
#define glMultiTexCoord4dARB glad_glMultiTexCoord4dARB
GLAD_API_CALL PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;
#define glMultiTexCoord4dv glad_glMultiTexCoord4dv
GLAD_API_CALL PFNGLMULTITEXCOORD4DVARBPROC glad_glMultiTexCoord4dvARB;
#define glMultiTexCoord4dvARB glad_glMultiTexCoord4dvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;
#define glMultiTexCoord4f glad_glMultiTexCoord4f
GLAD_API_CALL PFNGLMULTITEXCOORD4FARBPROC glad_glMultiTexCoord4fARB;
#define glMultiTexCoord4fARB glad_glMultiTexCoord4fARB
GLAD_API_CALL PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;
#define glMultiTexCoord4fv glad_glMultiTexCoord4fv
GLAD_API_CALL PFNGLMULTITEXCOORD4FVARBPROC glad_glMultiTexCoord4fvARB;
#define glMultiTexCoord4fvARB glad_glMultiTexCoord4fvARB
GLAD_API_CALL PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;
#define glMultiTexCoord4i glad_glMultiTexCoord4i
GLAD_API_CALL PFNGLMULTITEXCOORD4IARBPROC glad_glMultiTexCoord4iARB;
#define glMultiTexCoord4iARB glad_glMultiTexCoord4iARB
GLAD_API_CALL PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;
#define glMultiTexCoord4iv glad_glMultiTexCoord4iv
GLAD_API_CALL PFNGLMULTITEXCOORD4IVARBPROC glad_glMultiTexCoord4ivARB;
#define glMultiTexCoord4ivARB glad_glMultiTexCoord4ivARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;
#define glMultiTexCoord4s glad_glMultiTexCoord4s
GLAD_API_CALL PFNGLMULTITEXCOORD4SARBPROC glad_glMultiTexCoord4sARB;
#define glMultiTexCoord4sARB glad_glMultiTexCoord4sARB
GLAD_API_CALL PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;
#define glMultiTexCoord4sv glad_glMultiTexCoord4sv
GLAD_API_CALL PFNGLMULTITEXCOORD4SVARBPROC glad_glMultiTexCoord4svARB;
#define glMultiTexCoord4svARB glad_glMultiTexCoord4svARB
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui glad_glMultiTexCoordP1ui
GLAD_API_CALL PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv glad_glMultiTexCoordP1uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui glad_glMultiTexCoordP2ui
GLAD_API_CALL PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv glad_glMultiTexCoordP2uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui glad_glMultiTexCoordP3ui
GLAD_API_CALL PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv glad_glMultiTexCoordP3uiv
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui glad_glMultiTexCoordP4ui
GLAD_API_CALL PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv glad_glMultiTexCoordP4uiv
GLAD_API_CALL PFNGLMULTITEXCOORDPOINTEREXTPROC glad_glMultiTexCoordPointerEXT;
#define glMultiTexCoordPointerEXT glad_glMultiTexCoordPointerEXT
GLAD_API_CALL PFNGLMULTITEXENVFEXTPROC glad_glMultiTexEnvfEXT;
#define glMultiTexEnvfEXT glad_glMultiTexEnvfEXT
GLAD_API_CALL PFNGLMULTITEXENVFVEXTPROC glad_glMultiTexEnvfvEXT;
#define glMultiTexEnvfvEXT glad_glMultiTexEnvfvEXT
GLAD_API_CALL PFNGLMULTITEXENVIEXTPROC glad_glMultiTexEnviEXT;
#define glMultiTexEnviEXT glad_glMultiTexEnviEXT
GLAD_API_CALL PFNGLMULTITEXENVIVEXTPROC glad_glMultiTexEnvivEXT;
#define glMultiTexEnvivEXT glad_glMultiTexEnvivEXT
GLAD_API_CALL PFNGLMULTITEXGENDEXTPROC glad_glMultiTexGendEXT;
#define glMultiTexGendEXT glad_glMultiTexGendEXT
GLAD_API_CALL PFNGLMULTITEXGENDVEXTPROC glad_glMultiTexGendvEXT;
#define glMultiTexGendvEXT glad_glMultiTexGendvEXT
GLAD_API_CALL PFNGLMULTITEXGENFEXTPROC glad_glMultiTexGenfEXT;
#define glMultiTexGenfEXT glad_glMultiTexGenfEXT
GLAD_API_CALL PFNGLMULTITEXGENFVEXTPROC glad_glMultiTexGenfvEXT;
#define glMultiTexGenfvEXT glad_glMultiTexGenfvEXT
GLAD_API_CALL PFNGLMULTITEXGENIEXTPROC glad_glMultiTexGeniEXT;
#define glMultiTexGeniEXT glad_glMultiTexGeniEXT
GLAD_API_CALL PFNGLMULTITEXGENIVEXTPROC glad_glMultiTexGenivEXT;
#define glMultiTexGenivEXT glad_glMultiTexGenivEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE1DEXTPROC glad_glMultiTexImage1DEXT;
#define glMultiTexImage1DEXT glad_glMultiTexImage1DEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE2DEXTPROC glad_glMultiTexImage2DEXT;
#define glMultiTexImage2DEXT glad_glMultiTexImage2DEXT
GLAD_API_CALL PFNGLMULTITEXIMAGE3DEXTPROC glad_glMultiTexImage3DEXT;
#define glMultiTexImage3DEXT glad_glMultiTexImage3DEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIIVEXTPROC glad_glMultiTexParameterIivEXT;
#define glMultiTexParameterIivEXT glad_glMultiTexParameterIivEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIUIVEXTPROC glad_glMultiTexParameterIuivEXT;
#define glMultiTexParameterIuivEXT glad_glMultiTexParameterIuivEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERFEXTPROC glad_glMultiTexParameterfEXT;
#define glMultiTexParameterfEXT glad_glMultiTexParameterfEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERFVEXTPROC glad_glMultiTexParameterfvEXT;
#define glMultiTexParameterfvEXT glad_glMultiTexParameterfvEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIEXTPROC glad_glMultiTexParameteriEXT;
#define glMultiTexParameteriEXT glad_glMultiTexParameteriEXT
GLAD_API_CALL PFNGLMULTITEXPARAMETERIVEXTPROC glad_glMultiTexParameterivEXT;
#define glMultiTexParameterivEXT glad_glMultiTexParameterivEXT
GLAD_API_CALL PFNGLMULTITEXRENDERBUFFEREXTPROC glad_glMultiTexRenderbufferEXT;
#define glMultiTexRenderbufferEXT glad_glMultiTexRenderbufferEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE1DEXTPROC glad_glMultiTexSubImage1DEXT;
#define glMultiTexSubImage1DEXT glad_glMultiTexSubImage1DEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE2DEXTPROC glad_glMultiTexSubImage2DEXT;
#define glMultiTexSubImage2DEXT glad_glMultiTexSubImage2DEXT
GLAD_API_CALL PFNGLMULTITEXSUBIMAGE3DEXTPROC glad_glMultiTexSubImage3DEXT;
#define glMultiTexSubImage3DEXT glad_glMultiTexSubImage3DEXT
GLAD_API_CALL PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData;
#define glNamedBufferData glad_glNamedBufferData
GLAD_API_CALL PFNGLNAMEDBUFFERDATAEXTPROC glad_glNamedBufferDataEXT;
#define glNamedBufferDataEXT glad_glNamedBufferDataEXT
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage;
#define glNamedBufferStorage glad_glNamedBufferStorage
GLAD_API_CALL PFNGLNAMEDBUFFERSTORAGEEXTPROC glad_glNamedBufferStorageEXT;
#define glNamedBufferStorageEXT glad_glNamedBufferStorageEXT
GLAD_API_CALL PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData;
#define glNamedBufferSubData glad_glNamedBufferSubData
GLAD_API_CALL PFNGLNAMEDBUFFERSUBDATAEXTPROC glad_glNamedBufferSubDataEXT;
#define glNamedBufferSubDataEXT glad_glNamedBufferSubDataEXT
GLAD_API_CALL PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glad_glNamedCopyBufferSubDataEXT;
#define glNamedCopyBufferSubDataEXT glad_glNamedCopyBufferSubDataEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer;
#define glNamedFramebufferDrawBuffer glad_glNamedFramebufferDrawBuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers;
#define glNamedFramebufferDrawBuffers glad_glNamedFramebufferDrawBuffers
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri;
#define glNamedFramebufferParameteri glad_glNamedFramebufferParameteri
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glad_glNamedFramebufferParameteriEXT;
#define glNamedFramebufferParameteriEXT glad_glNamedFramebufferParameteriEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer;
#define glNamedFramebufferReadBuffer glad_glNamedFramebufferReadBuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer;
#define glNamedFramebufferRenderbuffer glad_glNamedFramebufferRenderbuffer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glad_glNamedFramebufferRenderbufferEXT;
#define glNamedFramebufferRenderbufferEXT glad_glNamedFramebufferRenderbufferEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture;
#define glNamedFramebufferTexture glad_glNamedFramebufferTexture
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glad_glNamedFramebufferTexture1DEXT;
#define glNamedFramebufferTexture1DEXT glad_glNamedFramebufferTexture1DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glad_glNamedFramebufferTexture2DEXT;
#define glNamedFramebufferTexture2DEXT glad_glNamedFramebufferTexture2DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glad_glNamedFramebufferTexture3DEXT;
#define glNamedFramebufferTexture3DEXT glad_glNamedFramebufferTexture3DEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glad_glNamedFramebufferTextureEXT;
#define glNamedFramebufferTextureEXT glad_glNamedFramebufferTextureEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glad_glNamedFramebufferTextureFaceEXT;
#define glNamedFramebufferTextureFaceEXT glad_glNamedFramebufferTextureFaceEXT
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer;
#define glNamedFramebufferTextureLayer glad_glNamedFramebufferTextureLayer
GLAD_API_CALL PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glad_glNamedFramebufferTextureLayerEXT;
#define glNamedFramebufferTextureLayerEXT glad_glNamedFramebufferTextureLayerEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glad_glNamedProgramLocalParameter4dEXT;
#define glNamedProgramLocalParameter4dEXT glad_glNamedProgramLocalParameter4dEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glad_glNamedProgramLocalParameter4dvEXT;
#define glNamedProgramLocalParameter4dvEXT glad_glNamedProgramLocalParameter4dvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glad_glNamedProgramLocalParameter4fEXT;
#define glNamedProgramLocalParameter4fEXT glad_glNamedProgramLocalParameter4fEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glad_glNamedProgramLocalParameter4fvEXT;
#define glNamedProgramLocalParameter4fvEXT glad_glNamedProgramLocalParameter4fvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glad_glNamedProgramLocalParameterI4iEXT;
#define glNamedProgramLocalParameterI4iEXT glad_glNamedProgramLocalParameterI4iEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glad_glNamedProgramLocalParameterI4ivEXT;
#define glNamedProgramLocalParameterI4ivEXT glad_glNamedProgramLocalParameterI4ivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glad_glNamedProgramLocalParameterI4uiEXT;
#define glNamedProgramLocalParameterI4uiEXT glad_glNamedProgramLocalParameterI4uiEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glad_glNamedProgramLocalParameterI4uivEXT;
#define glNamedProgramLocalParameterI4uivEXT glad_glNamedProgramLocalParameterI4uivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glad_glNamedProgramLocalParameters4fvEXT;
#define glNamedProgramLocalParameters4fvEXT glad_glNamedProgramLocalParameters4fvEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glad_glNamedProgramLocalParametersI4ivEXT;
#define glNamedProgramLocalParametersI4ivEXT glad_glNamedProgramLocalParametersI4ivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glad_glNamedProgramLocalParametersI4uivEXT;
#define glNamedProgramLocalParametersI4uivEXT glad_glNamedProgramLocalParametersI4uivEXT
GLAD_API_CALL PFNGLNAMEDPROGRAMSTRINGEXTPROC glad_glNamedProgramStringEXT;
#define glNamedProgramStringEXT glad_glNamedProgramStringEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage;
#define glNamedRenderbufferStorage glad_glNamedRenderbufferStorage
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glad_glNamedRenderbufferStorageEXT;
#define glNamedRenderbufferStorageEXT glad_glNamedRenderbufferStorageEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample;
#define glNamedRenderbufferStorageMultisample glad_glNamedRenderbufferStorageMultisample
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glad_glNamedRenderbufferStorageMultisampleCoverageEXT;
#define glNamedRenderbufferStorageMultisampleCoverageEXT glad_glNamedRenderbufferStorageMultisampleCoverageEXT
GLAD_API_CALL PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glNamedRenderbufferStorageMultisampleEXT;
#define glNamedRenderbufferStorageMultisampleEXT glad_glNamedRenderbufferStorageMultisampleEXT
GLAD_API_CALL PFNGLNEWLISTPROC glad_glNewList;
#define glNewList glad_glNewList
GLAD_API_CALL PFNGLNORMAL3BPROC glad_glNormal3b;
#define glNormal3b glad_glNormal3b
GLAD_API_CALL PFNGLNORMAL3BVPROC glad_glNormal3bv;
#define glNormal3bv glad_glNormal3bv
GLAD_API_CALL PFNGLNORMAL3DPROC glad_glNormal3d;
#define glNormal3d glad_glNormal3d
GLAD_API_CALL PFNGLNORMAL3DVPROC glad_glNormal3dv;
#define glNormal3dv glad_glNormal3dv
GLAD_API_CALL PFNGLNORMAL3FPROC glad_glNormal3f;
#define glNormal3f glad_glNormal3f
GLAD_API_CALL PFNGLNORMAL3FVPROC glad_glNormal3fv;
#define glNormal3fv glad_glNormal3fv
GLAD_API_CALL PFNGLNORMAL3IPROC glad_glNormal3i;
#define glNormal3i glad_glNormal3i
GLAD_API_CALL PFNGLNORMAL3IVPROC glad_glNormal3iv;
#define glNormal3iv glad_glNormal3iv
GLAD_API_CALL PFNGLNORMAL3SPROC glad_glNormal3s;
#define glNormal3s glad_glNormal3s
GLAD_API_CALL PFNGLNORMAL3SVPROC glad_glNormal3sv;
#define glNormal3sv glad_glNormal3sv
GLAD_API_CALL PFNGLNORMALP3UIPROC glad_glNormalP3ui;
#define glNormalP3ui glad_glNormalP3ui
GLAD_API_CALL PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
#define glNormalP3uiv glad_glNormalP3uiv
GLAD_API_CALL PFNGLNORMALPOINTERPROC glad_glNormalPointer;
#define glNormalPointer glad_glNormalPointer
GLAD_API_CALL PFNGLNORMALPOINTEREXTPROC glad_glNormalPointerEXT;
#define glNormalPointerEXT glad_glNormalPointerEXT
GLAD_API_CALL PFNGLOBJECTLABELPROC glad_glObjectLabel;
#define glObjectLabel glad_glObjectLabel
GLAD_API_CALL PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel;
#define glObjectPtrLabel glad_glObjectPtrLabel
GLAD_API_CALL PFNGLORTHOPROC glad_glOrtho;
#define glOrtho glad_glOrtho
GLAD_API_CALL PFNGLORTHOFOESPROC glad_glOrthofOES;
#define glOrthofOES glad_glOrthofOES
GLAD_API_CALL PFNGLPASSTHROUGHPROC glad_glPassThrough;
#define glPassThrough glad_glPassThrough
GLAD_API_CALL PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
#define glPatchParameterfv glad_glPatchParameterfv
GLAD_API_CALL PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
#define glPatchParameteri glad_glPatchParameteri
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
#define glPauseTransformFeedback glad_glPauseTransformFeedback
GLAD_API_CALL PFNGLPAUSETRANSFORMFEEDBACKNVPROC glad_glPauseTransformFeedbackNV;
#define glPauseTransformFeedbackNV glad_glPauseTransformFeedbackNV
GLAD_API_CALL PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
#define glPixelMapfv glad_glPixelMapfv
GLAD_API_CALL PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
#define glPixelMapuiv glad_glPixelMapuiv
GLAD_API_CALL PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
#define glPixelMapusv glad_glPixelMapusv
GLAD_API_CALL PFNGLPIXELSTOREFPROC glad_glPixelStoref;
#define glPixelStoref glad_glPixelStoref
GLAD_API_CALL PFNGLPIXELSTOREIPROC glad_glPixelStorei;
#define glPixelStorei glad_glPixelStorei
GLAD_API_CALL PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
#define glPixelTransferf glad_glPixelTransferf
GLAD_API_CALL PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
#define glPixelTransferi glad_glPixelTransferi
GLAD_API_CALL PFNGLPIXELZOOMPROC glad_glPixelZoom;
#define glPixelZoom glad_glPixelZoom
GLAD_API_CALL PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
#define glPointParameterf glad_glPointParameterf
GLAD_API_CALL PFNGLPOINTPARAMETERFARBPROC glad_glPointParameterfARB;
#define glPointParameterfARB glad_glPointParameterfARB
GLAD_API_CALL PFNGLPOINTPARAMETERFEXTPROC glad_glPointParameterfEXT;
#define glPointParameterfEXT glad_glPointParameterfEXT
GLAD_API_CALL PFNGLPOINTPARAMETERFSGISPROC glad_glPointParameterfSGIS;
#define glPointParameterfSGIS glad_glPointParameterfSGIS
GLAD_API_CALL PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
#define glPointParameterfv glad_glPointParameterfv
GLAD_API_CALL PFNGLPOINTPARAMETERFVARBPROC glad_glPointParameterfvARB;
#define glPointParameterfvARB glad_glPointParameterfvARB
GLAD_API_CALL PFNGLPOINTPARAMETERFVEXTPROC glad_glPointParameterfvEXT;
#define glPointParameterfvEXT glad_glPointParameterfvEXT
GLAD_API_CALL PFNGLPOINTPARAMETERFVSGISPROC glad_glPointParameterfvSGIS;
#define glPointParameterfvSGIS glad_glPointParameterfvSGIS
GLAD_API_CALL PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
#define glPointParameteri glad_glPointParameteri
GLAD_API_CALL PFNGLPOINTPARAMETERINVPROC glad_glPointParameteriNV;
#define glPointParameteriNV glad_glPointParameteriNV
GLAD_API_CALL PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
#define glPointParameteriv glad_glPointParameteriv
GLAD_API_CALL PFNGLPOINTPARAMETERIVNVPROC glad_glPointParameterivNV;
#define glPointParameterivNV glad_glPointParameterivNV
GLAD_API_CALL PFNGLPOINTSIZEPROC glad_glPointSize;
#define glPointSize glad_glPointSize
GLAD_API_CALL PFNGLPOLYGONMODEPROC glad_glPolygonMode;
#define glPolygonMode glad_glPolygonMode
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
#define glPolygonOffset glad_glPolygonOffset
GLAD_API_CALL PFNGLPOLYGONOFFSETCLAMPPROC glad_glPolygonOffsetClamp;
#define glPolygonOffsetClamp glad_glPolygonOffsetClamp
GLAD_API_CALL PFNGLPOLYGONOFFSETCLAMPEXTPROC glad_glPolygonOffsetClampEXT;
#define glPolygonOffsetClampEXT glad_glPolygonOffsetClampEXT
GLAD_API_CALL PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
#define glPolygonStipple glad_glPolygonStipple
GLAD_API_CALL PFNGLPOPATTRIBPROC glad_glPopAttrib;
#define glPopAttrib glad_glPopAttrib
GLAD_API_CALL PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
#define glPopClientAttrib glad_glPopClientAttrib
GLAD_API_CALL PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup;
#define glPopDebugGroup glad_glPopDebugGroup
GLAD_API_CALL PFNGLPOPMATRIXPROC glad_glPopMatrix;
#define glPopMatrix glad_glPopMatrix
GLAD_API_CALL PFNGLPOPNAMEPROC glad_glPopName;
#define glPopName glad_glPopName
GLAD_API_CALL PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex glad_glPrimitiveRestartIndex
GLAD_API_CALL PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
#define glPrioritizeTextures glad_glPrioritizeTextures
GLAD_API_CALL PFNGLPRIORITIZETEXTURESEXTPROC glad_glPrioritizeTexturesEXT;
#define glPrioritizeTexturesEXT glad_glPrioritizeTexturesEXT
GLAD_API_CALL PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
#define glProgramBinary glad_glProgramBinary
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DARBPROC glad_glProgramEnvParameter4dARB;
#define glProgramEnvParameter4dARB glad_glProgramEnvParameter4dARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_glProgramEnvParameter4dvARB;
#define glProgramEnvParameter4dvARB glad_glProgramEnvParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FARBPROC glad_glProgramEnvParameter4fARB;
#define glProgramEnvParameter4fARB glad_glProgramEnvParameter4fARB
GLAD_API_CALL PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_glProgramEnvParameter4fvARB;
#define glProgramEnvParameter4fvARB glad_glProgramEnvParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_glProgramLocalParameter4dARB;
#define glProgramLocalParameter4dARB glad_glProgramLocalParameter4dARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_glProgramLocalParameter4dvARB;
#define glProgramLocalParameter4dvARB glad_glProgramLocalParameter4dvARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_glProgramLocalParameter4fARB;
#define glProgramLocalParameter4fARB glad_glProgramLocalParameter4fARB
GLAD_API_CALL PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_glProgramLocalParameter4fvARB;
#define glProgramLocalParameter4fvARB glad_glProgramLocalParameter4fvARB
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DNVPROC glad_glProgramParameter4dNV;
#define glProgramParameter4dNV glad_glProgramParameter4dNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4DVNVPROC glad_glProgramParameter4dvNV;
#define glProgramParameter4dvNV glad_glProgramParameter4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FNVPROC glad_glProgramParameter4fNV;
#define glProgramParameter4fNV glad_glProgramParameter4fNV
GLAD_API_CALL PFNGLPROGRAMPARAMETER4FVNVPROC glad_glProgramParameter4fvNV;
#define glProgramParameter4fvNV glad_glProgramParameter4fvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
#define glProgramParameteri glad_glProgramParameteri
GLAD_API_CALL PFNGLPROGRAMPARAMETERIARBPROC glad_glProgramParameteriARB;
#define glProgramParameteriARB glad_glProgramParameteriARB
GLAD_API_CALL PFNGLPROGRAMPARAMETERIEXTPROC glad_glProgramParameteriEXT;
#define glProgramParameteriEXT glad_glProgramParameteriEXT
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4DVNVPROC glad_glProgramParameters4dvNV;
#define glProgramParameters4dvNV glad_glProgramParameters4dvNV
GLAD_API_CALL PFNGLPROGRAMPARAMETERS4FVNVPROC glad_glProgramParameters4fvNV;
#define glProgramParameters4fvNV glad_glProgramParameters4fvNV
GLAD_API_CALL PFNGLPROGRAMSTRINGARBPROC glad_glProgramStringARB;
#define glProgramStringARB glad_glProgramStringARB
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
#define glProgramUniform1d glad_glProgramUniform1d
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DEXTPROC glad_glProgramUniform1dEXT;
#define glProgramUniform1dEXT glad_glProgramUniform1dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
#define glProgramUniform1dv glad_glProgramUniform1dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1DVEXTPROC glad_glProgramUniform1dvEXT;
#define glProgramUniform1dvEXT glad_glProgramUniform1dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
#define glProgramUniform1f glad_glProgramUniform1f
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FEXTPROC glad_glProgramUniform1fEXT;
#define glProgramUniform1fEXT glad_glProgramUniform1fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
#define glProgramUniform1fv glad_glProgramUniform1fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1FVEXTPROC glad_glProgramUniform1fvEXT;
#define glProgramUniform1fvEXT glad_glProgramUniform1fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
#define glProgramUniform1i glad_glProgramUniform1i
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IEXTPROC glad_glProgramUniform1iEXT;
#define glProgramUniform1iEXT glad_glProgramUniform1iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
#define glProgramUniform1iv glad_glProgramUniform1iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1IVEXTPROC glad_glProgramUniform1ivEXT;
#define glProgramUniform1ivEXT glad_glProgramUniform1ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
#define glProgramUniform1ui glad_glProgramUniform1ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIEXTPROC glad_glProgramUniform1uiEXT;
#define glProgramUniform1uiEXT glad_glProgramUniform1uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
#define glProgramUniform1uiv glad_glProgramUniform1uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM1UIVEXTPROC glad_glProgramUniform1uivEXT;
#define glProgramUniform1uivEXT glad_glProgramUniform1uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
#define glProgramUniform2d glad_glProgramUniform2d
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DEXTPROC glad_glProgramUniform2dEXT;
#define glProgramUniform2dEXT glad_glProgramUniform2dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
#define glProgramUniform2dv glad_glProgramUniform2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2DVEXTPROC glad_glProgramUniform2dvEXT;
#define glProgramUniform2dvEXT glad_glProgramUniform2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
#define glProgramUniform2f glad_glProgramUniform2f
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FEXTPROC glad_glProgramUniform2fEXT;
#define glProgramUniform2fEXT glad_glProgramUniform2fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
#define glProgramUniform2fv glad_glProgramUniform2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2FVEXTPROC glad_glProgramUniform2fvEXT;
#define glProgramUniform2fvEXT glad_glProgramUniform2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
#define glProgramUniform2i glad_glProgramUniform2i
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IEXTPROC glad_glProgramUniform2iEXT;
#define glProgramUniform2iEXT glad_glProgramUniform2iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
#define glProgramUniform2iv glad_glProgramUniform2iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2IVEXTPROC glad_glProgramUniform2ivEXT;
#define glProgramUniform2ivEXT glad_glProgramUniform2ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
#define glProgramUniform2ui glad_glProgramUniform2ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIEXTPROC glad_glProgramUniform2uiEXT;
#define glProgramUniform2uiEXT glad_glProgramUniform2uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
#define glProgramUniform2uiv glad_glProgramUniform2uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM2UIVEXTPROC glad_glProgramUniform2uivEXT;
#define glProgramUniform2uivEXT glad_glProgramUniform2uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
#define glProgramUniform3d glad_glProgramUniform3d
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DEXTPROC glad_glProgramUniform3dEXT;
#define glProgramUniform3dEXT glad_glProgramUniform3dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
#define glProgramUniform3dv glad_glProgramUniform3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3DVEXTPROC glad_glProgramUniform3dvEXT;
#define glProgramUniform3dvEXT glad_glProgramUniform3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
#define glProgramUniform3f glad_glProgramUniform3f
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FEXTPROC glad_glProgramUniform3fEXT;
#define glProgramUniform3fEXT glad_glProgramUniform3fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
#define glProgramUniform3fv glad_glProgramUniform3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3FVEXTPROC glad_glProgramUniform3fvEXT;
#define glProgramUniform3fvEXT glad_glProgramUniform3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
#define glProgramUniform3i glad_glProgramUniform3i
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IEXTPROC glad_glProgramUniform3iEXT;
#define glProgramUniform3iEXT glad_glProgramUniform3iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
#define glProgramUniform3iv glad_glProgramUniform3iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3IVEXTPROC glad_glProgramUniform3ivEXT;
#define glProgramUniform3ivEXT glad_glProgramUniform3ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
#define glProgramUniform3ui glad_glProgramUniform3ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIEXTPROC glad_glProgramUniform3uiEXT;
#define glProgramUniform3uiEXT glad_glProgramUniform3uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
#define glProgramUniform3uiv glad_glProgramUniform3uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM3UIVEXTPROC glad_glProgramUniform3uivEXT;
#define glProgramUniform3uivEXT glad_glProgramUniform3uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
#define glProgramUniform4d glad_glProgramUniform4d
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DEXTPROC glad_glProgramUniform4dEXT;
#define glProgramUniform4dEXT glad_glProgramUniform4dEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
#define glProgramUniform4dv glad_glProgramUniform4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4DVEXTPROC glad_glProgramUniform4dvEXT;
#define glProgramUniform4dvEXT glad_glProgramUniform4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
#define glProgramUniform4f glad_glProgramUniform4f
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FEXTPROC glad_glProgramUniform4fEXT;
#define glProgramUniform4fEXT glad_glProgramUniform4fEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
#define glProgramUniform4fv glad_glProgramUniform4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4FVEXTPROC glad_glProgramUniform4fvEXT;
#define glProgramUniform4fvEXT glad_glProgramUniform4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
#define glProgramUniform4i glad_glProgramUniform4i
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IEXTPROC glad_glProgramUniform4iEXT;
#define glProgramUniform4iEXT glad_glProgramUniform4iEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
#define glProgramUniform4iv glad_glProgramUniform4iv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4IVEXTPROC glad_glProgramUniform4ivEXT;
#define glProgramUniform4ivEXT glad_glProgramUniform4ivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
#define glProgramUniform4ui glad_glProgramUniform4ui
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIEXTPROC glad_glProgramUniform4uiEXT;
#define glProgramUniform4uiEXT glad_glProgramUniform4uiEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
#define glProgramUniform4uiv glad_glProgramUniform4uiv
GLAD_API_CALL PFNGLPROGRAMUNIFORM4UIVEXTPROC glad_glProgramUniform4uivEXT;
#define glProgramUniform4uivEXT glad_glProgramUniform4uivEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv glad_glProgramUniformMatrix2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glad_glProgramUniformMatrix2dvEXT;
#define glProgramUniformMatrix2dvEXT glad_glProgramUniformMatrix2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv glad_glProgramUniformMatrix2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glad_glProgramUniformMatrix2fvEXT;
#define glProgramUniformMatrix2fvEXT glad_glProgramUniformMatrix2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv glad_glProgramUniformMatrix2x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glad_glProgramUniformMatrix2x3dvEXT;
#define glProgramUniformMatrix2x3dvEXT glad_glProgramUniformMatrix2x3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv glad_glProgramUniformMatrix2x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glad_glProgramUniformMatrix2x3fvEXT;
#define glProgramUniformMatrix2x3fvEXT glad_glProgramUniformMatrix2x3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv glad_glProgramUniformMatrix2x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glad_glProgramUniformMatrix2x4dvEXT;
#define glProgramUniformMatrix2x4dvEXT glad_glProgramUniformMatrix2x4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv glad_glProgramUniformMatrix2x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glad_glProgramUniformMatrix2x4fvEXT;
#define glProgramUniformMatrix2x4fvEXT glad_glProgramUniformMatrix2x4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv glad_glProgramUniformMatrix3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glad_glProgramUniformMatrix3dvEXT;
#define glProgramUniformMatrix3dvEXT glad_glProgramUniformMatrix3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv glad_glProgramUniformMatrix3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glad_glProgramUniformMatrix3fvEXT;
#define glProgramUniformMatrix3fvEXT glad_glProgramUniformMatrix3fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv glad_glProgramUniformMatrix3x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glad_glProgramUniformMatrix3x2dvEXT;
#define glProgramUniformMatrix3x2dvEXT glad_glProgramUniformMatrix3x2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv glad_glProgramUniformMatrix3x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glad_glProgramUniformMatrix3x2fvEXT;
#define glProgramUniformMatrix3x2fvEXT glad_glProgramUniformMatrix3x2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv glad_glProgramUniformMatrix3x4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glad_glProgramUniformMatrix3x4dvEXT;
#define glProgramUniformMatrix3x4dvEXT glad_glProgramUniformMatrix3x4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv glad_glProgramUniformMatrix3x4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glad_glProgramUniformMatrix3x4fvEXT;
#define glProgramUniformMatrix3x4fvEXT glad_glProgramUniformMatrix3x4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv glad_glProgramUniformMatrix4dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glad_glProgramUniformMatrix4dvEXT;
#define glProgramUniformMatrix4dvEXT glad_glProgramUniformMatrix4dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv glad_glProgramUniformMatrix4fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glad_glProgramUniformMatrix4fvEXT;
#define glProgramUniformMatrix4fvEXT glad_glProgramUniformMatrix4fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv glad_glProgramUniformMatrix4x2dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glad_glProgramUniformMatrix4x2dvEXT;
#define glProgramUniformMatrix4x2dvEXT glad_glProgramUniformMatrix4x2dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv glad_glProgramUniformMatrix4x2fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glad_glProgramUniformMatrix4x2fvEXT;
#define glProgramUniformMatrix4x2fvEXT glad_glProgramUniformMatrix4x2fvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv glad_glProgramUniformMatrix4x3dv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glad_glProgramUniformMatrix4x3dvEXT;
#define glProgramUniformMatrix4x3dvEXT glad_glProgramUniformMatrix4x3dvEXT
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv glad_glProgramUniformMatrix4x3fv
GLAD_API_CALL PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glad_glProgramUniformMatrix4x3fvEXT;
#define glProgramUniformMatrix4x3fvEXT glad_glProgramUniformMatrix4x3fvEXT
GLAD_API_CALL PFNGLPROGRAMVERTEXLIMITNVPROC glad_glProgramVertexLimitNV;
#define glProgramVertexLimitNV glad_glProgramVertexLimitNV
GLAD_API_CALL PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
#define glProvokingVertex glad_glProvokingVertex
GLAD_API_CALL PFNGLPROVOKINGVERTEXEXTPROC glad_glProvokingVertexEXT;
#define glProvokingVertexEXT glad_glProvokingVertexEXT
GLAD_API_CALL PFNGLPUSHATTRIBPROC glad_glPushAttrib;
#define glPushAttrib glad_glPushAttrib
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
#define glPushClientAttrib glad_glPushClientAttrib
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glad_glPushClientAttribDefaultEXT;
#define glPushClientAttribDefaultEXT glad_glPushClientAttribDefaultEXT
GLAD_API_CALL PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup;
#define glPushDebugGroup glad_glPushDebugGroup
GLAD_API_CALL PFNGLPUSHMATRIXPROC glad_glPushMatrix;
#define glPushMatrix glad_glPushMatrix
GLAD_API_CALL PFNGLPUSHNAMEPROC glad_glPushName;
#define glPushName glad_glPushName
GLAD_API_CALL PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
#define glQueryCounter glad_glQueryCounter
GLAD_API_CALL PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
#define glRasterPos2d glad_glRasterPos2d
GLAD_API_CALL PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
#define glRasterPos2dv glad_glRasterPos2dv
GLAD_API_CALL PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
#define glRasterPos2f glad_glRasterPos2f
GLAD_API_CALL PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
#define glRasterPos2fv glad_glRasterPos2fv
GLAD_API_CALL PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
#define glRasterPos2i glad_glRasterPos2i
GLAD_API_CALL PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
#define glRasterPos2iv glad_glRasterPos2iv
GLAD_API_CALL PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
#define glRasterPos2s glad_glRasterPos2s
GLAD_API_CALL PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
#define glRasterPos2sv glad_glRasterPos2sv
GLAD_API_CALL PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
#define glRasterPos3d glad_glRasterPos3d
GLAD_API_CALL PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
#define glRasterPos3dv glad_glRasterPos3dv
GLAD_API_CALL PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
#define glRasterPos3f glad_glRasterPos3f
GLAD_API_CALL PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
#define glRasterPos3fv glad_glRasterPos3fv
GLAD_API_CALL PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
#define glRasterPos3i glad_glRasterPos3i
GLAD_API_CALL PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
#define glRasterPos3iv glad_glRasterPos3iv
GLAD_API_CALL PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
#define glRasterPos3s glad_glRasterPos3s
GLAD_API_CALL PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
#define glRasterPos3sv glad_glRasterPos3sv
GLAD_API_CALL PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
#define glRasterPos4d glad_glRasterPos4d
GLAD_API_CALL PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
#define glRasterPos4dv glad_glRasterPos4dv
GLAD_API_CALL PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
#define glRasterPos4f glad_glRasterPos4f
GLAD_API_CALL PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
#define glRasterPos4fv glad_glRasterPos4fv
GLAD_API_CALL PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
#define glRasterPos4i glad_glRasterPos4i
GLAD_API_CALL PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
#define glRasterPos4iv glad_glRasterPos4iv
GLAD_API_CALL PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
#define glRasterPos4s glad_glRasterPos4s
GLAD_API_CALL PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
#define glRasterPos4sv glad_glRasterPos4sv
GLAD_API_CALL PFNGLREADBUFFERPROC glad_glReadBuffer;
#define glReadBuffer glad_glReadBuffer
GLAD_API_CALL PFNGLREADPIXELSPROC glad_glReadPixels;
#define glReadPixels glad_glReadPixels
GLAD_API_CALL PFNGLREADNPIXELSPROC glad_glReadnPixels;
#define glReadnPixels glad_glReadnPixels
GLAD_API_CALL PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB;
#define glReadnPixelsARB glad_glReadnPixelsARB
GLAD_API_CALL PFNGLRECTDPROC glad_glRectd;
#define glRectd glad_glRectd
GLAD_API_CALL PFNGLRECTDVPROC glad_glRectdv;
#define glRectdv glad_glRectdv
GLAD_API_CALL PFNGLRECTFPROC glad_glRectf;
#define glRectf glad_glRectf
GLAD_API_CALL PFNGLRECTFVPROC glad_glRectfv;
#define glRectfv glad_glRectfv
GLAD_API_CALL PFNGLRECTIPROC glad_glRecti;
#define glRecti glad_glRecti
GLAD_API_CALL PFNGLRECTIVPROC glad_glRectiv;
#define glRectiv glad_glRectiv
GLAD_API_CALL PFNGLRECTSPROC glad_glRects;
#define glRects glad_glRects
GLAD_API_CALL PFNGLRECTSVPROC glad_glRectsv;
#define glRectsv glad_glRectsv
GLAD_API_CALL PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
#define glReleaseShaderCompiler glad_glReleaseShaderCompiler
GLAD_API_CALL PFNGLRENDERMODEPROC glad_glRenderMode;
#define glRenderMode glad_glRenderMode
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
#define glRenderbufferStorage glad_glRenderbufferStorage
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEEXTPROC glad_glRenderbufferStorageEXT;
#define glRenderbufferStorageEXT glad_glRenderbufferStorageEXT
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample glad_glRenderbufferStorageMultisample
GLAD_API_CALL PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glRenderbufferStorageMultisampleEXT;
#define glRenderbufferStorageMultisampleEXT glad_glRenderbufferStorageMultisampleEXT
GLAD_API_CALL PFNGLREQUESTRESIDENTPROGRAMSNVPROC glad_glRequestResidentProgramsNV;
#define glRequestResidentProgramsNV glad_glRequestResidentProgramsNV
GLAD_API_CALL PFNGLRESETHISTOGRAMPROC glad_glResetHistogram;
#define glResetHistogram glad_glResetHistogram
GLAD_API_CALL PFNGLRESETMINMAXPROC glad_glResetMinmax;
#define glResetMinmax glad_glResetMinmax
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
#define glResumeTransformFeedback glad_glResumeTransformFeedback
GLAD_API_CALL PFNGLRESUMETRANSFORMFEEDBACKNVPROC glad_glResumeTransformFeedbackNV;
#define glResumeTransformFeedbackNV glad_glResumeTransformFeedbackNV
GLAD_API_CALL PFNGLROTATEDPROC glad_glRotated;
#define glRotated glad_glRotated
GLAD_API_CALL PFNGLROTATEFPROC glad_glRotatef;
#define glRotatef glad_glRotatef
GLAD_API_CALL PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
#define glSampleCoverage glad_glSampleCoverage
GLAD_API_CALL PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB;
#define glSampleCoverageARB glad_glSampleCoverageARB
GLAD_API_CALL PFNGLSAMPLEMASKINDEXEDNVPROC glad_glSampleMaskIndexedNV;
#define glSampleMaskIndexedNV glad_glSampleMaskIndexedNV
GLAD_API_CALL PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
#define glSampleMaski glad_glSampleMaski
GLAD_API_CALL PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
#define glSamplerParameterIiv glad_glSamplerParameterIiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
#define glSamplerParameterIuiv glad_glSamplerParameterIuiv
GLAD_API_CALL PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
#define glSamplerParameterf glad_glSamplerParameterf
GLAD_API_CALL PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
#define glSamplerParameterfv glad_glSamplerParameterfv
GLAD_API_CALL PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
#define glSamplerParameteri glad_glSamplerParameteri
GLAD_API_CALL PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
#define glSamplerParameteriv glad_glSamplerParameteriv
GLAD_API_CALL PFNGLSCALEDPROC glad_glScaled;
#define glScaled glad_glScaled
GLAD_API_CALL PFNGLSCALEFPROC glad_glScalef;
#define glScalef glad_glScalef
GLAD_API_CALL PFNGLSCISSORPROC glad_glScissor;
#define glScissor glad_glScissor
GLAD_API_CALL PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
#define glScissorArrayv glad_glScissorArrayv
GLAD_API_CALL PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
#define glScissorIndexed glad_glScissorIndexed
GLAD_API_CALL PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
#define glScissorIndexedv glad_glScissorIndexedv
GLAD_API_CALL PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;
#define glSecondaryColor3b glad_glSecondaryColor3b
GLAD_API_CALL PFNGLSECONDARYCOLOR3BEXTPROC glad_glSecondaryColor3bEXT;
#define glSecondaryColor3bEXT glad_glSecondaryColor3bEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;
#define glSecondaryColor3bv glad_glSecondaryColor3bv
GLAD_API_CALL PFNGLSECONDARYCOLOR3BVEXTPROC glad_glSecondaryColor3bvEXT;
#define glSecondaryColor3bvEXT glad_glSecondaryColor3bvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;
#define glSecondaryColor3d glad_glSecondaryColor3d
GLAD_API_CALL PFNGLSECONDARYCOLOR3DEXTPROC glad_glSecondaryColor3dEXT;
#define glSecondaryColor3dEXT glad_glSecondaryColor3dEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;
#define glSecondaryColor3dv glad_glSecondaryColor3dv
GLAD_API_CALL PFNGLSECONDARYCOLOR3DVEXTPROC glad_glSecondaryColor3dvEXT;
#define glSecondaryColor3dvEXT glad_glSecondaryColor3dvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;
#define glSecondaryColor3f glad_glSecondaryColor3f
GLAD_API_CALL PFNGLSECONDARYCOLOR3FEXTPROC glad_glSecondaryColor3fEXT;
#define glSecondaryColor3fEXT glad_glSecondaryColor3fEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;
#define glSecondaryColor3fv glad_glSecondaryColor3fv
GLAD_API_CALL PFNGLSECONDARYCOLOR3FVEXTPROC glad_glSecondaryColor3fvEXT;
#define glSecondaryColor3fvEXT glad_glSecondaryColor3fvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;
#define glSecondaryColor3i glad_glSecondaryColor3i
GLAD_API_CALL PFNGLSECONDARYCOLOR3IEXTPROC glad_glSecondaryColor3iEXT;
#define glSecondaryColor3iEXT glad_glSecondaryColor3iEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;
#define glSecondaryColor3iv glad_glSecondaryColor3iv
GLAD_API_CALL PFNGLSECONDARYCOLOR3IVEXTPROC glad_glSecondaryColor3ivEXT;
#define glSecondaryColor3ivEXT glad_glSecondaryColor3ivEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;
#define glSecondaryColor3s glad_glSecondaryColor3s
GLAD_API_CALL PFNGLSECONDARYCOLOR3SEXTPROC glad_glSecondaryColor3sEXT;
#define glSecondaryColor3sEXT glad_glSecondaryColor3sEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;
#define glSecondaryColor3sv glad_glSecondaryColor3sv
GLAD_API_CALL PFNGLSECONDARYCOLOR3SVEXTPROC glad_glSecondaryColor3svEXT;
#define glSecondaryColor3svEXT glad_glSecondaryColor3svEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;
#define glSecondaryColor3ub glad_glSecondaryColor3ub
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBEXTPROC glad_glSecondaryColor3ubEXT;
#define glSecondaryColor3ubEXT glad_glSecondaryColor3ubEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;
#define glSecondaryColor3ubv glad_glSecondaryColor3ubv
GLAD_API_CALL PFNGLSECONDARYCOLOR3UBVEXTPROC glad_glSecondaryColor3ubvEXT;
#define glSecondaryColor3ubvEXT glad_glSecondaryColor3ubvEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;
#define glSecondaryColor3ui glad_glSecondaryColor3ui
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIEXTPROC glad_glSecondaryColor3uiEXT;
#define glSecondaryColor3uiEXT glad_glSecondaryColor3uiEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;
#define glSecondaryColor3uiv glad_glSecondaryColor3uiv
GLAD_API_CALL PFNGLSECONDARYCOLOR3UIVEXTPROC glad_glSecondaryColor3uivEXT;
#define glSecondaryColor3uivEXT glad_glSecondaryColor3uivEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;
#define glSecondaryColor3us glad_glSecondaryColor3us
GLAD_API_CALL PFNGLSECONDARYCOLOR3USEXTPROC glad_glSecondaryColor3usEXT;
#define glSecondaryColor3usEXT glad_glSecondaryColor3usEXT
GLAD_API_CALL PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;
#define glSecondaryColor3usv glad_glSecondaryColor3usv
GLAD_API_CALL PFNGLSECONDARYCOLOR3USVEXTPROC glad_glSecondaryColor3usvEXT;
#define glSecondaryColor3usvEXT glad_glSecondaryColor3usvEXT
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
#define glSecondaryColorP3ui glad_glSecondaryColorP3ui
GLAD_API_CALL PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv glad_glSecondaryColorP3uiv
GLAD_API_CALL PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;
#define glSecondaryColorPointer glad_glSecondaryColorPointer
GLAD_API_CALL PFNGLSECONDARYCOLORPOINTEREXTPROC glad_glSecondaryColorPointerEXT;
#define glSecondaryColorPointerEXT glad_glSecondaryColorPointerEXT
GLAD_API_CALL PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
#define glSelectBuffer glad_glSelectBuffer
GLAD_API_CALL PFNGLSEPARABLEFILTER2DPROC glad_glSeparableFilter2D;
#define glSeparableFilter2D glad_glSeparableFilter2D
GLAD_API_CALL PFNGLSHADEMODELPROC glad_glShadeModel;
#define glShadeModel glad_glShadeModel
GLAD_API_CALL PFNGLSHADERBINARYPROC glad_glShaderBinary;
#define glShaderBinary glad_glShaderBinary
GLAD_API_CALL PFNGLSHADERSOURCEPROC glad_glShaderSource;
#define glShaderSource glad_glShaderSource
GLAD_API_CALL PFNGLSHADERSOURCEARBPROC glad_glShaderSourceARB;
#define glShaderSourceARB glad_glShaderSourceARB
GLAD_API_CALL PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding;
#define glShaderStorageBlockBinding glad_glShaderStorageBlockBinding
GLAD_API_CALL PFNGLSPECIALIZESHADERPROC glad_glSpecializeShader;
#define glSpecializeShader glad_glSpecializeShader
GLAD_API_CALL PFNGLSPECIALIZESHADERARBPROC glad_glSpecializeShaderARB;
#define glSpecializeShaderARB glad_glSpecializeShaderARB
GLAD_API_CALL PFNGLSTENCILFUNCPROC glad_glStencilFunc;
#define glStencilFunc glad_glStencilFunc
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
#define glStencilFuncSeparate glad_glStencilFuncSeparate
GLAD_API_CALL PFNGLSTENCILFUNCSEPARATEATIPROC glad_glStencilFuncSeparateATI;
#define glStencilFuncSeparateATI glad_glStencilFuncSeparateATI
GLAD_API_CALL PFNGLSTENCILMASKPROC glad_glStencilMask;
#define glStencilMask glad_glStencilMask
GLAD_API_CALL PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
#define glStencilMaskSeparate glad_glStencilMaskSeparate
GLAD_API_CALL PFNGLSTENCILOPPROC glad_glStencilOp;
#define glStencilOp glad_glStencilOp
GLAD_API_CALL PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
#define glStencilOpSeparate glad_glStencilOpSeparate
GLAD_API_CALL PFNGLSTENCILOPSEPARATEATIPROC glad_glStencilOpSeparateATI;
#define glStencilOpSeparateATI glad_glStencilOpSeparateATI
GLAD_API_CALL PFNGLTEXBUFFERPROC glad_glTexBuffer;
#define glTexBuffer glad_glTexBuffer
GLAD_API_CALL PFNGLTEXBUFFERARBPROC glad_glTexBufferARB;
#define glTexBufferARB glad_glTexBufferARB
GLAD_API_CALL PFNGLTEXBUFFEREXTPROC glad_glTexBufferEXT;
#define glTexBufferEXT glad_glTexBufferEXT
GLAD_API_CALL PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange;
#define glTexBufferRange glad_glTexBufferRange
GLAD_API_CALL PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
#define glTexCoord1d glad_glTexCoord1d
GLAD_API_CALL PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
#define glTexCoord1dv glad_glTexCoord1dv
GLAD_API_CALL PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
#define glTexCoord1f glad_glTexCoord1f
GLAD_API_CALL PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
#define glTexCoord1fv glad_glTexCoord1fv
GLAD_API_CALL PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
#define glTexCoord1i glad_glTexCoord1i
GLAD_API_CALL PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
#define glTexCoord1iv glad_glTexCoord1iv
GLAD_API_CALL PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
#define glTexCoord1s glad_glTexCoord1s
GLAD_API_CALL PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
#define glTexCoord1sv glad_glTexCoord1sv
GLAD_API_CALL PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
#define glTexCoord2d glad_glTexCoord2d
GLAD_API_CALL PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
#define glTexCoord2dv glad_glTexCoord2dv
GLAD_API_CALL PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
#define glTexCoord2f glad_glTexCoord2f
GLAD_API_CALL PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
#define glTexCoord2fv glad_glTexCoord2fv
GLAD_API_CALL PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
#define glTexCoord2i glad_glTexCoord2i
GLAD_API_CALL PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
#define glTexCoord2iv glad_glTexCoord2iv
GLAD_API_CALL PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
#define glTexCoord2s glad_glTexCoord2s
GLAD_API_CALL PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
#define glTexCoord2sv glad_glTexCoord2sv
GLAD_API_CALL PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
#define glTexCoord3d glad_glTexCoord3d
GLAD_API_CALL PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
#define glTexCoord3dv glad_glTexCoord3dv
GLAD_API_CALL PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
#define glTexCoord3f glad_glTexCoord3f
GLAD_API_CALL PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
#define glTexCoord3fv glad_glTexCoord3fv
GLAD_API_CALL PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
#define glTexCoord3i glad_glTexCoord3i
GLAD_API_CALL PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
#define glTexCoord3iv glad_glTexCoord3iv
GLAD_API_CALL PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
#define glTexCoord3s glad_glTexCoord3s
GLAD_API_CALL PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
#define glTexCoord3sv glad_glTexCoord3sv
GLAD_API_CALL PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
#define glTexCoord4d glad_glTexCoord4d
GLAD_API_CALL PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
#define glTexCoord4dv glad_glTexCoord4dv
GLAD_API_CALL PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
#define glTexCoord4f glad_glTexCoord4f
GLAD_API_CALL PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
#define glTexCoord4fv glad_glTexCoord4fv
GLAD_API_CALL PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
#define glTexCoord4i glad_glTexCoord4i
GLAD_API_CALL PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
#define glTexCoord4iv glad_glTexCoord4iv
GLAD_API_CALL PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
#define glTexCoord4s glad_glTexCoord4s
GLAD_API_CALL PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
#define glTexCoord4sv glad_glTexCoord4sv
GLAD_API_CALL PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
#define glTexCoordP1ui glad_glTexCoordP1ui
GLAD_API_CALL PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
#define glTexCoordP1uiv glad_glTexCoordP1uiv
GLAD_API_CALL PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
#define glTexCoordP2ui glad_glTexCoordP2ui
GLAD_API_CALL PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
#define glTexCoordP2uiv glad_glTexCoordP2uiv
GLAD_API_CALL PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
#define glTexCoordP3ui glad_glTexCoordP3ui
GLAD_API_CALL PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
#define glTexCoordP3uiv glad_glTexCoordP3uiv
GLAD_API_CALL PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
#define glTexCoordP4ui glad_glTexCoordP4ui
GLAD_API_CALL PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
#define glTexCoordP4uiv glad_glTexCoordP4uiv
GLAD_API_CALL PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
#define glTexCoordPointer glad_glTexCoordPointer
GLAD_API_CALL PFNGLTEXCOORDPOINTEREXTPROC glad_glTexCoordPointerEXT;
#define glTexCoordPointerEXT glad_glTexCoordPointerEXT
GLAD_API_CALL PFNGLTEXENVFPROC glad_glTexEnvf;
#define glTexEnvf glad_glTexEnvf
GLAD_API_CALL PFNGLTEXENVFVPROC glad_glTexEnvfv;
#define glTexEnvfv glad_glTexEnvfv
GLAD_API_CALL PFNGLTEXENVIPROC glad_glTexEnvi;
#define glTexEnvi glad_glTexEnvi
GLAD_API_CALL PFNGLTEXENVIVPROC glad_glTexEnviv;
#define glTexEnviv glad_glTexEnviv
GLAD_API_CALL PFNGLTEXGENDPROC glad_glTexGend;
#define glTexGend glad_glTexGend
GLAD_API_CALL PFNGLTEXGENDVPROC glad_glTexGendv;
#define glTexGendv glad_glTexGendv
GLAD_API_CALL PFNGLTEXGENFPROC glad_glTexGenf;
#define glTexGenf glad_glTexGenf
GLAD_API_CALL PFNGLTEXGENFVPROC glad_glTexGenfv;
#define glTexGenfv glad_glTexGenfv
GLAD_API_CALL PFNGLTEXGENIPROC glad_glTexGeni;
#define glTexGeni glad_glTexGeni
GLAD_API_CALL PFNGLTEXGENIVPROC glad_glTexGeniv;
#define glTexGeniv glad_glTexGeniv
GLAD_API_CALL PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
#define glTexImage1D glad_glTexImage1D
GLAD_API_CALL PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
#define glTexImage2D glad_glTexImage2D
GLAD_API_CALL PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
#define glTexImage2DMultisample glad_glTexImage2DMultisample
GLAD_API_CALL PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
#define glTexImage3D glad_glTexImage3D
GLAD_API_CALL PFNGLTEXIMAGE3DEXTPROC glad_glTexImage3DEXT;
#define glTexImage3DEXT glad_glTexImage3DEXT
GLAD_API_CALL PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
#define glTexImage3DMultisample glad_glTexImage3DMultisample
GLAD_API_CALL PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
#define glTexParameterIiv glad_glTexParameterIiv
GLAD_API_CALL PFNGLTEXPARAMETERIIVEXTPROC glad_glTexParameterIivEXT;
#define glTexParameterIivEXT glad_glTexParameterIivEXT
GLAD_API_CALL PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
#define glTexParameterIuiv glad_glTexParameterIuiv
GLAD_API_CALL PFNGLTEXPARAMETERIUIVEXTPROC glad_glTexParameterIuivEXT;
#define glTexParameterIuivEXT glad_glTexParameterIuivEXT
GLAD_API_CALL PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
#define glTexParameterf glad_glTexParameterf
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
#define glTexParameterfv glad_glTexParameterfv
GLAD_API_CALL PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
#define glTexParameteri glad_glTexParameteri
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
#define glTexParameteriv glad_glTexParameteriv
GLAD_API_CALL PFNGLTEXRENDERBUFFERNVPROC glad_glTexRenderbufferNV;
#define glTexRenderbufferNV glad_glTexRenderbufferNV
GLAD_API_CALL PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D;
#define glTexStorage1D glad_glTexStorage1D
GLAD_API_CALL PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D;
#define glTexStorage2D glad_glTexStorage2D
GLAD_API_CALL PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample;
#define glTexStorage2DMultisample glad_glTexStorage2DMultisample
GLAD_API_CALL PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D;
#define glTexStorage3D glad_glTexStorage3D
GLAD_API_CALL PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample;
#define glTexStorage3DMultisample glad_glTexStorage3DMultisample
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
#define glTexSubImage1D glad_glTexSubImage1D
GLAD_API_CALL PFNGLTEXSUBIMAGE1DEXTPROC glad_glTexSubImage1DEXT;
#define glTexSubImage1DEXT glad_glTexSubImage1DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
#define glTexSubImage2D glad_glTexSubImage2D
GLAD_API_CALL PFNGLTEXSUBIMAGE2DEXTPROC glad_glTexSubImage2DEXT;
#define glTexSubImage2DEXT glad_glTexSubImage2DEXT
GLAD_API_CALL PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
#define glTexSubImage3D glad_glTexSubImage3D
GLAD_API_CALL PFNGLTEXSUBIMAGE3DEXTPROC glad_glTexSubImage3DEXT;
#define glTexSubImage3DEXT glad_glTexSubImage3DEXT
GLAD_API_CALL PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier;
#define glTextureBarrier glad_glTextureBarrier
GLAD_API_CALL PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer;
#define glTextureBuffer glad_glTextureBuffer
GLAD_API_CALL PFNGLTEXTUREBUFFEREXTPROC glad_glTextureBufferEXT;
#define glTextureBufferEXT glad_glTextureBufferEXT
GLAD_API_CALL PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange;
#define glTextureBufferRange glad_glTextureBufferRange
GLAD_API_CALL PFNGLTEXTUREBUFFERRANGEEXTPROC glad_glTextureBufferRangeEXT;
#define glTextureBufferRangeEXT glad_glTextureBufferRangeEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE1DEXTPROC glad_glTextureImage1DEXT;
#define glTextureImage1DEXT glad_glTextureImage1DEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE2DEXTPROC glad_glTextureImage2DEXT;
#define glTextureImage2DEXT glad_glTextureImage2DEXT
GLAD_API_CALL PFNGLTEXTUREIMAGE3DEXTPROC glad_glTextureImage3DEXT;
#define glTextureImage3DEXT glad_glTextureImage3DEXT
GLAD_API_CALL PFNGLTEXTUREPAGECOMMITMENTEXTPROC glad_glTexturePageCommitmentEXT;
#define glTexturePageCommitmentEXT glad_glTexturePageCommitmentEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv;
#define glTextureParameterIiv glad_glTextureParameterIiv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIIVEXTPROC glad_glTextureParameterIivEXT;
#define glTextureParameterIivEXT glad_glTextureParameterIivEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv;
#define glTextureParameterIuiv glad_glTextureParameterIuiv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIUIVEXTPROC glad_glTextureParameterIuivEXT;
#define glTextureParameterIuivEXT glad_glTextureParameterIuivEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf;
#define glTextureParameterf glad_glTextureParameterf
GLAD_API_CALL PFNGLTEXTUREPARAMETERFEXTPROC glad_glTextureParameterfEXT;
#define glTextureParameterfEXT glad_glTextureParameterfEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv;
#define glTextureParameterfv glad_glTextureParameterfv
GLAD_API_CALL PFNGLTEXTUREPARAMETERFVEXTPROC glad_glTextureParameterfvEXT;
#define glTextureParameterfvEXT glad_glTextureParameterfvEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri;
#define glTextureParameteri glad_glTextureParameteri
GLAD_API_CALL PFNGLTEXTUREPARAMETERIEXTPROC glad_glTextureParameteriEXT;
#define glTextureParameteriEXT glad_glTextureParameteriEXT
GLAD_API_CALL PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv;
#define glTextureParameteriv glad_glTextureParameteriv
GLAD_API_CALL PFNGLTEXTUREPARAMETERIVEXTPROC glad_glTextureParameterivEXT;
#define glTextureParameterivEXT glad_glTextureParameterivEXT
GLAD_API_CALL PFNGLTEXTURERENDERBUFFEREXTPROC glad_glTextureRenderbufferEXT;
#define glTextureRenderbufferEXT glad_glTextureRenderbufferEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D;
#define glTextureStorage1D glad_glTextureStorage1D
GLAD_API_CALL PFNGLTEXTURESTORAGE1DEXTPROC glad_glTextureStorage1DEXT;
#define glTextureStorage1DEXT glad_glTextureStorage1DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D;
#define glTextureStorage2D glad_glTextureStorage2D
GLAD_API_CALL PFNGLTEXTURESTORAGE2DEXTPROC glad_glTextureStorage2DEXT;
#define glTextureStorage2DEXT glad_glTextureStorage2DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample;
#define glTextureStorage2DMultisample glad_glTextureStorage2DMultisample
GLAD_API_CALL PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glad_glTextureStorage2DMultisampleEXT;
#define glTextureStorage2DMultisampleEXT glad_glTextureStorage2DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D;
#define glTextureStorage3D glad_glTextureStorage3D
GLAD_API_CALL PFNGLTEXTURESTORAGE3DEXTPROC glad_glTextureStorage3DEXT;
#define glTextureStorage3DEXT glad_glTextureStorage3DEXT
GLAD_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample;
#define glTextureStorage3DMultisample glad_glTextureStorage3DMultisample
GLAD_API_CALL PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glad_glTextureStorage3DMultisampleEXT;
#define glTextureStorage3DMultisampleEXT glad_glTextureStorage3DMultisampleEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D;
#define glTextureSubImage1D glad_glTextureSubImage1D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE1DEXTPROC glad_glTextureSubImage1DEXT;
#define glTextureSubImage1DEXT glad_glTextureSubImage1DEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D;
#define glTextureSubImage2D glad_glTextureSubImage2D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE2DEXTPROC glad_glTextureSubImage2DEXT;
#define glTextureSubImage2DEXT glad_glTextureSubImage2DEXT
GLAD_API_CALL PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D;
#define glTextureSubImage3D glad_glTextureSubImage3D
GLAD_API_CALL PFNGLTEXTURESUBIMAGE3DEXTPROC glad_glTextureSubImage3DEXT;
#define glTextureSubImage3DEXT glad_glTextureSubImage3DEXT
GLAD_API_CALL PFNGLTEXTUREVIEWPROC glad_glTextureView;
#define glTextureView glad_glTextureView
GLAD_API_CALL PFNGLTRACKMATRIXNVPROC glad_glTrackMatrixNV;
#define glTrackMatrixNV glad_glTrackMatrixNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glad_glTransformFeedbackAttribsNV;
#define glTransformFeedbackAttribsNV glad_glTransformFeedbackAttribsNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase;
#define glTransformFeedbackBufferBase glad_glTransformFeedbackBufferBase
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange;
#define glTransformFeedbackBufferRange glad_glTransformFeedbackBufferRange
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glad_glTransformFeedbackStreamAttribsNV;
#define glTransformFeedbackStreamAttribsNV glad_glTransformFeedbackStreamAttribsNV
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings glad_glTransformFeedbackVaryings
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glad_glTransformFeedbackVaryingsEXT;
#define glTransformFeedbackVaryingsEXT glad_glTransformFeedbackVaryingsEXT
GLAD_API_CALL PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glad_glTransformFeedbackVaryingsNV;
#define glTransformFeedbackVaryingsNV glad_glTransformFeedbackVaryingsNV
GLAD_API_CALL PFNGLTRANSLATEDPROC glad_glTranslated;
#define glTranslated glad_glTranslated
GLAD_API_CALL PFNGLTRANSLATEFPROC glad_glTranslatef;
#define glTranslatef glad_glTranslatef
GLAD_API_CALL PFNGLUNIFORM1DPROC glad_glUniform1d;
#define glUniform1d glad_glUniform1d
GLAD_API_CALL PFNGLUNIFORM1DVPROC glad_glUniform1dv;
#define glUniform1dv glad_glUniform1dv
GLAD_API_CALL PFNGLUNIFORM1FPROC glad_glUniform1f;
#define glUniform1f glad_glUniform1f
GLAD_API_CALL PFNGLUNIFORM1FARBPROC glad_glUniform1fARB;
#define glUniform1fARB glad_glUniform1fARB
GLAD_API_CALL PFNGLUNIFORM1FVPROC glad_glUniform1fv;
#define glUniform1fv glad_glUniform1fv
GLAD_API_CALL PFNGLUNIFORM1FVARBPROC glad_glUniform1fvARB;
#define glUniform1fvARB glad_glUniform1fvARB
GLAD_API_CALL PFNGLUNIFORM1IPROC glad_glUniform1i;
#define glUniform1i glad_glUniform1i
GLAD_API_CALL PFNGLUNIFORM1IARBPROC glad_glUniform1iARB;
#define glUniform1iARB glad_glUniform1iARB
GLAD_API_CALL PFNGLUNIFORM1IVPROC glad_glUniform1iv;
#define glUniform1iv glad_glUniform1iv
GLAD_API_CALL PFNGLUNIFORM1IVARBPROC glad_glUniform1ivARB;
#define glUniform1ivARB glad_glUniform1ivARB
GLAD_API_CALL PFNGLUNIFORM1UIPROC glad_glUniform1ui;
#define glUniform1ui glad_glUniform1ui
GLAD_API_CALL PFNGLUNIFORM1UIEXTPROC glad_glUniform1uiEXT;
#define glUniform1uiEXT glad_glUniform1uiEXT
GLAD_API_CALL PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
#define glUniform1uiv glad_glUniform1uiv
GLAD_API_CALL PFNGLUNIFORM1UIVEXTPROC glad_glUniform1uivEXT;
#define glUniform1uivEXT glad_glUniform1uivEXT
GLAD_API_CALL PFNGLUNIFORM2DPROC glad_glUniform2d;
#define glUniform2d glad_glUniform2d
GLAD_API_CALL PFNGLUNIFORM2DVPROC glad_glUniform2dv;
#define glUniform2dv glad_glUniform2dv
GLAD_API_CALL PFNGLUNIFORM2FPROC glad_glUniform2f;
#define glUniform2f glad_glUniform2f
GLAD_API_CALL PFNGLUNIFORM2FARBPROC glad_glUniform2fARB;
#define glUniform2fARB glad_glUniform2fARB
GLAD_API_CALL PFNGLUNIFORM2FVPROC glad_glUniform2fv;
#define glUniform2fv glad_glUniform2fv
GLAD_API_CALL PFNGLUNIFORM2FVARBPROC glad_glUniform2fvARB;
#define glUniform2fvARB glad_glUniform2fvARB
GLAD_API_CALL PFNGLUNIFORM2IPROC glad_glUniform2i;
#define glUniform2i glad_glUniform2i
GLAD_API_CALL PFNGLUNIFORM2IARBPROC glad_glUniform2iARB;
#define glUniform2iARB glad_glUniform2iARB
GLAD_API_CALL PFNGLUNIFORM2IVPROC glad_glUniform2iv;
#define glUniform2iv glad_glUniform2iv
GLAD_API_CALL PFNGLUNIFORM2IVARBPROC glad_glUniform2ivARB;
#define glUniform2ivARB glad_glUniform2ivARB
GLAD_API_CALL PFNGLUNIFORM2UIPROC glad_glUniform2ui;
#define glUniform2ui glad_glUniform2ui
GLAD_API_CALL PFNGLUNIFORM2UIEXTPROC glad_glUniform2uiEXT;
#define glUniform2uiEXT glad_glUniform2uiEXT
GLAD_API_CALL PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
#define glUniform2uiv glad_glUniform2uiv
GLAD_API_CALL PFNGLUNIFORM2UIVEXTPROC glad_glUniform2uivEXT;
#define glUniform2uivEXT glad_glUniform2uivEXT
GLAD_API_CALL PFNGLUNIFORM3DPROC glad_glUniform3d;
#define glUniform3d glad_glUniform3d
GLAD_API_CALL PFNGLUNIFORM3DVPROC glad_glUniform3dv;
#define glUniform3dv glad_glUniform3dv
GLAD_API_CALL PFNGLUNIFORM3FPROC glad_glUniform3f;
#define glUniform3f glad_glUniform3f
GLAD_API_CALL PFNGLUNIFORM3FARBPROC glad_glUniform3fARB;
#define glUniform3fARB glad_glUniform3fARB
GLAD_API_CALL PFNGLUNIFORM3FVPROC glad_glUniform3fv;
#define glUniform3fv glad_glUniform3fv
GLAD_API_CALL PFNGLUNIFORM3FVARBPROC glad_glUniform3fvARB;
#define glUniform3fvARB glad_glUniform3fvARB
GLAD_API_CALL PFNGLUNIFORM3IPROC glad_glUniform3i;
#define glUniform3i glad_glUniform3i
GLAD_API_CALL PFNGLUNIFORM3IARBPROC glad_glUniform3iARB;
#define glUniform3iARB glad_glUniform3iARB
GLAD_API_CALL PFNGLUNIFORM3IVPROC glad_glUniform3iv;
#define glUniform3iv glad_glUniform3iv
GLAD_API_CALL PFNGLUNIFORM3IVARBPROC glad_glUniform3ivARB;
#define glUniform3ivARB glad_glUniform3ivARB
GLAD_API_CALL PFNGLUNIFORM3UIPROC glad_glUniform3ui;
#define glUniform3ui glad_glUniform3ui
GLAD_API_CALL PFNGLUNIFORM3UIEXTPROC glad_glUniform3uiEXT;
#define glUniform3uiEXT glad_glUniform3uiEXT
GLAD_API_CALL PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
#define glUniform3uiv glad_glUniform3uiv
GLAD_API_CALL PFNGLUNIFORM3UIVEXTPROC glad_glUniform3uivEXT;
#define glUniform3uivEXT glad_glUniform3uivEXT
GLAD_API_CALL PFNGLUNIFORM4DPROC glad_glUniform4d;
#define glUniform4d glad_glUniform4d
GLAD_API_CALL PFNGLUNIFORM4DVPROC glad_glUniform4dv;
#define glUniform4dv glad_glUniform4dv
GLAD_API_CALL PFNGLUNIFORM4FPROC glad_glUniform4f;
#define glUniform4f glad_glUniform4f
GLAD_API_CALL PFNGLUNIFORM4FARBPROC glad_glUniform4fARB;
#define glUniform4fARB glad_glUniform4fARB
GLAD_API_CALL PFNGLUNIFORM4FVPROC glad_glUniform4fv;
#define glUniform4fv glad_glUniform4fv
GLAD_API_CALL PFNGLUNIFORM4FVARBPROC glad_glUniform4fvARB;
#define glUniform4fvARB glad_glUniform4fvARB
GLAD_API_CALL PFNGLUNIFORM4IPROC glad_glUniform4i;
#define glUniform4i glad_glUniform4i
GLAD_API_CALL PFNGLUNIFORM4IARBPROC glad_glUniform4iARB;
#define glUniform4iARB glad_glUniform4iARB
GLAD_API_CALL PFNGLUNIFORM4IVPROC glad_glUniform4iv;
#define glUniform4iv glad_glUniform4iv
GLAD_API_CALL PFNGLUNIFORM4IVARBPROC glad_glUniform4ivARB;
#define glUniform4ivARB glad_glUniform4ivARB
GLAD_API_CALL PFNGLUNIFORM4UIPROC glad_glUniform4ui;
#define glUniform4ui glad_glUniform4ui
GLAD_API_CALL PFNGLUNIFORM4UIEXTPROC glad_glUniform4uiEXT;
#define glUniform4uiEXT glad_glUniform4uiEXT
GLAD_API_CALL PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
#define glUniform4uiv glad_glUniform4uiv
GLAD_API_CALL PFNGLUNIFORM4UIVEXTPROC glad_glUniform4uivEXT;
#define glUniform4uivEXT glad_glUniform4uivEXT
GLAD_API_CALL PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
#define glUniformBlockBinding glad_glUniformBlockBinding
GLAD_API_CALL PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
#define glUniformMatrix2dv glad_glUniformMatrix2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
#define glUniformMatrix2fv glad_glUniformMatrix2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2FVARBPROC glad_glUniformMatrix2fvARB;
#define glUniformMatrix2fvARB glad_glUniformMatrix2fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv glad_glUniformMatrix2x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv glad_glUniformMatrix2x3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv glad_glUniformMatrix2x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv glad_glUniformMatrix2x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
#define glUniformMatrix3dv glad_glUniformMatrix3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
#define glUniformMatrix3fv glad_glUniformMatrix3fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3FVARBPROC glad_glUniformMatrix3fvARB;
#define glUniformMatrix3fvARB glad_glUniformMatrix3fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv glad_glUniformMatrix3x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv glad_glUniformMatrix3x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv glad_glUniformMatrix3x4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv glad_glUniformMatrix3x4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
#define glUniformMatrix4dv glad_glUniformMatrix4dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
#define glUniformMatrix4fv glad_glUniformMatrix4fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4FVARBPROC glad_glUniformMatrix4fvARB;
#define glUniformMatrix4fvARB glad_glUniformMatrix4fvARB
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv glad_glUniformMatrix4x2dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv glad_glUniformMatrix4x2fv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv glad_glUniformMatrix4x3dv
GLAD_API_CALL PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv glad_glUniformMatrix4x3fv
GLAD_API_CALL PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv glad_glUniformSubroutinesuiv
GLAD_API_CALL PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
#define glUnmapBuffer glad_glUnmapBuffer
GLAD_API_CALL PFNGLUNMAPBUFFERARBPROC glad_glUnmapBufferARB;
#define glUnmapBufferARB glad_glUnmapBufferARB
GLAD_API_CALL PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer;
#define glUnmapNamedBuffer glad_glUnmapNamedBuffer
GLAD_API_CALL PFNGLUNMAPNAMEDBUFFEREXTPROC glad_glUnmapNamedBufferEXT;
#define glUnmapNamedBufferEXT glad_glUnmapNamedBufferEXT
GLAD_API_CALL PFNGLUSEPROGRAMPROC glad_glUseProgram;
#define glUseProgram glad_glUseProgram
GLAD_API_CALL PFNGLUSEPROGRAMOBJECTARBPROC glad_glUseProgramObjectARB;
#define glUseProgramObjectARB glad_glUseProgramObjectARB
GLAD_API_CALL PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
#define glUseProgramStages glad_glUseProgramStages
GLAD_API_CALL PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
#define glValidateProgram glad_glValidateProgram
GLAD_API_CALL PFNGLVALIDATEPROGRAMARBPROC glad_glValidateProgramARB;
#define glValidateProgramARB glad_glValidateProgramARB
GLAD_API_CALL PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
#define glValidateProgramPipeline glad_glValidateProgramPipeline
GLAD_API_CALL PFNGLVERTEX2DPROC glad_glVertex2d;
#define glVertex2d glad_glVertex2d
GLAD_API_CALL PFNGLVERTEX2DVPROC glad_glVertex2dv;
#define glVertex2dv glad_glVertex2dv
GLAD_API_CALL PFNGLVERTEX2FPROC glad_glVertex2f;
#define glVertex2f glad_glVertex2f
GLAD_API_CALL PFNGLVERTEX2FVPROC glad_glVertex2fv;
#define glVertex2fv glad_glVertex2fv
GLAD_API_CALL PFNGLVERTEX2IPROC glad_glVertex2i;
#define glVertex2i glad_glVertex2i
GLAD_API_CALL PFNGLVERTEX2IVPROC glad_glVertex2iv;
#define glVertex2iv glad_glVertex2iv
GLAD_API_CALL PFNGLVERTEX2SPROC glad_glVertex2s;
#define glVertex2s glad_glVertex2s
GLAD_API_CALL PFNGLVERTEX2SVPROC glad_glVertex2sv;
#define glVertex2sv glad_glVertex2sv
GLAD_API_CALL PFNGLVERTEX3DPROC glad_glVertex3d;
#define glVertex3d glad_glVertex3d
GLAD_API_CALL PFNGLVERTEX3DVPROC glad_glVertex3dv;
#define glVertex3dv glad_glVertex3dv
GLAD_API_CALL PFNGLVERTEX3FPROC glad_glVertex3f;
#define glVertex3f glad_glVertex3f
GLAD_API_CALL PFNGLVERTEX3FVPROC glad_glVertex3fv;
#define glVertex3fv glad_glVertex3fv
GLAD_API_CALL PFNGLVERTEX3IPROC glad_glVertex3i;
#define glVertex3i glad_glVertex3i
GLAD_API_CALL PFNGLVERTEX3IVPROC glad_glVertex3iv;
#define glVertex3iv glad_glVertex3iv
GLAD_API_CALL PFNGLVERTEX3SPROC glad_glVertex3s;
#define glVertex3s glad_glVertex3s
GLAD_API_CALL PFNGLVERTEX3SVPROC glad_glVertex3sv;
#define glVertex3sv glad_glVertex3sv
GLAD_API_CALL PFNGLVERTEX4DPROC glad_glVertex4d;
#define glVertex4d glad_glVertex4d
GLAD_API_CALL PFNGLVERTEX4DVPROC glad_glVertex4dv;
#define glVertex4dv glad_glVertex4dv
GLAD_API_CALL PFNGLVERTEX4FPROC glad_glVertex4f;
#define glVertex4f glad_glVertex4f
GLAD_API_CALL PFNGLVERTEX4FVPROC glad_glVertex4fv;
#define glVertex4fv glad_glVertex4fv
GLAD_API_CALL PFNGLVERTEX4IPROC glad_glVertex4i;
#define glVertex4i glad_glVertex4i
GLAD_API_CALL PFNGLVERTEX4IVPROC glad_glVertex4iv;
#define glVertex4iv glad_glVertex4iv
GLAD_API_CALL PFNGLVERTEX4SPROC glad_glVertex4s;
#define glVertex4s glad_glVertex4s
GLAD_API_CALL PFNGLVERTEX4SVPROC glad_glVertex4sv;
#define glVertex4sv glad_glVertex4sv
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding;
#define glVertexArrayAttribBinding glad_glVertexArrayAttribBinding
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat;
#define glVertexArrayAttribFormat glad_glVertexArrayAttribFormat
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat;
#define glVertexArrayAttribIFormat glad_glVertexArrayAttribIFormat
GLAD_API_CALL PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat;
#define glVertexArrayAttribLFormat glad_glVertexArrayAttribLFormat
GLAD_API_CALL PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glad_glVertexArrayBindVertexBufferEXT;
#define glVertexArrayBindVertexBufferEXT glad_glVertexArrayBindVertexBufferEXT
GLAD_API_CALL PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor;
#define glVertexArrayBindingDivisor glad_glVertexArrayBindingDivisor
GLAD_API_CALL PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glad_glVertexArrayColorOffsetEXT;
#define glVertexArrayColorOffsetEXT glad_glVertexArrayColorOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glad_glVertexArrayEdgeFlagOffsetEXT;
#define glVertexArrayEdgeFlagOffsetEXT glad_glVertexArrayEdgeFlagOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer;
#define glVertexArrayElementBuffer glad_glVertexArrayElementBuffer
GLAD_API_CALL PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glad_glVertexArrayFogCoordOffsetEXT;
#define glVertexArrayFogCoordOffsetEXT glad_glVertexArrayFogCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glad_glVertexArrayIndexOffsetEXT;
#define glVertexArrayIndexOffsetEXT glad_glVertexArrayIndexOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glad_glVertexArrayMultiTexCoordOffsetEXT;
#define glVertexArrayMultiTexCoordOffsetEXT glad_glVertexArrayMultiTexCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glad_glVertexArrayNormalOffsetEXT;
#define glVertexArrayNormalOffsetEXT glad_glVertexArrayNormalOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glad_glVertexArraySecondaryColorOffsetEXT;
#define glVertexArraySecondaryColorOffsetEXT glad_glVertexArraySecondaryColorOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glad_glVertexArrayTexCoordOffsetEXT;
#define glVertexArrayTexCoordOffsetEXT glad_glVertexArrayTexCoordOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glad_glVertexArrayVertexAttribBindingEXT;
#define glVertexArrayVertexAttribBindingEXT glad_glVertexArrayVertexAttribBindingEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glad_glVertexArrayVertexAttribDivisorEXT;
#define glVertexArrayVertexAttribDivisorEXT glad_glVertexArrayVertexAttribDivisorEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glad_glVertexArrayVertexAttribFormatEXT;
#define glVertexArrayVertexAttribFormatEXT glad_glVertexArrayVertexAttribFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glad_glVertexArrayVertexAttribIFormatEXT;
#define glVertexArrayVertexAttribIFormatEXT glad_glVertexArrayVertexAttribIFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glad_glVertexArrayVertexAttribIOffsetEXT;
#define glVertexArrayVertexAttribIOffsetEXT glad_glVertexArrayVertexAttribIOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glad_glVertexArrayVertexAttribLFormatEXT;
#define glVertexArrayVertexAttribLFormatEXT glad_glVertexArrayVertexAttribLFormatEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glad_glVertexArrayVertexAttribLOffsetEXT;
#define glVertexArrayVertexAttribLOffsetEXT glad_glVertexArrayVertexAttribLOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glad_glVertexArrayVertexAttribOffsetEXT;
#define glVertexArrayVertexAttribOffsetEXT glad_glVertexArrayVertexAttribOffsetEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glad_glVertexArrayVertexBindingDivisorEXT;
#define glVertexArrayVertexBindingDivisorEXT glad_glVertexArrayVertexBindingDivisorEXT
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer;
#define glVertexArrayVertexBuffer glad_glVertexArrayVertexBuffer
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers;
#define glVertexArrayVertexBuffers glad_glVertexArrayVertexBuffers
GLAD_API_CALL PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glad_glVertexArrayVertexOffsetEXT;
#define glVertexArrayVertexOffsetEXT glad_glVertexArrayVertexOffsetEXT
GLAD_API_CALL PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
#define glVertexAttrib1d glad_glVertexAttrib1d
GLAD_API_CALL PFNGLVERTEXATTRIB1DARBPROC glad_glVertexAttrib1dARB;
#define glVertexAttrib1dARB glad_glVertexAttrib1dARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DNVPROC glad_glVertexAttrib1dNV;
#define glVertexAttrib1dNV glad_glVertexAttrib1dNV
GLAD_API_CALL PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
#define glVertexAttrib1dv glad_glVertexAttrib1dv
GLAD_API_CALL PFNGLVERTEXATTRIB1DVARBPROC glad_glVertexAttrib1dvARB;
#define glVertexAttrib1dvARB glad_glVertexAttrib1dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1DVNVPROC glad_glVertexAttrib1dvNV;
#define glVertexAttrib1dvNV glad_glVertexAttrib1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
#define glVertexAttrib1f glad_glVertexAttrib1f
GLAD_API_CALL PFNGLVERTEXATTRIB1FARBPROC glad_glVertexAttrib1fARB;
#define glVertexAttrib1fARB glad_glVertexAttrib1fARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FNVPROC glad_glVertexAttrib1fNV;
#define glVertexAttrib1fNV glad_glVertexAttrib1fNV
GLAD_API_CALL PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
#define glVertexAttrib1fv glad_glVertexAttrib1fv
GLAD_API_CALL PFNGLVERTEXATTRIB1FVARBPROC glad_glVertexAttrib1fvARB;
#define glVertexAttrib1fvARB glad_glVertexAttrib1fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB1FVNVPROC glad_glVertexAttrib1fvNV;
#define glVertexAttrib1fvNV glad_glVertexAttrib1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
#define glVertexAttrib1s glad_glVertexAttrib1s
GLAD_API_CALL PFNGLVERTEXATTRIB1SARBPROC glad_glVertexAttrib1sARB;
#define glVertexAttrib1sARB glad_glVertexAttrib1sARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SNVPROC glad_glVertexAttrib1sNV;
#define glVertexAttrib1sNV glad_glVertexAttrib1sNV
GLAD_API_CALL PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
#define glVertexAttrib1sv glad_glVertexAttrib1sv
GLAD_API_CALL PFNGLVERTEXATTRIB1SVARBPROC glad_glVertexAttrib1svARB;
#define glVertexAttrib1svARB glad_glVertexAttrib1svARB
GLAD_API_CALL PFNGLVERTEXATTRIB1SVNVPROC glad_glVertexAttrib1svNV;
#define glVertexAttrib1svNV glad_glVertexAttrib1svNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
#define glVertexAttrib2d glad_glVertexAttrib2d
GLAD_API_CALL PFNGLVERTEXATTRIB2DARBPROC glad_glVertexAttrib2dARB;
#define glVertexAttrib2dARB glad_glVertexAttrib2dARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DNVPROC glad_glVertexAttrib2dNV;
#define glVertexAttrib2dNV glad_glVertexAttrib2dNV
GLAD_API_CALL PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
#define glVertexAttrib2dv glad_glVertexAttrib2dv
GLAD_API_CALL PFNGLVERTEXATTRIB2DVARBPROC glad_glVertexAttrib2dvARB;
#define glVertexAttrib2dvARB glad_glVertexAttrib2dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2DVNVPROC glad_glVertexAttrib2dvNV;
#define glVertexAttrib2dvNV glad_glVertexAttrib2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
#define glVertexAttrib2f glad_glVertexAttrib2f
GLAD_API_CALL PFNGLVERTEXATTRIB2FARBPROC glad_glVertexAttrib2fARB;
#define glVertexAttrib2fARB glad_glVertexAttrib2fARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FNVPROC glad_glVertexAttrib2fNV;
#define glVertexAttrib2fNV glad_glVertexAttrib2fNV
GLAD_API_CALL PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
#define glVertexAttrib2fv glad_glVertexAttrib2fv
GLAD_API_CALL PFNGLVERTEXATTRIB2FVARBPROC glad_glVertexAttrib2fvARB;
#define glVertexAttrib2fvARB glad_glVertexAttrib2fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB2FVNVPROC glad_glVertexAttrib2fvNV;
#define glVertexAttrib2fvNV glad_glVertexAttrib2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
#define glVertexAttrib2s glad_glVertexAttrib2s
GLAD_API_CALL PFNGLVERTEXATTRIB2SARBPROC glad_glVertexAttrib2sARB;
#define glVertexAttrib2sARB glad_glVertexAttrib2sARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SNVPROC glad_glVertexAttrib2sNV;
#define glVertexAttrib2sNV glad_glVertexAttrib2sNV
GLAD_API_CALL PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
#define glVertexAttrib2sv glad_glVertexAttrib2sv
GLAD_API_CALL PFNGLVERTEXATTRIB2SVARBPROC glad_glVertexAttrib2svARB;
#define glVertexAttrib2svARB glad_glVertexAttrib2svARB
GLAD_API_CALL PFNGLVERTEXATTRIB2SVNVPROC glad_glVertexAttrib2svNV;
#define glVertexAttrib2svNV glad_glVertexAttrib2svNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
#define glVertexAttrib3d glad_glVertexAttrib3d
GLAD_API_CALL PFNGLVERTEXATTRIB3DARBPROC glad_glVertexAttrib3dARB;
#define glVertexAttrib3dARB glad_glVertexAttrib3dARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DNVPROC glad_glVertexAttrib3dNV;
#define glVertexAttrib3dNV glad_glVertexAttrib3dNV
GLAD_API_CALL PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
#define glVertexAttrib3dv glad_glVertexAttrib3dv
GLAD_API_CALL PFNGLVERTEXATTRIB3DVARBPROC glad_glVertexAttrib3dvARB;
#define glVertexAttrib3dvARB glad_glVertexAttrib3dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3DVNVPROC glad_glVertexAttrib3dvNV;
#define glVertexAttrib3dvNV glad_glVertexAttrib3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
#define glVertexAttrib3f glad_glVertexAttrib3f
GLAD_API_CALL PFNGLVERTEXATTRIB3FARBPROC glad_glVertexAttrib3fARB;
#define glVertexAttrib3fARB glad_glVertexAttrib3fARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FNVPROC glad_glVertexAttrib3fNV;
#define glVertexAttrib3fNV glad_glVertexAttrib3fNV
GLAD_API_CALL PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
#define glVertexAttrib3fv glad_glVertexAttrib3fv
GLAD_API_CALL PFNGLVERTEXATTRIB3FVARBPROC glad_glVertexAttrib3fvARB;
#define glVertexAttrib3fvARB glad_glVertexAttrib3fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB3FVNVPROC glad_glVertexAttrib3fvNV;
#define glVertexAttrib3fvNV glad_glVertexAttrib3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
#define glVertexAttrib3s glad_glVertexAttrib3s
GLAD_API_CALL PFNGLVERTEXATTRIB3SARBPROC glad_glVertexAttrib3sARB;
#define glVertexAttrib3sARB glad_glVertexAttrib3sARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SNVPROC glad_glVertexAttrib3sNV;
#define glVertexAttrib3sNV glad_glVertexAttrib3sNV
GLAD_API_CALL PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
#define glVertexAttrib3sv glad_glVertexAttrib3sv
GLAD_API_CALL PFNGLVERTEXATTRIB3SVARBPROC glad_glVertexAttrib3svARB;
#define glVertexAttrib3svARB glad_glVertexAttrib3svARB
GLAD_API_CALL PFNGLVERTEXATTRIB3SVNVPROC glad_glVertexAttrib3svNV;
#define glVertexAttrib3svNV glad_glVertexAttrib3svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv glad_glVertexAttrib4Nbv
GLAD_API_CALL PFNGLVERTEXATTRIB4NBVARBPROC glad_glVertexAttrib4NbvARB;
#define glVertexAttrib4NbvARB glad_glVertexAttrib4NbvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
#define glVertexAttrib4Niv glad_glVertexAttrib4Niv
GLAD_API_CALL PFNGLVERTEXATTRIB4NIVARBPROC glad_glVertexAttrib4NivARB;
#define glVertexAttrib4NivARB glad_glVertexAttrib4NivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv glad_glVertexAttrib4Nsv
GLAD_API_CALL PFNGLVERTEXATTRIB4NSVARBPROC glad_glVertexAttrib4NsvARB;
#define glVertexAttrib4NsvARB glad_glVertexAttrib4NsvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
#define glVertexAttrib4Nub glad_glVertexAttrib4Nub
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBARBPROC glad_glVertexAttrib4NubARB;
#define glVertexAttrib4NubARB glad_glVertexAttrib4NubARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv glad_glVertexAttrib4Nubv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUBVARBPROC glad_glVertexAttrib4NubvARB;
#define glVertexAttrib4NubvARB glad_glVertexAttrib4NubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv glad_glVertexAttrib4Nuiv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUIVARBPROC glad_glVertexAttrib4NuivARB;
#define glVertexAttrib4NuivARB glad_glVertexAttrib4NuivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv glad_glVertexAttrib4Nusv
GLAD_API_CALL PFNGLVERTEXATTRIB4NUSVARBPROC glad_glVertexAttrib4NusvARB;
#define glVertexAttrib4NusvARB glad_glVertexAttrib4NusvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
#define glVertexAttrib4bv glad_glVertexAttrib4bv
GLAD_API_CALL PFNGLVERTEXATTRIB4BVARBPROC glad_glVertexAttrib4bvARB;
#define glVertexAttrib4bvARB glad_glVertexAttrib4bvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
#define glVertexAttrib4d glad_glVertexAttrib4d
GLAD_API_CALL PFNGLVERTEXATTRIB4DARBPROC glad_glVertexAttrib4dARB;
#define glVertexAttrib4dARB glad_glVertexAttrib4dARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DNVPROC glad_glVertexAttrib4dNV;
#define glVertexAttrib4dNV glad_glVertexAttrib4dNV
GLAD_API_CALL PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
#define glVertexAttrib4dv glad_glVertexAttrib4dv
GLAD_API_CALL PFNGLVERTEXATTRIB4DVARBPROC glad_glVertexAttrib4dvARB;
#define glVertexAttrib4dvARB glad_glVertexAttrib4dvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4DVNVPROC glad_glVertexAttrib4dvNV;
#define glVertexAttrib4dvNV glad_glVertexAttrib4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
#define glVertexAttrib4f glad_glVertexAttrib4f
GLAD_API_CALL PFNGLVERTEXATTRIB4FARBPROC glad_glVertexAttrib4fARB;
#define glVertexAttrib4fARB glad_glVertexAttrib4fARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FNVPROC glad_glVertexAttrib4fNV;
#define glVertexAttrib4fNV glad_glVertexAttrib4fNV
GLAD_API_CALL PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
#define glVertexAttrib4fv glad_glVertexAttrib4fv
GLAD_API_CALL PFNGLVERTEXATTRIB4FVARBPROC glad_glVertexAttrib4fvARB;
#define glVertexAttrib4fvARB glad_glVertexAttrib4fvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4FVNVPROC glad_glVertexAttrib4fvNV;
#define glVertexAttrib4fvNV glad_glVertexAttrib4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
#define glVertexAttrib4iv glad_glVertexAttrib4iv
GLAD_API_CALL PFNGLVERTEXATTRIB4IVARBPROC glad_glVertexAttrib4ivARB;
#define glVertexAttrib4ivARB glad_glVertexAttrib4ivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
#define glVertexAttrib4s glad_glVertexAttrib4s
GLAD_API_CALL PFNGLVERTEXATTRIB4SARBPROC glad_glVertexAttrib4sARB;
#define glVertexAttrib4sARB glad_glVertexAttrib4sARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SNVPROC glad_glVertexAttrib4sNV;
#define glVertexAttrib4sNV glad_glVertexAttrib4sNV
GLAD_API_CALL PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
#define glVertexAttrib4sv glad_glVertexAttrib4sv
GLAD_API_CALL PFNGLVERTEXATTRIB4SVARBPROC glad_glVertexAttrib4svARB;
#define glVertexAttrib4svARB glad_glVertexAttrib4svARB
GLAD_API_CALL PFNGLVERTEXATTRIB4SVNVPROC glad_glVertexAttrib4svNV;
#define glVertexAttrib4svNV glad_glVertexAttrib4svNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBNVPROC glad_glVertexAttrib4ubNV;
#define glVertexAttrib4ubNV glad_glVertexAttrib4ubNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
#define glVertexAttrib4ubv glad_glVertexAttrib4ubv
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVARBPROC glad_glVertexAttrib4ubvARB;
#define glVertexAttrib4ubvARB glad_glVertexAttrib4ubvARB
GLAD_API_CALL PFNGLVERTEXATTRIB4UBVNVPROC glad_glVertexAttrib4ubvNV;
#define glVertexAttrib4ubvNV glad_glVertexAttrib4ubvNV
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
#define glVertexAttrib4uiv glad_glVertexAttrib4uiv
GLAD_API_CALL PFNGLVERTEXATTRIB4UIVARBPROC glad_glVertexAttrib4uivARB;
#define glVertexAttrib4uivARB glad_glVertexAttrib4uivARB
GLAD_API_CALL PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
#define glVertexAttrib4usv glad_glVertexAttrib4usv
GLAD_API_CALL PFNGLVERTEXATTRIB4USVARBPROC glad_glVertexAttrib4usvARB;
#define glVertexAttrib4usvARB glad_glVertexAttrib4usvARB
GLAD_API_CALL PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding;
#define glVertexAttribBinding glad_glVertexAttribBinding
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
#define glVertexAttribDivisor glad_glVertexAttribDivisor
GLAD_API_CALL PFNGLVERTEXATTRIBDIVISORARBPROC glad_glVertexAttribDivisorARB;
#define glVertexAttribDivisorARB glad_glVertexAttribDivisorARB
GLAD_API_CALL PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat;
#define glVertexAttribFormat glad_glVertexAttribFormat
GLAD_API_CALL PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
#define glVertexAttribI1i glad_glVertexAttribI1i
GLAD_API_CALL PFNGLVERTEXATTRIBI1IEXTPROC glad_glVertexAttribI1iEXT;
#define glVertexAttribI1iEXT glad_glVertexAttribI1iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
#define glVertexAttribI1iv glad_glVertexAttribI1iv
GLAD_API_CALL PFNGLVERTEXATTRIBI1IVEXTPROC glad_glVertexAttribI1ivEXT;
#define glVertexAttribI1ivEXT glad_glVertexAttribI1ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
#define glVertexAttribI1ui glad_glVertexAttribI1ui
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIEXTPROC glad_glVertexAttribI1uiEXT;
#define glVertexAttribI1uiEXT glad_glVertexAttribI1uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
#define glVertexAttribI1uiv glad_glVertexAttribI1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI1UIVEXTPROC glad_glVertexAttribI1uivEXT;
#define glVertexAttribI1uivEXT glad_glVertexAttribI1uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
#define glVertexAttribI2i glad_glVertexAttribI2i
GLAD_API_CALL PFNGLVERTEXATTRIBI2IEXTPROC glad_glVertexAttribI2iEXT;
#define glVertexAttribI2iEXT glad_glVertexAttribI2iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
#define glVertexAttribI2iv glad_glVertexAttribI2iv
GLAD_API_CALL PFNGLVERTEXATTRIBI2IVEXTPROC glad_glVertexAttribI2ivEXT;
#define glVertexAttribI2ivEXT glad_glVertexAttribI2ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
#define glVertexAttribI2ui glad_glVertexAttribI2ui
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIEXTPROC glad_glVertexAttribI2uiEXT;
#define glVertexAttribI2uiEXT glad_glVertexAttribI2uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
#define glVertexAttribI2uiv glad_glVertexAttribI2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI2UIVEXTPROC glad_glVertexAttribI2uivEXT;
#define glVertexAttribI2uivEXT glad_glVertexAttribI2uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
#define glVertexAttribI3i glad_glVertexAttribI3i
GLAD_API_CALL PFNGLVERTEXATTRIBI3IEXTPROC glad_glVertexAttribI3iEXT;
#define glVertexAttribI3iEXT glad_glVertexAttribI3iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
#define glVertexAttribI3iv glad_glVertexAttribI3iv
GLAD_API_CALL PFNGLVERTEXATTRIBI3IVEXTPROC glad_glVertexAttribI3ivEXT;
#define glVertexAttribI3ivEXT glad_glVertexAttribI3ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
#define glVertexAttribI3ui glad_glVertexAttribI3ui
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIEXTPROC glad_glVertexAttribI3uiEXT;
#define glVertexAttribI3uiEXT glad_glVertexAttribI3uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
#define glVertexAttribI3uiv glad_glVertexAttribI3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI3UIVEXTPROC glad_glVertexAttribI3uivEXT;
#define glVertexAttribI3uivEXT glad_glVertexAttribI3uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
#define glVertexAttribI4bv glad_glVertexAttribI4bv
GLAD_API_CALL PFNGLVERTEXATTRIBI4BVEXTPROC glad_glVertexAttribI4bvEXT;
#define glVertexAttribI4bvEXT glad_glVertexAttribI4bvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
#define glVertexAttribI4i glad_glVertexAttribI4i
GLAD_API_CALL PFNGLVERTEXATTRIBI4IEXTPROC glad_glVertexAttribI4iEXT;
#define glVertexAttribI4iEXT glad_glVertexAttribI4iEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
#define glVertexAttribI4iv glad_glVertexAttribI4iv
GLAD_API_CALL PFNGLVERTEXATTRIBI4IVEXTPROC glad_glVertexAttribI4ivEXT;
#define glVertexAttribI4ivEXT glad_glVertexAttribI4ivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
#define glVertexAttribI4sv glad_glVertexAttribI4sv
GLAD_API_CALL PFNGLVERTEXATTRIBI4SVEXTPROC glad_glVertexAttribI4svEXT;
#define glVertexAttribI4svEXT glad_glVertexAttribI4svEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
#define glVertexAttribI4ubv glad_glVertexAttribI4ubv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UBVEXTPROC glad_glVertexAttribI4ubvEXT;
#define glVertexAttribI4ubvEXT glad_glVertexAttribI4ubvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
#define glVertexAttribI4ui glad_glVertexAttribI4ui
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIEXTPROC glad_glVertexAttribI4uiEXT;
#define glVertexAttribI4uiEXT glad_glVertexAttribI4uiEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
#define glVertexAttribI4uiv glad_glVertexAttribI4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBI4UIVEXTPROC glad_glVertexAttribI4uivEXT;
#define glVertexAttribI4uivEXT glad_glVertexAttribI4uivEXT
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
#define glVertexAttribI4usv glad_glVertexAttribI4usv
GLAD_API_CALL PFNGLVERTEXATTRIBI4USVEXTPROC glad_glVertexAttribI4usvEXT;
#define glVertexAttribI4usvEXT glad_glVertexAttribI4usvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat;
#define glVertexAttribIFormat glad_glVertexAttribIFormat
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
#define glVertexAttribIPointer glad_glVertexAttribIPointer
GLAD_API_CALL PFNGLVERTEXATTRIBIPOINTEREXTPROC glad_glVertexAttribIPointerEXT;
#define glVertexAttribIPointerEXT glad_glVertexAttribIPointerEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
#define glVertexAttribL1d glad_glVertexAttribL1d
GLAD_API_CALL PFNGLVERTEXATTRIBL1DEXTPROC glad_glVertexAttribL1dEXT;
#define glVertexAttribL1dEXT glad_glVertexAttribL1dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
#define glVertexAttribL1dv glad_glVertexAttribL1dv
GLAD_API_CALL PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT;
#define glVertexAttribL1dvEXT glad_glVertexAttribL1dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
#define glVertexAttribL2d glad_glVertexAttribL2d
GLAD_API_CALL PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT;
#define glVertexAttribL2dEXT glad_glVertexAttribL2dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
#define glVertexAttribL2dv glad_glVertexAttribL2dv
GLAD_API_CALL PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT;
#define glVertexAttribL2dvEXT glad_glVertexAttribL2dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
#define glVertexAttribL3d glad_glVertexAttribL3d
GLAD_API_CALL PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT;
#define glVertexAttribL3dEXT glad_glVertexAttribL3dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
#define glVertexAttribL3dv glad_glVertexAttribL3dv
GLAD_API_CALL PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT;
#define glVertexAttribL3dvEXT glad_glVertexAttribL3dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
#define glVertexAttribL4d glad_glVertexAttribL4d
GLAD_API_CALL PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT;
#define glVertexAttribL4dEXT glad_glVertexAttribL4dEXT
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
#define glVertexAttribL4dv glad_glVertexAttribL4dv
GLAD_API_CALL PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT;
#define glVertexAttribL4dvEXT glad_glVertexAttribL4dvEXT
GLAD_API_CALL PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat;
#define glVertexAttribLFormat glad_glVertexAttribLFormat
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
#define glVertexAttribLPointer glad_glVertexAttribLPointer
GLAD_API_CALL PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT;
#define glVertexAttribLPointerEXT glad_glVertexAttribLPointerEXT
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
#define glVertexAttribP1ui glad_glVertexAttribP1ui
GLAD_API_CALL PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
#define glVertexAttribP1uiv glad_glVertexAttribP1uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
#define glVertexAttribP2ui glad_glVertexAttribP2ui
GLAD_API_CALL PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
#define glVertexAttribP2uiv glad_glVertexAttribP2uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
#define glVertexAttribP3ui glad_glVertexAttribP3ui
GLAD_API_CALL PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
#define glVertexAttribP3uiv glad_glVertexAttribP3uiv
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
#define glVertexAttribP4ui glad_glVertexAttribP4ui
GLAD_API_CALL PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
#define glVertexAttribP4uiv glad_glVertexAttribP4uiv
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
#define glVertexAttribPointer glad_glVertexAttribPointer
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB;
#define glVertexAttribPointerARB glad_glVertexAttribPointerARB
GLAD_API_CALL PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV;
#define glVertexAttribPointerNV glad_glVertexAttribPointerNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV;
#define glVertexAttribs1dvNV glad_glVertexAttribs1dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV;
#define glVertexAttribs1fvNV glad_glVertexAttribs1fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV;
#define glVertexAttribs1svNV glad_glVertexAttribs1svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV;
#define glVertexAttribs2dvNV glad_glVertexAttribs2dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV;
#define glVertexAttribs2fvNV glad_glVertexAttribs2fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV;
#define glVertexAttribs2svNV glad_glVertexAttribs2svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV;
#define glVertexAttribs3dvNV glad_glVertexAttribs3dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV;
#define glVertexAttribs3fvNV glad_glVertexAttribs3fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV;
#define glVertexAttribs3svNV glad_glVertexAttribs3svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV;
#define glVertexAttribs4dvNV glad_glVertexAttribs4dvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV;
#define glVertexAttribs4fvNV glad_glVertexAttribs4fvNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV;
#define glVertexAttribs4svNV glad_glVertexAttribs4svNV
GLAD_API_CALL PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV;
#define glVertexAttribs4ubvNV glad_glVertexAttribs4ubvNV
GLAD_API_CALL PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor;
#define glVertexBindingDivisor glad_glVertexBindingDivisor
GLAD_API_CALL PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
#define glVertexP2ui glad_glVertexP2ui
GLAD_API_CALL PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
#define glVertexP2uiv glad_glVertexP2uiv
GLAD_API_CALL PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
#define glVertexP3ui glad_glVertexP3ui
GLAD_API_CALL PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
#define glVertexP3uiv glad_glVertexP3uiv
GLAD_API_CALL PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
#define glVertexP4ui glad_glVertexP4ui
GLAD_API_CALL PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
#define glVertexP4uiv glad_glVertexP4uiv
GLAD_API_CALL PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
#define glVertexPointer glad_glVertexPointer
GLAD_API_CALL PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT;
#define glVertexPointerEXT glad_glVertexPointerEXT
GLAD_API_CALL PFNGLVIEWPORTPROC glad_glViewport;
#define glViewport glad_glViewport
GLAD_API_CALL PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
#define glViewportArrayv glad_glViewportArrayv
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
#define glViewportIndexedf glad_glViewportIndexedf
GLAD_API_CALL PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
#define glViewportIndexedfv glad_glViewportIndexedfv
GLAD_API_CALL PFNGLWAITSYNCPROC glad_glWaitSync;
#define glWaitSync glad_glWaitSync
GLAD_API_CALL PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;
#define glWindowPos2d glad_glWindowPos2d
GLAD_API_CALL PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB;
#define glWindowPos2dARB glad_glWindowPos2dARB
GLAD_API_CALL PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA;
#define glWindowPos2dMESA glad_glWindowPos2dMESA
GLAD_API_CALL PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;
#define glWindowPos2dv glad_glWindowPos2dv
GLAD_API_CALL PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB;
#define glWindowPos2dvARB glad_glWindowPos2dvARB
GLAD_API_CALL PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA;
#define glWindowPos2dvMESA glad_glWindowPos2dvMESA
GLAD_API_CALL PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;
#define glWindowPos2f glad_glWindowPos2f
GLAD_API_CALL PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB;
#define glWindowPos2fARB glad_glWindowPos2fARB
GLAD_API_CALL PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA;
#define glWindowPos2fMESA glad_glWindowPos2fMESA
GLAD_API_CALL PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;
#define glWindowPos2fv glad_glWindowPos2fv
GLAD_API_CALL PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB;
#define glWindowPos2fvARB glad_glWindowPos2fvARB
GLAD_API_CALL PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA;
#define glWindowPos2fvMESA glad_glWindowPos2fvMESA
GLAD_API_CALL PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;
#define glWindowPos2i glad_glWindowPos2i
GLAD_API_CALL PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB;
#define glWindowPos2iARB glad_glWindowPos2iARB
GLAD_API_CALL PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA;
#define glWindowPos2iMESA glad_glWindowPos2iMESA
GLAD_API_CALL PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;
#define glWindowPos2iv glad_glWindowPos2iv
GLAD_API_CALL PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB;
#define glWindowPos2ivARB glad_glWindowPos2ivARB
GLAD_API_CALL PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA;
#define glWindowPos2ivMESA glad_glWindowPos2ivMESA
GLAD_API_CALL PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;
#define glWindowPos2s glad_glWindowPos2s
GLAD_API_CALL PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB;
#define glWindowPos2sARB glad_glWindowPos2sARB
GLAD_API_CALL PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA;
#define glWindowPos2sMESA glad_glWindowPos2sMESA
GLAD_API_CALL PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;
#define glWindowPos2sv glad_glWindowPos2sv
GLAD_API_CALL PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB;
#define glWindowPos2svARB glad_glWindowPos2svARB
GLAD_API_CALL PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA;
#define glWindowPos2svMESA glad_glWindowPos2svMESA
GLAD_API_CALL PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;
#define glWindowPos3d glad_glWindowPos3d
GLAD_API_CALL PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB;
#define glWindowPos3dARB glad_glWindowPos3dARB
GLAD_API_CALL PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA;
#define glWindowPos3dMESA glad_glWindowPos3dMESA
GLAD_API_CALL PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;
#define glWindowPos3dv glad_glWindowPos3dv
GLAD_API_CALL PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB;
#define glWindowPos3dvARB glad_glWindowPos3dvARB
GLAD_API_CALL PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA;
#define glWindowPos3dvMESA glad_glWindowPos3dvMESA
GLAD_API_CALL PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;
#define glWindowPos3f glad_glWindowPos3f
GLAD_API_CALL PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB;
#define glWindowPos3fARB glad_glWindowPos3fARB
GLAD_API_CALL PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA;
#define glWindowPos3fMESA glad_glWindowPos3fMESA
GLAD_API_CALL PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;
#define glWindowPos3fv glad_glWindowPos3fv
GLAD_API_CALL PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB;
#define glWindowPos3fvARB glad_glWindowPos3fvARB
GLAD_API_CALL PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA;
#define glWindowPos3fvMESA glad_glWindowPos3fvMESA
GLAD_API_CALL PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;
#define glWindowPos3i glad_glWindowPos3i
GLAD_API_CALL PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB;
#define glWindowPos3iARB glad_glWindowPos3iARB
GLAD_API_CALL PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA;
#define glWindowPos3iMESA glad_glWindowPos3iMESA
GLAD_API_CALL PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;
#define glWindowPos3iv glad_glWindowPos3iv
GLAD_API_CALL PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB;
#define glWindowPos3ivARB glad_glWindowPos3ivARB
GLAD_API_CALL PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA;
#define glWindowPos3ivMESA glad_glWindowPos3ivMESA
GLAD_API_CALL PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;
#define glWindowPos3s glad_glWindowPos3s
GLAD_API_CALL PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB;
#define glWindowPos3sARB glad_glWindowPos3sARB
GLAD_API_CALL PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA;
#define glWindowPos3sMESA glad_glWindowPos3sMESA
GLAD_API_CALL PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;
#define glWindowPos3sv glad_glWindowPos3sv
GLAD_API_CALL PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB;
#define glWindowPos3svARB glad_glWindowPos3svARB
GLAD_API_CALL PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA;
#define glWindowPos3svMESA glad_glWindowPos3svMESA
GLAD_API_CALL PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA;
#define glWindowPos4dMESA glad_glWindowPos4dMESA
GLAD_API_CALL PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA;
#define glWindowPos4dvMESA glad_glWindowPos4dvMESA
GLAD_API_CALL PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA;
#define glWindowPos4fMESA glad_glWindowPos4fMESA
GLAD_API_CALL PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA;
#define glWindowPos4fvMESA glad_glWindowPos4fvMESA
GLAD_API_CALL PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA;
#define glWindowPos4iMESA glad_glWindowPos4iMESA
GLAD_API_CALL PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA;
#define glWindowPos4ivMESA glad_glWindowPos4ivMESA
GLAD_API_CALL PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA;
#define glWindowPos4sMESA glad_glWindowPos4sMESA
GLAD_API_CALL PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA;
#define glWindowPos4svMESA glad_glWindowPos4svMESA


GLAD_API_CALL void gladSetGLOnDemandLoader(GLADloadfunc loader);





#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef GLAD_GL_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif




static GLADloadfunc glad_global_on_demand_gl_loader_func = NULL;

void gladSetGLOnDemandLoader(GLADloadfunc loader) {
    glad_global_on_demand_gl_loader_func = loader;
}

static GLADapiproc glad_gl_on_demand_loader(const char *name) {
    GLADapiproc result = NULL;
    if (result == NULL && glad_global_on_demand_gl_loader_func != NULL) {
        result = glad_global_on_demand_gl_loader_func(name);
    }
    /* this provokes a segmentation fault if there was no loader or no loader returned something useful */
    return result;
}


static void GLAD_API_PTR glad_on_demand_impl_glAccum(GLenum op, GLfloat value) {
    glad_glAccum = (PFNGLACCUMPROC) glad_gl_on_demand_loader("glAccum");
    glad_glAccum(op, value);
}
PFNGLACCUMPROC glad_glAccum = glad_on_demand_impl_glAccum;
static void GLAD_API_PTR glad_on_demand_impl_glActiveShaderProgram(GLuint pipeline, GLuint program) {
    glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC) glad_gl_on_demand_loader("glActiveShaderProgram");
    glad_glActiveShaderProgram(pipeline, program);
}
PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram = glad_on_demand_impl_glActiveShaderProgram;
static void GLAD_API_PTR glad_on_demand_impl_glActiveTexture(GLenum texture) {
    glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC) glad_gl_on_demand_loader("glActiveTexture");
    glad_glActiveTexture(texture);
}
PFNGLACTIVETEXTUREPROC glad_glActiveTexture = glad_on_demand_impl_glActiveTexture;
static void GLAD_API_PTR glad_on_demand_impl_glActiveTextureARB(GLenum texture) {
    glad_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC) glad_gl_on_demand_loader("glActiveTextureARB");
    glad_glActiveTextureARB(texture);
}
PFNGLACTIVETEXTUREARBPROC glad_glActiveTextureARB = glad_on_demand_impl_glActiveTextureARB;
static void GLAD_API_PTR glad_on_demand_impl_glActiveVaryingNV(GLuint program, const GLchar * name) {
    glad_glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC) glad_gl_on_demand_loader("glActiveVaryingNV");
    glad_glActiveVaryingNV(program, name);
}
PFNGLACTIVEVARYINGNVPROC glad_glActiveVaryingNV = glad_on_demand_impl_glActiveVaryingNV;
static void GLAD_API_PTR glad_on_demand_impl_glAlphaFunc(GLenum func, GLfloat ref) {
    glad_glAlphaFunc = (PFNGLALPHAFUNCPROC) glad_gl_on_demand_loader("glAlphaFunc");
    glad_glAlphaFunc(func, ref);
}
PFNGLALPHAFUNCPROC glad_glAlphaFunc = glad_on_demand_impl_glAlphaFunc;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) {
    glad_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC) glad_gl_on_demand_loader("glAreProgramsResidentNV");
    return glad_glAreProgramsResidentNV(n, programs, residences);
}
PFNGLAREPROGRAMSRESIDENTNVPROC glad_glAreProgramsResidentNV = glad_on_demand_impl_glAreProgramsResidentNV;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) {
    glad_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC) glad_gl_on_demand_loader("glAreTexturesResident");
    return glad_glAreTexturesResident(n, textures, residences);
}
PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident = glad_on_demand_impl_glAreTexturesResident;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) {
    glad_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC) glad_gl_on_demand_loader("glAreTexturesResidentEXT");
    return glad_glAreTexturesResidentEXT(n, textures, residences);
}
PFNGLARETEXTURESRESIDENTEXTPROC glad_glAreTexturesResidentEXT = glad_on_demand_impl_glAreTexturesResidentEXT;
static void GLAD_API_PTR glad_on_demand_impl_glArrayElement(GLint i) {
    glad_glArrayElement = (PFNGLARRAYELEMENTPROC) glad_gl_on_demand_loader("glArrayElement");
    glad_glArrayElement(i);
}
PFNGLARRAYELEMENTPROC glad_glArrayElement = glad_on_demand_impl_glArrayElement;
static void GLAD_API_PTR glad_on_demand_impl_glArrayElementEXT(GLint i) {
    glad_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC) glad_gl_on_demand_loader("glArrayElementEXT");
    glad_glArrayElementEXT(i);
}
PFNGLARRAYELEMENTEXTPROC glad_glArrayElementEXT = glad_on_demand_impl_glArrayElementEXT;
static void GLAD_API_PTR glad_on_demand_impl_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) {
    glad_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC) glad_gl_on_demand_loader("glAttachObjectARB");
    glad_glAttachObjectARB(containerObj, obj);
}
PFNGLATTACHOBJECTARBPROC glad_glAttachObjectARB = glad_on_demand_impl_glAttachObjectARB;
static void GLAD_API_PTR glad_on_demand_impl_glAttachShader(GLuint program, GLuint shader) {
    glad_glAttachShader = (PFNGLATTACHSHADERPROC) glad_gl_on_demand_loader("glAttachShader");
    glad_glAttachShader(program, shader);
}
PFNGLATTACHSHADERPROC glad_glAttachShader = glad_on_demand_impl_glAttachShader;
static void GLAD_API_PTR glad_on_demand_impl_glBegin(GLenum mode) {
    glad_glBegin = (PFNGLBEGINPROC) glad_gl_on_demand_loader("glBegin");
    glad_glBegin(mode);
}
PFNGLBEGINPROC glad_glBegin = glad_on_demand_impl_glBegin;
static void GLAD_API_PTR glad_on_demand_impl_glBeginConditionalRender(GLuint id, GLenum mode) {
    glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC) glad_gl_on_demand_loader("glBeginConditionalRender");
    glad_glBeginConditionalRender(id, mode);
}
PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender = glad_on_demand_impl_glBeginConditionalRender;
static void GLAD_API_PTR glad_on_demand_impl_glBeginConditionalRenderNV(GLuint id, GLenum mode) {
    glad_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC) glad_gl_on_demand_loader("glBeginConditionalRenderNV");
    glad_glBeginConditionalRenderNV(id, mode);
}
PFNGLBEGINCONDITIONALRENDERNVPROC glad_glBeginConditionalRenderNV = glad_on_demand_impl_glBeginConditionalRenderNV;
static void GLAD_API_PTR glad_on_demand_impl_glBeginConditionalRenderNVX(GLuint id) {
    glad_glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC) glad_gl_on_demand_loader("glBeginConditionalRenderNVX");
    glad_glBeginConditionalRenderNVX(id);
}
PFNGLBEGINCONDITIONALRENDERNVXPROC glad_glBeginConditionalRenderNVX = glad_on_demand_impl_glBeginConditionalRenderNVX;
static void GLAD_API_PTR glad_on_demand_impl_glBeginQuery(GLenum target, GLuint id) {
    glad_glBeginQuery = (PFNGLBEGINQUERYPROC) glad_gl_on_demand_loader("glBeginQuery");
    glad_glBeginQuery(target, id);
}
PFNGLBEGINQUERYPROC glad_glBeginQuery = glad_on_demand_impl_glBeginQuery;
static void GLAD_API_PTR glad_on_demand_impl_glBeginQueryARB(GLenum target, GLuint id) {
    glad_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC) glad_gl_on_demand_loader("glBeginQueryARB");
    glad_glBeginQueryARB(target, id);
}
PFNGLBEGINQUERYARBPROC glad_glBeginQueryARB = glad_on_demand_impl_glBeginQueryARB;
static void GLAD_API_PTR glad_on_demand_impl_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
    glad_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC) glad_gl_on_demand_loader("glBeginQueryIndexed");
    glad_glBeginQueryIndexed(target, index, id);
}
PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed = glad_on_demand_impl_glBeginQueryIndexed;
static void GLAD_API_PTR glad_on_demand_impl_glBeginTransformFeedback(GLenum primitiveMode) {
    glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC) glad_gl_on_demand_loader("glBeginTransformFeedback");
    glad_glBeginTransformFeedback(primitiveMode);
}
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback = glad_on_demand_impl_glBeginTransformFeedback;
static void GLAD_API_PTR glad_on_demand_impl_glBeginTransformFeedbackEXT(GLenum primitiveMode) {
    glad_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) glad_gl_on_demand_loader("glBeginTransformFeedbackEXT");
    glad_glBeginTransformFeedbackEXT(primitiveMode);
}
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glad_glBeginTransformFeedbackEXT = glad_on_demand_impl_glBeginTransformFeedbackEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBeginTransformFeedbackNV(GLenum primitiveMode) {
    glad_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC) glad_gl_on_demand_loader("glBeginTransformFeedbackNV");
    glad_glBeginTransformFeedbackNV(primitiveMode);
}
PFNGLBEGINTRANSFORMFEEDBACKNVPROC glad_glBeginTransformFeedbackNV = glad_on_demand_impl_glBeginTransformFeedbackNV;
static void GLAD_API_PTR glad_on_demand_impl_glBindAttribLocation(GLuint program, GLuint index, const GLchar * name) {
    glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC) glad_gl_on_demand_loader("glBindAttribLocation");
    glad_glBindAttribLocation(program, index, name);
}
PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation = glad_on_demand_impl_glBindAttribLocation;
static void GLAD_API_PTR glad_on_demand_impl_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) {
    glad_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC) glad_gl_on_demand_loader("glBindAttribLocationARB");
    glad_glBindAttribLocationARB(programObj, index, name);
}
PFNGLBINDATTRIBLOCATIONARBPROC glad_glBindAttribLocationARB = glad_on_demand_impl_glBindAttribLocationARB;
static void GLAD_API_PTR glad_on_demand_impl_glBindBuffer(GLenum target, GLuint buffer) {
    glad_glBindBuffer = (PFNGLBINDBUFFERPROC) glad_gl_on_demand_loader("glBindBuffer");
    glad_glBindBuffer(target, buffer);
}
PFNGLBINDBUFFERPROC glad_glBindBuffer = glad_on_demand_impl_glBindBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferARB(GLenum target, GLuint buffer) {
    glad_glBindBufferARB = (PFNGLBINDBUFFERARBPROC) glad_gl_on_demand_loader("glBindBufferARB");
    glad_glBindBufferARB(target, buffer);
}
PFNGLBINDBUFFERARBPROC glad_glBindBufferARB = glad_on_demand_impl_glBindBufferARB;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
    glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC) glad_gl_on_demand_loader("glBindBufferBase");
    glad_glBindBufferBase(target, index, buffer);
}
PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase = glad_on_demand_impl_glBindBufferBase;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) {
    glad_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC) glad_gl_on_demand_loader("glBindBufferBaseEXT");
    glad_glBindBufferBaseEXT(target, index, buffer);
}
PFNGLBINDBUFFERBASEEXTPROC glad_glBindBufferBaseEXT = glad_on_demand_impl_glBindBufferBaseEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) {
    glad_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC) glad_gl_on_demand_loader("glBindBufferBaseNV");
    glad_glBindBufferBaseNV(target, index, buffer);
}
PFNGLBINDBUFFERBASENVPROC glad_glBindBufferBaseNV = glad_on_demand_impl_glBindBufferBaseNV;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
    glad_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC) glad_gl_on_demand_loader("glBindBufferOffsetEXT");
    glad_glBindBufferOffsetEXT(target, index, buffer, offset);
}
PFNGLBINDBUFFEROFFSETEXTPROC glad_glBindBufferOffsetEXT = glad_on_demand_impl_glBindBufferOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
    glad_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC) glad_gl_on_demand_loader("glBindBufferOffsetNV");
    glad_glBindBufferOffsetNV(target, index, buffer, offset);
}
PFNGLBINDBUFFEROFFSETNVPROC glad_glBindBufferOffsetNV = glad_on_demand_impl_glBindBufferOffsetNV;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC) glad_gl_on_demand_loader("glBindBufferRange");
    glad_glBindBufferRange(target, index, buffer, offset, size);
}
PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange = glad_on_demand_impl_glBindBufferRange;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC) glad_gl_on_demand_loader("glBindBufferRangeEXT");
    glad_glBindBufferRangeEXT(target, index, buffer, offset, size);
}
PFNGLBINDBUFFERRANGEEXTPROC glad_glBindBufferRangeEXT = glad_on_demand_impl_glBindBufferRangeEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC) glad_gl_on_demand_loader("glBindBufferRangeNV");
    glad_glBindBufferRangeNV(target, index, buffer, offset, size);
}
PFNGLBINDBUFFERRANGENVPROC glad_glBindBufferRangeNV = glad_on_demand_impl_glBindBufferRangeNV;
static void GLAD_API_PTR glad_on_demand_impl_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) {
    glad_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC) glad_gl_on_demand_loader("glBindBuffersBase");
    glad_glBindBuffersBase(target, first, count, buffers);
}
PFNGLBINDBUFFERSBASEPROC glad_glBindBuffersBase = glad_on_demand_impl_glBindBuffersBase;
static void GLAD_API_PTR glad_on_demand_impl_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) {
    glad_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC) glad_gl_on_demand_loader("glBindBuffersRange");
    glad_glBindBuffersRange(target, first, count, buffers, offsets, sizes);
}
PFNGLBINDBUFFERSRANGEPROC glad_glBindBuffersRange = glad_on_demand_impl_glBindBuffersRange;
static void GLAD_API_PTR glad_on_demand_impl_glBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) {
    glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC) glad_gl_on_demand_loader("glBindFragDataLocation");
    glad_glBindFragDataLocation(program, color, name);
}
PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation = glad_on_demand_impl_glBindFragDataLocation;
static void GLAD_API_PTR glad_on_demand_impl_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) {
    glad_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC) glad_gl_on_demand_loader("glBindFragDataLocationEXT");
    glad_glBindFragDataLocationEXT(program, color, name);
}
PFNGLBINDFRAGDATALOCATIONEXTPROC glad_glBindFragDataLocationEXT = glad_on_demand_impl_glBindFragDataLocationEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) {
    glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) glad_gl_on_demand_loader("glBindFragDataLocationIndexed");
    glad_glBindFragDataLocationIndexed(program, colorNumber, index, name);
}
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed = glad_on_demand_impl_glBindFragDataLocationIndexed;
static void GLAD_API_PTR glad_on_demand_impl_glBindFramebuffer(GLenum target, GLuint framebuffer) {
    glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC) glad_gl_on_demand_loader("glBindFramebuffer");
    glad_glBindFramebuffer(target, framebuffer);
}
PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer = glad_on_demand_impl_glBindFramebuffer;
static void GLAD_API_PTR glad_on_demand_impl_glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
    glad_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC) glad_gl_on_demand_loader("glBindFramebufferEXT");
    glad_glBindFramebufferEXT(target, framebuffer);
}
PFNGLBINDFRAMEBUFFEREXTPROC glad_glBindFramebufferEXT = glad_on_demand_impl_glBindFramebufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
    glad_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) glad_gl_on_demand_loader("glBindImageTexture");
    glad_glBindImageTexture(unit, texture, level, layered, layer, access, format);
}
PFNGLBINDIMAGETEXTUREPROC glad_glBindImageTexture = glad_on_demand_impl_glBindImageTexture;
static void GLAD_API_PTR glad_on_demand_impl_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) {
    glad_glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC) glad_gl_on_demand_loader("glBindImageTextureEXT");
    glad_glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
}
PFNGLBINDIMAGETEXTUREEXTPROC glad_glBindImageTextureEXT = glad_on_demand_impl_glBindImageTextureEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) {
    glad_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC) glad_gl_on_demand_loader("glBindImageTextures");
    glad_glBindImageTextures(first, count, textures);
}
PFNGLBINDIMAGETEXTURESPROC glad_glBindImageTextures = glad_on_demand_impl_glBindImageTextures;
static void GLAD_API_PTR glad_on_demand_impl_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) {
    glad_glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC) glad_gl_on_demand_loader("glBindMultiTextureEXT");
    glad_glBindMultiTextureEXT(texunit, target, texture);
}
PFNGLBINDMULTITEXTUREEXTPROC glad_glBindMultiTextureEXT = glad_on_demand_impl_glBindMultiTextureEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindProgramARB(GLenum target, GLuint program) {
    glad_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC) glad_gl_on_demand_loader("glBindProgramARB");
    glad_glBindProgramARB(target, program);
}
PFNGLBINDPROGRAMARBPROC glad_glBindProgramARB = glad_on_demand_impl_glBindProgramARB;
static void GLAD_API_PTR glad_on_demand_impl_glBindProgramNV(GLenum target, GLuint id) {
    glad_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC) glad_gl_on_demand_loader("glBindProgramNV");
    glad_glBindProgramNV(target, id);
}
PFNGLBINDPROGRAMNVPROC glad_glBindProgramNV = glad_on_demand_impl_glBindProgramNV;
static void GLAD_API_PTR glad_on_demand_impl_glBindProgramPipeline(GLuint pipeline) {
    glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC) glad_gl_on_demand_loader("glBindProgramPipeline");
    glad_glBindProgramPipeline(pipeline);
}
PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline = glad_on_demand_impl_glBindProgramPipeline;
static void GLAD_API_PTR glad_on_demand_impl_glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
    glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC) glad_gl_on_demand_loader("glBindRenderbuffer");
    glad_glBindRenderbuffer(target, renderbuffer);
}
PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer = glad_on_demand_impl_glBindRenderbuffer;
static void GLAD_API_PTR glad_on_demand_impl_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
    glad_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC) glad_gl_on_demand_loader("glBindRenderbufferEXT");
    glad_glBindRenderbufferEXT(target, renderbuffer);
}
PFNGLBINDRENDERBUFFEREXTPROC glad_glBindRenderbufferEXT = glad_on_demand_impl_glBindRenderbufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindSampler(GLuint unit, GLuint sampler) {
    glad_glBindSampler = (PFNGLBINDSAMPLERPROC) glad_gl_on_demand_loader("glBindSampler");
    glad_glBindSampler(unit, sampler);
}
PFNGLBINDSAMPLERPROC glad_glBindSampler = glad_on_demand_impl_glBindSampler;
static void GLAD_API_PTR glad_on_demand_impl_glBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) {
    glad_glBindSamplers = (PFNGLBINDSAMPLERSPROC) glad_gl_on_demand_loader("glBindSamplers");
    glad_glBindSamplers(first, count, samplers);
}
PFNGLBINDSAMPLERSPROC glad_glBindSamplers = glad_on_demand_impl_glBindSamplers;
static void GLAD_API_PTR glad_on_demand_impl_glBindTexture(GLenum target, GLuint texture) {
    glad_glBindTexture = (PFNGLBINDTEXTUREPROC) glad_gl_on_demand_loader("glBindTexture");
    glad_glBindTexture(target, texture);
}
PFNGLBINDTEXTUREPROC glad_glBindTexture = glad_on_demand_impl_glBindTexture;
static void GLAD_API_PTR glad_on_demand_impl_glBindTextureEXT(GLenum target, GLuint texture) {
    glad_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC) glad_gl_on_demand_loader("glBindTextureEXT");
    glad_glBindTextureEXT(target, texture);
}
PFNGLBINDTEXTUREEXTPROC glad_glBindTextureEXT = glad_on_demand_impl_glBindTextureEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBindTextureUnit(GLuint unit, GLuint texture) {
    glad_glBindTextureUnit = (PFNGLBINDTEXTUREUNITPROC) glad_gl_on_demand_loader("glBindTextureUnit");
    glad_glBindTextureUnit(unit, texture);
}
PFNGLBINDTEXTUREUNITPROC glad_glBindTextureUnit = glad_on_demand_impl_glBindTextureUnit;
static void GLAD_API_PTR glad_on_demand_impl_glBindTextures(GLuint first, GLsizei count, const GLuint * textures) {
    glad_glBindTextures = (PFNGLBINDTEXTURESPROC) glad_gl_on_demand_loader("glBindTextures");
    glad_glBindTextures(first, count, textures);
}
PFNGLBINDTEXTURESPROC glad_glBindTextures = glad_on_demand_impl_glBindTextures;
static void GLAD_API_PTR glad_on_demand_impl_glBindTransformFeedback(GLenum target, GLuint id) {
    glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC) glad_gl_on_demand_loader("glBindTransformFeedback");
    glad_glBindTransformFeedback(target, id);
}
PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback = glad_on_demand_impl_glBindTransformFeedback;
static void GLAD_API_PTR glad_on_demand_impl_glBindTransformFeedbackNV(GLenum target, GLuint id) {
    glad_glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC) glad_gl_on_demand_loader("glBindTransformFeedbackNV");
    glad_glBindTransformFeedbackNV(target, id);
}
PFNGLBINDTRANSFORMFEEDBACKNVPROC glad_glBindTransformFeedbackNV = glad_on_demand_impl_glBindTransformFeedbackNV;
static void GLAD_API_PTR glad_on_demand_impl_glBindVertexArray(GLuint array) {
    glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC) glad_gl_on_demand_loader("glBindVertexArray");
    glad_glBindVertexArray(array);
}
PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray = glad_on_demand_impl_glBindVertexArray;
static void GLAD_API_PTR glad_on_demand_impl_glBindVertexArrayAPPLE(GLuint array) {
    glad_glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC) glad_gl_on_demand_loader("glBindVertexArrayAPPLE");
    glad_glBindVertexArrayAPPLE(array);
}
PFNGLBINDVERTEXARRAYAPPLEPROC glad_glBindVertexArrayAPPLE = glad_on_demand_impl_glBindVertexArrayAPPLE;
static void GLAD_API_PTR glad_on_demand_impl_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
    glad_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC) glad_gl_on_demand_loader("glBindVertexBuffer");
    glad_glBindVertexBuffer(bindingindex, buffer, offset, stride);
}
PFNGLBINDVERTEXBUFFERPROC glad_glBindVertexBuffer = glad_on_demand_impl_glBindVertexBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
    glad_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC) glad_gl_on_demand_loader("glBindVertexBuffers");
    glad_glBindVertexBuffers(first, count, buffers, offsets, strides);
}
PFNGLBINDVERTEXBUFFERSPROC glad_glBindVertexBuffers = glad_on_demand_impl_glBindVertexBuffers;
static void GLAD_API_PTR glad_on_demand_impl_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) {
    glad_glBitmap = (PFNGLBITMAPPROC) glad_gl_on_demand_loader("glBitmap");
    glad_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}
PFNGLBITMAPPROC glad_glBitmap = glad_on_demand_impl_glBitmap;
static void GLAD_API_PTR glad_on_demand_impl_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glBlendColor = (PFNGLBLENDCOLORPROC) glad_gl_on_demand_loader("glBlendColor");
    glad_glBlendColor(red, green, blue, alpha);
}
PFNGLBLENDCOLORPROC glad_glBlendColor = glad_on_demand_impl_glBlendColor;
static void GLAD_API_PTR glad_on_demand_impl_glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC) glad_gl_on_demand_loader("glBlendColorEXT");
    glad_glBlendColorEXT(red, green, blue, alpha);
}
PFNGLBLENDCOLOREXTPROC glad_glBlendColorEXT = glad_on_demand_impl_glBlendColorEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquation(GLenum mode) {
    glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC) glad_gl_on_demand_loader("glBlendEquation");
    glad_glBlendEquation(mode);
}
PFNGLBLENDEQUATIONPROC glad_glBlendEquation = glad_on_demand_impl_glBlendEquation;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationEXT(GLenum mode) {
    glad_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC) glad_gl_on_demand_loader("glBlendEquationEXT");
    glad_glBlendEquationEXT(mode);
}
PFNGLBLENDEQUATIONEXTPROC glad_glBlendEquationEXT = glad_on_demand_impl_glBlendEquationEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationIndexedAMD(GLuint buf, GLenum mode) {
    glad_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC) glad_gl_on_demand_loader("glBlendEquationIndexedAMD");
    glad_glBlendEquationIndexedAMD(buf, mode);
}
PFNGLBLENDEQUATIONINDEXEDAMDPROC glad_glBlendEquationIndexedAMD = glad_on_demand_impl_glBlendEquationIndexedAMD;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC) glad_gl_on_demand_loader("glBlendEquationSeparate");
    glad_glBlendEquationSeparate(modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate = glad_on_demand_impl_glBlendEquationSeparate;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC) glad_gl_on_demand_loader("glBlendEquationSeparateEXT");
    glad_glBlendEquationSeparateEXT(modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEEXTPROC glad_glBlendEquationSeparateEXT = glad_on_demand_impl_glBlendEquationSeparateEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) glad_gl_on_demand_loader("glBlendEquationSeparateIndexedAMD");
    glad_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glad_glBlendEquationSeparateIndexedAMD = glad_on_demand_impl_glBlendEquationSeparateIndexedAMD;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC) glad_gl_on_demand_loader("glBlendEquationSeparatei");
    glad_glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei = glad_on_demand_impl_glBlendEquationSeparatei;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
    glad_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC) glad_gl_on_demand_loader("glBlendEquationSeparateiARB");
    glad_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
}
PFNGLBLENDEQUATIONSEPARATEIARBPROC glad_glBlendEquationSeparateiARB = glad_on_demand_impl_glBlendEquationSeparateiARB;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationi(GLuint buf, GLenum mode) {
    glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC) glad_gl_on_demand_loader("glBlendEquationi");
    glad_glBlendEquationi(buf, mode);
}
PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi = glad_on_demand_impl_glBlendEquationi;
static void GLAD_API_PTR glad_on_demand_impl_glBlendEquationiARB(GLuint buf, GLenum mode) {
    glad_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC) glad_gl_on_demand_loader("glBlendEquationiARB");
    glad_glBlendEquationiARB(buf, mode);
}
PFNGLBLENDEQUATIONIARBPROC glad_glBlendEquationiARB = glad_on_demand_impl_glBlendEquationiARB;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFunc(GLenum sfactor, GLenum dfactor) {
    glad_glBlendFunc = (PFNGLBLENDFUNCPROC) glad_gl_on_demand_loader("glBlendFunc");
    glad_glBlendFunc(sfactor, dfactor);
}
PFNGLBLENDFUNCPROC glad_glBlendFunc = glad_on_demand_impl_glBlendFunc;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) {
    glad_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC) glad_gl_on_demand_loader("glBlendFuncIndexedAMD");
    glad_glBlendFuncIndexedAMD(buf, src, dst);
}
PFNGLBLENDFUNCINDEXEDAMDPROC glad_glBlendFuncIndexedAMD = glad_on_demand_impl_glBlendFuncIndexedAMD;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC) glad_gl_on_demand_loader("glBlendFuncSeparate");
    glad_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate = glad_on_demand_impl_glBlendFuncSeparate;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    glad_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC) glad_gl_on_demand_loader("glBlendFuncSeparateEXT");
    glad_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
PFNGLBLENDFUNCSEPARATEEXTPROC glad_glBlendFuncSeparateEXT = glad_on_demand_impl_glBlendFuncSeparateEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
    glad_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC) glad_gl_on_demand_loader("glBlendFuncSeparateINGR");
    glad_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
PFNGLBLENDFUNCSEPARATEINGRPROC glad_glBlendFuncSeparateINGR = glad_on_demand_impl_glBlendFuncSeparateINGR;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
    glad_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) glad_gl_on_demand_loader("glBlendFuncSeparateIndexedAMD");
    glad_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glad_glBlendFuncSeparateIndexedAMD = glad_on_demand_impl_glBlendFuncSeparateIndexedAMD;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
    glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC) glad_gl_on_demand_loader("glBlendFuncSeparatei");
    glad_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei = glad_on_demand_impl_glBlendFuncSeparatei;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
    glad_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC) glad_gl_on_demand_loader("glBlendFuncSeparateiARB");
    glad_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
PFNGLBLENDFUNCSEPARATEIARBPROC glad_glBlendFuncSeparateiARB = glad_on_demand_impl_glBlendFuncSeparateiARB;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
    glad_glBlendFunci = (PFNGLBLENDFUNCIPROC) glad_gl_on_demand_loader("glBlendFunci");
    glad_glBlendFunci(buf, src, dst);
}
PFNGLBLENDFUNCIPROC glad_glBlendFunci = glad_on_demand_impl_glBlendFunci;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) {
    glad_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC) glad_gl_on_demand_loader("glBlendFunciARB");
    glad_glBlendFunciARB(buf, src, dst);
}
PFNGLBLENDFUNCIARBPROC glad_glBlendFunciARB = glad_on_demand_impl_glBlendFunciARB;
static void GLAD_API_PTR glad_on_demand_impl_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC) glad_gl_on_demand_loader("glBlitFramebuffer");
    glad_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer = glad_on_demand_impl_glBlitFramebuffer;
static void GLAD_API_PTR glad_on_demand_impl_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    glad_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC) glad_gl_on_demand_loader("glBlitFramebufferEXT");
    glad_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
PFNGLBLITFRAMEBUFFEREXTPROC glad_glBlitFramebufferEXT = glad_on_demand_impl_glBlitFramebufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    glad_glBlitNamedFramebuffer = (PFNGLBLITNAMEDFRAMEBUFFERPROC) glad_gl_on_demand_loader("glBlitNamedFramebuffer");
    glad_glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
PFNGLBLITNAMEDFRAMEBUFFERPROC glad_glBlitNamedFramebuffer = glad_on_demand_impl_glBlitNamedFramebuffer;
static void GLAD_API_PTR glad_on_demand_impl_glBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) {
    glad_glBufferData = (PFNGLBUFFERDATAPROC) glad_gl_on_demand_loader("glBufferData");
    glad_glBufferData(target, size, data, usage);
}
PFNGLBUFFERDATAPROC glad_glBufferData = glad_on_demand_impl_glBufferData;
static void GLAD_API_PTR glad_on_demand_impl_glBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) {
    glad_glBufferDataARB = (PFNGLBUFFERDATAARBPROC) glad_gl_on_demand_loader("glBufferDataARB");
    glad_glBufferDataARB(target, size, data, usage);
}
PFNGLBUFFERDATAARBPROC glad_glBufferDataARB = glad_on_demand_impl_glBufferDataARB;
static void GLAD_API_PTR glad_on_demand_impl_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) {
    glad_glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC) glad_gl_on_demand_loader("glBufferParameteriAPPLE");
    glad_glBufferParameteriAPPLE(target, pname, param);
}
PFNGLBUFFERPARAMETERIAPPLEPROC glad_glBufferParameteriAPPLE = glad_on_demand_impl_glBufferParameteriAPPLE;
static void GLAD_API_PTR glad_on_demand_impl_glBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) {
    glad_glBufferStorage = (PFNGLBUFFERSTORAGEPROC) glad_gl_on_demand_loader("glBufferStorage");
    glad_glBufferStorage(target, size, data, flags);
}
PFNGLBUFFERSTORAGEPROC glad_glBufferStorage = glad_on_demand_impl_glBufferStorage;
static void GLAD_API_PTR glad_on_demand_impl_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) {
    glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glBufferSubData");
    glad_glBufferSubData(target, offset, size, data);
}
PFNGLBUFFERSUBDATAPROC glad_glBufferSubData = glad_on_demand_impl_glBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) {
    glad_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC) glad_gl_on_demand_loader("glBufferSubDataARB");
    glad_glBufferSubDataARB(target, offset, size, data);
}
PFNGLBUFFERSUBDATAARBPROC glad_glBufferSubDataARB = glad_on_demand_impl_glBufferSubDataARB;
static void GLAD_API_PTR glad_on_demand_impl_glCallList(GLuint list) {
    glad_glCallList = (PFNGLCALLLISTPROC) glad_gl_on_demand_loader("glCallList");
    glad_glCallList(list);
}
PFNGLCALLLISTPROC glad_glCallList = glad_on_demand_impl_glCallList;
static void GLAD_API_PTR glad_on_demand_impl_glCallLists(GLsizei n, GLenum type, const void * lists) {
    glad_glCallLists = (PFNGLCALLLISTSPROC) glad_gl_on_demand_loader("glCallLists");
    glad_glCallLists(n, type, lists);
}
PFNGLCALLLISTSPROC glad_glCallLists = glad_on_demand_impl_glCallLists;
static GLenum GLAD_API_PTR glad_on_demand_impl_glCheckFramebufferStatus(GLenum target) {
    glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC) glad_gl_on_demand_loader("glCheckFramebufferStatus");
    return glad_glCheckFramebufferStatus(target);
}
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus = glad_on_demand_impl_glCheckFramebufferStatus;
static GLenum GLAD_API_PTR glad_on_demand_impl_glCheckFramebufferStatusEXT(GLenum target) {
    glad_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) glad_gl_on_demand_loader("glCheckFramebufferStatusEXT");
    return glad_glCheckFramebufferStatusEXT(target);
}
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glad_glCheckFramebufferStatusEXT = glad_on_demand_impl_glCheckFramebufferStatusEXT;
static GLenum GLAD_API_PTR glad_on_demand_impl_glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) {
    glad_glCheckNamedFramebufferStatus = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) glad_gl_on_demand_loader("glCheckNamedFramebufferStatus");
    return glad_glCheckNamedFramebufferStatus(framebuffer, target);
}
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC glad_glCheckNamedFramebufferStatus = glad_on_demand_impl_glCheckNamedFramebufferStatus;
static GLenum GLAD_API_PTR glad_on_demand_impl_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) {
    glad_glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) glad_gl_on_demand_loader("glCheckNamedFramebufferStatusEXT");
    return glad_glCheckNamedFramebufferStatusEXT(framebuffer, target);
}
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glad_glCheckNamedFramebufferStatusEXT = glad_on_demand_impl_glCheckNamedFramebufferStatusEXT;
static void GLAD_API_PTR glad_on_demand_impl_glClampColor(GLenum target, GLenum clamp) {
    glad_glClampColor = (PFNGLCLAMPCOLORPROC) glad_gl_on_demand_loader("glClampColor");
    glad_glClampColor(target, clamp);
}
PFNGLCLAMPCOLORPROC glad_glClampColor = glad_on_demand_impl_glClampColor;
static void GLAD_API_PTR glad_on_demand_impl_glClampColorARB(GLenum target, GLenum clamp) {
    glad_glClampColorARB = (PFNGLCLAMPCOLORARBPROC) glad_gl_on_demand_loader("glClampColorARB");
    glad_glClampColorARB(target, clamp);
}
PFNGLCLAMPCOLORARBPROC glad_glClampColorARB = glad_on_demand_impl_glClampColorARB;
static void GLAD_API_PTR glad_on_demand_impl_glClear(GLbitfield mask) {
    glad_glClear = (PFNGLCLEARPROC) glad_gl_on_demand_loader("glClear");
    glad_glClear(mask);
}
PFNGLCLEARPROC glad_glClear = glad_on_demand_impl_glClear;
static void GLAD_API_PTR glad_on_demand_impl_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glClearAccum = (PFNGLCLEARACCUMPROC) glad_gl_on_demand_loader("glClearAccum");
    glad_glClearAccum(red, green, blue, alpha);
}
PFNGLCLEARACCUMPROC glad_glClearAccum = glad_on_demand_impl_glClearAccum;
static void GLAD_API_PTR glad_on_demand_impl_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) {
    glad_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC) glad_gl_on_demand_loader("glClearBufferData");
    glad_glClearBufferData(target, internalformat, format, type, data);
}
PFNGLCLEARBUFFERDATAPROC glad_glClearBufferData = glad_on_demand_impl_glClearBufferData;
static void GLAD_API_PTR glad_on_demand_impl_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
    glad_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glClearBufferSubData");
    glad_glClearBufferSubData(target, internalformat, offset, size, format, type, data);
}
PFNGLCLEARBUFFERSUBDATAPROC glad_glClearBufferSubData = glad_on_demand_impl_glClearBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
    glad_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC) glad_gl_on_demand_loader("glClearBufferfi");
    glad_glClearBufferfi(buffer, drawbuffer, depth, stencil);
}
PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi = glad_on_demand_impl_glClearBufferfi;
static void GLAD_API_PTR glad_on_demand_impl_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) {
    glad_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC) glad_gl_on_demand_loader("glClearBufferfv");
    glad_glClearBufferfv(buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv = glad_on_demand_impl_glClearBufferfv;
static void GLAD_API_PTR glad_on_demand_impl_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) {
    glad_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC) glad_gl_on_demand_loader("glClearBufferiv");
    glad_glClearBufferiv(buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv = glad_on_demand_impl_glClearBufferiv;
static void GLAD_API_PTR glad_on_demand_impl_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) {
    glad_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC) glad_gl_on_demand_loader("glClearBufferuiv");
    glad_glClearBufferuiv(buffer, drawbuffer, value);
}
PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv = glad_on_demand_impl_glClearBufferuiv;
static void GLAD_API_PTR glad_on_demand_impl_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glClearColor = (PFNGLCLEARCOLORPROC) glad_gl_on_demand_loader("glClearColor");
    glad_glClearColor(red, green, blue, alpha);
}
PFNGLCLEARCOLORPROC glad_glClearColor = glad_on_demand_impl_glClearColor;
static void GLAD_API_PTR glad_on_demand_impl_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) {
    glad_glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC) glad_gl_on_demand_loader("glClearColorIiEXT");
    glad_glClearColorIiEXT(red, green, blue, alpha);
}
PFNGLCLEARCOLORIIEXTPROC glad_glClearColorIiEXT = glad_on_demand_impl_glClearColorIiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
    glad_glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC) glad_gl_on_demand_loader("glClearColorIuiEXT");
    glad_glClearColorIuiEXT(red, green, blue, alpha);
}
PFNGLCLEARCOLORIUIEXTPROC glad_glClearColorIuiEXT = glad_on_demand_impl_glClearColorIuiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glClearDepth(GLdouble depth) {
    glad_glClearDepth = (PFNGLCLEARDEPTHPROC) glad_gl_on_demand_loader("glClearDepth");
    glad_glClearDepth(depth);
}
PFNGLCLEARDEPTHPROC glad_glClearDepth = glad_on_demand_impl_glClearDepth;
static void GLAD_API_PTR glad_on_demand_impl_glClearDepthf(GLfloat d) {
    glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC) glad_gl_on_demand_loader("glClearDepthf");
    glad_glClearDepthf(d);
}
PFNGLCLEARDEPTHFPROC glad_glClearDepthf = glad_on_demand_impl_glClearDepthf;
static void GLAD_API_PTR glad_on_demand_impl_glClearDepthfOES(GLclampf depth) {
    glad_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC) glad_gl_on_demand_loader("glClearDepthfOES");
    glad_glClearDepthfOES(depth);
}
PFNGLCLEARDEPTHFOESPROC glad_glClearDepthfOES = glad_on_demand_impl_glClearDepthfOES;
static void GLAD_API_PTR glad_on_demand_impl_glClearIndex(GLfloat c) {
    glad_glClearIndex = (PFNGLCLEARINDEXPROC) glad_gl_on_demand_loader("glClearIndex");
    glad_glClearIndex(c);
}
PFNGLCLEARINDEXPROC glad_glClearIndex = glad_on_demand_impl_glClearIndex;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) {
    glad_glClearNamedBufferData = (PFNGLCLEARNAMEDBUFFERDATAPROC) glad_gl_on_demand_loader("glClearNamedBufferData");
    glad_glClearNamedBufferData(buffer, internalformat, format, type, data);
}
PFNGLCLEARNAMEDBUFFERDATAPROC glad_glClearNamedBufferData = glad_on_demand_impl_glClearNamedBufferData;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) {
    glad_glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC) glad_gl_on_demand_loader("glClearNamedBufferDataEXT");
    glad_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
}
PFNGLCLEARNAMEDBUFFERDATAEXTPROC glad_glClearNamedBufferDataEXT = glad_on_demand_impl_glClearNamedBufferDataEXT;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
    glad_glClearNamedBufferSubData = (PFNGLCLEARNAMEDBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glClearNamedBufferSubData");
    glad_glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
}
PFNGLCLEARNAMEDBUFFERSUBDATAPROC glad_glClearNamedBufferSubData = glad_on_demand_impl_glClearNamedBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) {
    glad_glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) glad_gl_on_demand_loader("glClearNamedBufferSubDataEXT");
    glad_glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
}
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glad_glClearNamedBufferSubDataEXT = glad_on_demand_impl_glClearNamedBufferSubDataEXT;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
    glad_glClearNamedFramebufferfi = (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) glad_gl_on_demand_loader("glClearNamedFramebufferfi");
    glad_glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
}
PFNGLCLEARNAMEDFRAMEBUFFERFIPROC glad_glClearNamedFramebufferfi = glad_on_demand_impl_glClearNamedFramebufferfi;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) {
    glad_glClearNamedFramebufferfv = (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) glad_gl_on_demand_loader("glClearNamedFramebufferfv");
    glad_glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
}
PFNGLCLEARNAMEDFRAMEBUFFERFVPROC glad_glClearNamedFramebufferfv = glad_on_demand_impl_glClearNamedFramebufferfv;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) {
    glad_glClearNamedFramebufferiv = (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) glad_gl_on_demand_loader("glClearNamedFramebufferiv");
    glad_glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
}
PFNGLCLEARNAMEDFRAMEBUFFERIVPROC glad_glClearNamedFramebufferiv = glad_on_demand_impl_glClearNamedFramebufferiv;
static void GLAD_API_PTR glad_on_demand_impl_glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) {
    glad_glClearNamedFramebufferuiv = (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) glad_gl_on_demand_loader("glClearNamedFramebufferuiv");
    glad_glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
}
PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC glad_glClearNamedFramebufferuiv = glad_on_demand_impl_glClearNamedFramebufferuiv;
static void GLAD_API_PTR glad_on_demand_impl_glClearStencil(GLint s) {
    glad_glClearStencil = (PFNGLCLEARSTENCILPROC) glad_gl_on_demand_loader("glClearStencil");
    glad_glClearStencil(s);
}
PFNGLCLEARSTENCILPROC glad_glClearStencil = glad_on_demand_impl_glClearStencil;
static void GLAD_API_PTR glad_on_demand_impl_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) {
    glad_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC) glad_gl_on_demand_loader("glClearTexImage");
    glad_glClearTexImage(texture, level, format, type, data);
}
PFNGLCLEARTEXIMAGEPROC glad_glClearTexImage = glad_on_demand_impl_glClearTexImage;
static void GLAD_API_PTR glad_on_demand_impl_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) {
    glad_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC) glad_gl_on_demand_loader("glClearTexSubImage");
    glad_glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}
PFNGLCLEARTEXSUBIMAGEPROC glad_glClearTexSubImage = glad_on_demand_impl_glClearTexSubImage;
static void GLAD_API_PTR glad_on_demand_impl_glClientActiveTexture(GLenum texture) {
    glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC) glad_gl_on_demand_loader("glClientActiveTexture");
    glad_glClientActiveTexture(texture);
}
PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture = glad_on_demand_impl_glClientActiveTexture;
static void GLAD_API_PTR glad_on_demand_impl_glClientActiveTextureARB(GLenum texture) {
    glad_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC) glad_gl_on_demand_loader("glClientActiveTextureARB");
    glad_glClientActiveTextureARB(texture);
}
PFNGLCLIENTACTIVETEXTUREARBPROC glad_glClientActiveTextureARB = glad_on_demand_impl_glClientActiveTextureARB;
static void GLAD_API_PTR glad_on_demand_impl_glClientAttribDefaultEXT(GLbitfield mask) {
    glad_glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC) glad_gl_on_demand_loader("glClientAttribDefaultEXT");
    glad_glClientAttribDefaultEXT(mask);
}
PFNGLCLIENTATTRIBDEFAULTEXTPROC glad_glClientAttribDefaultEXT = glad_on_demand_impl_glClientAttribDefaultEXT;
static GLenum GLAD_API_PTR glad_on_demand_impl_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
    glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC) glad_gl_on_demand_loader("glClientWaitSync");
    return glad_glClientWaitSync(sync, flags, timeout);
}
PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync = glad_on_demand_impl_glClientWaitSync;
static void GLAD_API_PTR glad_on_demand_impl_glClipControl(GLenum origin, GLenum depth) {
    glad_glClipControl = (PFNGLCLIPCONTROLPROC) glad_gl_on_demand_loader("glClipControl");
    glad_glClipControl(origin, depth);
}
PFNGLCLIPCONTROLPROC glad_glClipControl = glad_on_demand_impl_glClipControl;
static void GLAD_API_PTR glad_on_demand_impl_glClipPlane(GLenum plane, const GLdouble * equation) {
    glad_glClipPlane = (PFNGLCLIPPLANEPROC) glad_gl_on_demand_loader("glClipPlane");
    glad_glClipPlane(plane, equation);
}
PFNGLCLIPPLANEPROC glad_glClipPlane = glad_on_demand_impl_glClipPlane;
static void GLAD_API_PTR glad_on_demand_impl_glClipPlanefOES(GLenum plane, const GLfloat * equation) {
    glad_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC) glad_gl_on_demand_loader("glClipPlanefOES");
    glad_glClipPlanefOES(plane, equation);
}
PFNGLCLIPPLANEFOESPROC glad_glClipPlanefOES = glad_on_demand_impl_glClipPlanefOES;
static void GLAD_API_PTR glad_on_demand_impl_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
    glad_glColor3b = (PFNGLCOLOR3BPROC) glad_gl_on_demand_loader("glColor3b");
    glad_glColor3b(red, green, blue);
}
PFNGLCOLOR3BPROC glad_glColor3b = glad_on_demand_impl_glColor3b;
static void GLAD_API_PTR glad_on_demand_impl_glColor3bv(const GLbyte * v) {
    glad_glColor3bv = (PFNGLCOLOR3BVPROC) glad_gl_on_demand_loader("glColor3bv");
    glad_glColor3bv(v);
}
PFNGLCOLOR3BVPROC glad_glColor3bv = glad_on_demand_impl_glColor3bv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
    glad_glColor3d = (PFNGLCOLOR3DPROC) glad_gl_on_demand_loader("glColor3d");
    glad_glColor3d(red, green, blue);
}
PFNGLCOLOR3DPROC glad_glColor3d = glad_on_demand_impl_glColor3d;
static void GLAD_API_PTR glad_on_demand_impl_glColor3dv(const GLdouble * v) {
    glad_glColor3dv = (PFNGLCOLOR3DVPROC) glad_gl_on_demand_loader("glColor3dv");
    glad_glColor3dv(v);
}
PFNGLCOLOR3DVPROC glad_glColor3dv = glad_on_demand_impl_glColor3dv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
    glad_glColor3f = (PFNGLCOLOR3FPROC) glad_gl_on_demand_loader("glColor3f");
    glad_glColor3f(red, green, blue);
}
PFNGLCOLOR3FPROC glad_glColor3f = glad_on_demand_impl_glColor3f;
static void GLAD_API_PTR glad_on_demand_impl_glColor3fv(const GLfloat * v) {
    glad_glColor3fv = (PFNGLCOLOR3FVPROC) glad_gl_on_demand_loader("glColor3fv");
    glad_glColor3fv(v);
}
PFNGLCOLOR3FVPROC glad_glColor3fv = glad_on_demand_impl_glColor3fv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3i(GLint red, GLint green, GLint blue) {
    glad_glColor3i = (PFNGLCOLOR3IPROC) glad_gl_on_demand_loader("glColor3i");
    glad_glColor3i(red, green, blue);
}
PFNGLCOLOR3IPROC glad_glColor3i = glad_on_demand_impl_glColor3i;
static void GLAD_API_PTR glad_on_demand_impl_glColor3iv(const GLint * v) {
    glad_glColor3iv = (PFNGLCOLOR3IVPROC) glad_gl_on_demand_loader("glColor3iv");
    glad_glColor3iv(v);
}
PFNGLCOLOR3IVPROC glad_glColor3iv = glad_on_demand_impl_glColor3iv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3s(GLshort red, GLshort green, GLshort blue) {
    glad_glColor3s = (PFNGLCOLOR3SPROC) glad_gl_on_demand_loader("glColor3s");
    glad_glColor3s(red, green, blue);
}
PFNGLCOLOR3SPROC glad_glColor3s = glad_on_demand_impl_glColor3s;
static void GLAD_API_PTR glad_on_demand_impl_glColor3sv(const GLshort * v) {
    glad_glColor3sv = (PFNGLCOLOR3SVPROC) glad_gl_on_demand_loader("glColor3sv");
    glad_glColor3sv(v);
}
PFNGLCOLOR3SVPROC glad_glColor3sv = glad_on_demand_impl_glColor3sv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
    glad_glColor3ub = (PFNGLCOLOR3UBPROC) glad_gl_on_demand_loader("glColor3ub");
    glad_glColor3ub(red, green, blue);
}
PFNGLCOLOR3UBPROC glad_glColor3ub = glad_on_demand_impl_glColor3ub;
static void GLAD_API_PTR glad_on_demand_impl_glColor3ubv(const GLubyte * v) {
    glad_glColor3ubv = (PFNGLCOLOR3UBVPROC) glad_gl_on_demand_loader("glColor3ubv");
    glad_glColor3ubv(v);
}
PFNGLCOLOR3UBVPROC glad_glColor3ubv = glad_on_demand_impl_glColor3ubv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3ui(GLuint red, GLuint green, GLuint blue) {
    glad_glColor3ui = (PFNGLCOLOR3UIPROC) glad_gl_on_demand_loader("glColor3ui");
    glad_glColor3ui(red, green, blue);
}
PFNGLCOLOR3UIPROC glad_glColor3ui = glad_on_demand_impl_glColor3ui;
static void GLAD_API_PTR glad_on_demand_impl_glColor3uiv(const GLuint * v) {
    glad_glColor3uiv = (PFNGLCOLOR3UIVPROC) glad_gl_on_demand_loader("glColor3uiv");
    glad_glColor3uiv(v);
}
PFNGLCOLOR3UIVPROC glad_glColor3uiv = glad_on_demand_impl_glColor3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3us(GLushort red, GLushort green, GLushort blue) {
    glad_glColor3us = (PFNGLCOLOR3USPROC) glad_gl_on_demand_loader("glColor3us");
    glad_glColor3us(red, green, blue);
}
PFNGLCOLOR3USPROC glad_glColor3us = glad_on_demand_impl_glColor3us;
static void GLAD_API_PTR glad_on_demand_impl_glColor3usv(const GLushort * v) {
    glad_glColor3usv = (PFNGLCOLOR3USVPROC) glad_gl_on_demand_loader("glColor3usv");
    glad_glColor3usv(v);
}
PFNGLCOLOR3USVPROC glad_glColor3usv = glad_on_demand_impl_glColor3usv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
    glad_glColor4b = (PFNGLCOLOR4BPROC) glad_gl_on_demand_loader("glColor4b");
    glad_glColor4b(red, green, blue, alpha);
}
PFNGLCOLOR4BPROC glad_glColor4b = glad_on_demand_impl_glColor4b;
static void GLAD_API_PTR glad_on_demand_impl_glColor4bv(const GLbyte * v) {
    glad_glColor4bv = (PFNGLCOLOR4BVPROC) glad_gl_on_demand_loader("glColor4bv");
    glad_glColor4bv(v);
}
PFNGLCOLOR4BVPROC glad_glColor4bv = glad_on_demand_impl_glColor4bv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
    glad_glColor4d = (PFNGLCOLOR4DPROC) glad_gl_on_demand_loader("glColor4d");
    glad_glColor4d(red, green, blue, alpha);
}
PFNGLCOLOR4DPROC glad_glColor4d = glad_on_demand_impl_glColor4d;
static void GLAD_API_PTR glad_on_demand_impl_glColor4dv(const GLdouble * v) {
    glad_glColor4dv = (PFNGLCOLOR4DVPROC) glad_gl_on_demand_loader("glColor4dv");
    glad_glColor4dv(v);
}
PFNGLCOLOR4DVPROC glad_glColor4dv = glad_on_demand_impl_glColor4dv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glColor4f = (PFNGLCOLOR4FPROC) glad_gl_on_demand_loader("glColor4f");
    glad_glColor4f(red, green, blue, alpha);
}
PFNGLCOLOR4FPROC glad_glColor4f = glad_on_demand_impl_glColor4f;
static void GLAD_API_PTR glad_on_demand_impl_glColor4fv(const GLfloat * v) {
    glad_glColor4fv = (PFNGLCOLOR4FVPROC) glad_gl_on_demand_loader("glColor4fv");
    glad_glColor4fv(v);
}
PFNGLCOLOR4FVPROC glad_glColor4fv = glad_on_demand_impl_glColor4fv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
    glad_glColor4i = (PFNGLCOLOR4IPROC) glad_gl_on_demand_loader("glColor4i");
    glad_glColor4i(red, green, blue, alpha);
}
PFNGLCOLOR4IPROC glad_glColor4i = glad_on_demand_impl_glColor4i;
static void GLAD_API_PTR glad_on_demand_impl_glColor4iv(const GLint * v) {
    glad_glColor4iv = (PFNGLCOLOR4IVPROC) glad_gl_on_demand_loader("glColor4iv");
    glad_glColor4iv(v);
}
PFNGLCOLOR4IVPROC glad_glColor4iv = glad_on_demand_impl_glColor4iv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
    glad_glColor4s = (PFNGLCOLOR4SPROC) glad_gl_on_demand_loader("glColor4s");
    glad_glColor4s(red, green, blue, alpha);
}
PFNGLCOLOR4SPROC glad_glColor4s = glad_on_demand_impl_glColor4s;
static void GLAD_API_PTR glad_on_demand_impl_glColor4sv(const GLshort * v) {
    glad_glColor4sv = (PFNGLCOLOR4SVPROC) glad_gl_on_demand_loader("glColor4sv");
    glad_glColor4sv(v);
}
PFNGLCOLOR4SVPROC glad_glColor4sv = glad_on_demand_impl_glColor4sv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
    glad_glColor4ub = (PFNGLCOLOR4UBPROC) glad_gl_on_demand_loader("glColor4ub");
    glad_glColor4ub(red, green, blue, alpha);
}
PFNGLCOLOR4UBPROC glad_glColor4ub = glad_on_demand_impl_glColor4ub;
static void GLAD_API_PTR glad_on_demand_impl_glColor4ubv(const GLubyte * v) {
    glad_glColor4ubv = (PFNGLCOLOR4UBVPROC) glad_gl_on_demand_loader("glColor4ubv");
    glad_glColor4ubv(v);
}
PFNGLCOLOR4UBVPROC glad_glColor4ubv = glad_on_demand_impl_glColor4ubv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
    glad_glColor4ui = (PFNGLCOLOR4UIPROC) glad_gl_on_demand_loader("glColor4ui");
    glad_glColor4ui(red, green, blue, alpha);
}
PFNGLCOLOR4UIPROC glad_glColor4ui = glad_on_demand_impl_glColor4ui;
static void GLAD_API_PTR glad_on_demand_impl_glColor4uiv(const GLuint * v) {
    glad_glColor4uiv = (PFNGLCOLOR4UIVPROC) glad_gl_on_demand_loader("glColor4uiv");
    glad_glColor4uiv(v);
}
PFNGLCOLOR4UIVPROC glad_glColor4uiv = glad_on_demand_impl_glColor4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
    glad_glColor4us = (PFNGLCOLOR4USPROC) glad_gl_on_demand_loader("glColor4us");
    glad_glColor4us(red, green, blue, alpha);
}
PFNGLCOLOR4USPROC glad_glColor4us = glad_on_demand_impl_glColor4us;
static void GLAD_API_PTR glad_on_demand_impl_glColor4usv(const GLushort * v) {
    glad_glColor4usv = (PFNGLCOLOR4USVPROC) glad_gl_on_demand_loader("glColor4usv");
    glad_glColor4usv(v);
}
PFNGLCOLOR4USVPROC glad_glColor4usv = glad_on_demand_impl_glColor4usv;
static void GLAD_API_PTR glad_on_demand_impl_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
    glad_glColorMask = (PFNGLCOLORMASKPROC) glad_gl_on_demand_loader("glColorMask");
    glad_glColorMask(red, green, blue, alpha);
}
PFNGLCOLORMASKPROC glad_glColorMask = glad_on_demand_impl_glColorMask;
static void GLAD_API_PTR glad_on_demand_impl_glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
    glad_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC) glad_gl_on_demand_loader("glColorMaskIndexedEXT");
    glad_glColorMaskIndexedEXT(index, r, g, b, a);
}
PFNGLCOLORMASKINDEXEDEXTPROC glad_glColorMaskIndexedEXT = glad_on_demand_impl_glColorMaskIndexedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
    glad_glColorMaski = (PFNGLCOLORMASKIPROC) glad_gl_on_demand_loader("glColorMaski");
    glad_glColorMaski(index, r, g, b, a);
}
PFNGLCOLORMASKIPROC glad_glColorMaski = glad_on_demand_impl_glColorMaski;
static void GLAD_API_PTR glad_on_demand_impl_glColorMaterial(GLenum face, GLenum mode) {
    glad_glColorMaterial = (PFNGLCOLORMATERIALPROC) glad_gl_on_demand_loader("glColorMaterial");
    glad_glColorMaterial(face, mode);
}
PFNGLCOLORMATERIALPROC glad_glColorMaterial = glad_on_demand_impl_glColorMaterial;
static void GLAD_API_PTR glad_on_demand_impl_glColorP3ui(GLenum type, GLuint color) {
    glad_glColorP3ui = (PFNGLCOLORP3UIPROC) glad_gl_on_demand_loader("glColorP3ui");
    glad_glColorP3ui(type, color);
}
PFNGLCOLORP3UIPROC glad_glColorP3ui = glad_on_demand_impl_glColorP3ui;
static void GLAD_API_PTR glad_on_demand_impl_glColorP3uiv(GLenum type, const GLuint * color) {
    glad_glColorP3uiv = (PFNGLCOLORP3UIVPROC) glad_gl_on_demand_loader("glColorP3uiv");
    glad_glColorP3uiv(type, color);
}
PFNGLCOLORP3UIVPROC glad_glColorP3uiv = glad_on_demand_impl_glColorP3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glColorP4ui(GLenum type, GLuint color) {
    glad_glColorP4ui = (PFNGLCOLORP4UIPROC) glad_gl_on_demand_loader("glColorP4ui");
    glad_glColorP4ui(type, color);
}
PFNGLCOLORP4UIPROC glad_glColorP4ui = glad_on_demand_impl_glColorP4ui;
static void GLAD_API_PTR glad_on_demand_impl_glColorP4uiv(GLenum type, const GLuint * color) {
    glad_glColorP4uiv = (PFNGLCOLORP4UIVPROC) glad_gl_on_demand_loader("glColorP4uiv");
    glad_glColorP4uiv(type, color);
}
PFNGLCOLORP4UIVPROC glad_glColorP4uiv = glad_on_demand_impl_glColorP4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glColorPointer = (PFNGLCOLORPOINTERPROC) glad_gl_on_demand_loader("glColorPointer");
    glad_glColorPointer(size, type, stride, pointer);
}
PFNGLCOLORPOINTERPROC glad_glColorPointer = glad_on_demand_impl_glColorPointer;
static void GLAD_API_PTR glad_on_demand_impl_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
    glad_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC) glad_gl_on_demand_loader("glColorPointerEXT");
    glad_glColorPointerEXT(size, type, stride, count, pointer);
}
PFNGLCOLORPOINTEREXTPROC glad_glColorPointerEXT = glad_on_demand_impl_glColorPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) {
    glad_glColorSubTable = (PFNGLCOLORSUBTABLEPROC) glad_gl_on_demand_loader("glColorSubTable");
    glad_glColorSubTable(target, start, count, format, type, data);
}
PFNGLCOLORSUBTABLEPROC glad_glColorSubTable = glad_on_demand_impl_glColorSubTable;
static void GLAD_API_PTR glad_on_demand_impl_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) {
    glad_glColorTable = (PFNGLCOLORTABLEPROC) glad_gl_on_demand_loader("glColorTable");
    glad_glColorTable(target, internalformat, width, format, type, table);
}
PFNGLCOLORTABLEPROC glad_glColorTable = glad_on_demand_impl_glColorTable;
static void GLAD_API_PTR glad_on_demand_impl_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
    glad_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC) glad_gl_on_demand_loader("glColorTableParameterfv");
    glad_glColorTableParameterfv(target, pname, params);
}
PFNGLCOLORTABLEPARAMETERFVPROC glad_glColorTableParameterfv = glad_on_demand_impl_glColorTableParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) {
    glad_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC) glad_gl_on_demand_loader("glColorTableParameteriv");
    glad_glColorTableParameteriv(target, pname, params);
}
PFNGLCOLORTABLEPARAMETERIVPROC glad_glColorTableParameteriv = glad_on_demand_impl_glColorTableParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glCompileShader(GLuint shader) {
    glad_glCompileShader = (PFNGLCOMPILESHADERPROC) glad_gl_on_demand_loader("glCompileShader");
    glad_glCompileShader(shader);
}
PFNGLCOMPILESHADERPROC glad_glCompileShader = glad_on_demand_impl_glCompileShader;
static void GLAD_API_PTR glad_on_demand_impl_glCompileShaderARB(GLhandleARB shaderObj) {
    glad_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC) glad_gl_on_demand_loader("glCompileShaderARB");
    glad_glCompileShaderARB(shaderObj);
}
PFNGLCOMPILESHADERARBPROC glad_glCompileShaderARB = glad_on_demand_impl_glCompileShaderARB;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) {
    glad_glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCompressedMultiTexImage1DEXT");
    glad_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
}
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glad_glCompressedMultiTexImage1DEXT = glad_on_demand_impl_glCompressedMultiTexImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) {
    glad_glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCompressedMultiTexImage2DEXT");
    glad_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glad_glCompressedMultiTexImage2DEXT = glad_on_demand_impl_glCompressedMultiTexImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) {
    glad_glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) glad_gl_on_demand_loader("glCompressedMultiTexImage3DEXT");
    glad_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glad_glCompressedMultiTexImage3DEXT = glad_on_demand_impl_glCompressedMultiTexImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) {
    glad_glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCompressedMultiTexSubImage1DEXT");
    glad_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
}
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glad_glCompressedMultiTexSubImage1DEXT = glad_on_demand_impl_glCompressedMultiTexSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) {
    glad_glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCompressedMultiTexSubImage2DEXT");
    glad_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glad_glCompressedMultiTexSubImage2DEXT = glad_on_demand_impl_glCompressedMultiTexSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) {
    glad_glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glCompressedMultiTexSubImage3DEXT");
    glad_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glad_glCompressedMultiTexSubImage3DEXT = glad_on_demand_impl_glCompressedMultiTexSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
    glad_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC) glad_gl_on_demand_loader("glCompressedTexImage1D");
    glad_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D = glad_on_demand_impl_glCompressedTexImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
    glad_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) glad_gl_on_demand_loader("glCompressedTexImage1DARB");
    glad_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glad_glCompressedTexImage1DARB = glad_on_demand_impl_glCompressedTexImage1DARB;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
    glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC) glad_gl_on_demand_loader("glCompressedTexImage2D");
    glad_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D = glad_on_demand_impl_glCompressedTexImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
    glad_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) glad_gl_on_demand_loader("glCompressedTexImage2DARB");
    glad_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glad_glCompressedTexImage2DARB = glad_on_demand_impl_glCompressedTexImage2DARB;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
    glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC) glad_gl_on_demand_loader("glCompressedTexImage3D");
    glad_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D = glad_on_demand_impl_glCompressedTexImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
    glad_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) glad_gl_on_demand_loader("glCompressedTexImage3DARB");
    glad_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
}
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glad_glCompressedTexImage3DARB = glad_on_demand_impl_glCompressedTexImage3DARB;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) glad_gl_on_demand_loader("glCompressedTexSubImage1D");
    glad_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D = glad_on_demand_impl_glCompressedTexSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) glad_gl_on_demand_loader("glCompressedTexSubImage1DARB");
    glad_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glad_glCompressedTexSubImage1DARB = glad_on_demand_impl_glCompressedTexSubImage1DARB;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) glad_gl_on_demand_loader("glCompressedTexSubImage2D");
    glad_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D = glad_on_demand_impl_glCompressedTexSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) glad_gl_on_demand_loader("glCompressedTexSubImage2DARB");
    glad_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glad_glCompressedTexSubImage2DARB = glad_on_demand_impl_glCompressedTexSubImage2DARB;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) glad_gl_on_demand_loader("glCompressedTexSubImage3D");
    glad_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D = glad_on_demand_impl_glCompressedTexSubImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) glad_gl_on_demand_loader("glCompressedTexSubImage3DARB");
    glad_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glad_glCompressedTexSubImage3DARB = glad_on_demand_impl_glCompressedTexSubImage3DARB;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) {
    glad_glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCompressedTextureImage1DEXT");
    glad_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
}
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glad_glCompressedTextureImage1DEXT = glad_on_demand_impl_glCompressedTextureImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) {
    glad_glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCompressedTextureImage2DEXT");
    glad_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
}
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glad_glCompressedTextureImage2DEXT = glad_on_demand_impl_glCompressedTextureImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) {
    glad_glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) glad_gl_on_demand_loader("glCompressedTextureImage3DEXT");
    glad_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glad_glCompressedTextureImage3DEXT = glad_on_demand_impl_glCompressedTextureImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTextureSubImage1D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) glad_gl_on_demand_loader("glCompressedTextureSubImage1D");
    glad_glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC glad_glCompressedTextureSubImage1D = glad_on_demand_impl_glCompressedTextureSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) {
    glad_glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCompressedTextureSubImage1DEXT");
    glad_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glad_glCompressedTextureSubImage1DEXT = glad_on_demand_impl_glCompressedTextureSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTextureSubImage2D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) glad_gl_on_demand_loader("glCompressedTextureSubImage2D");
    glad_glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC glad_glCompressedTextureSubImage2D = glad_on_demand_impl_glCompressedTextureSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) {
    glad_glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCompressedTextureSubImage2DEXT");
    glad_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glad_glCompressedTextureSubImage2DEXT = glad_on_demand_impl_glCompressedTextureSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
    glad_glCompressedTextureSubImage3D = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) glad_gl_on_demand_loader("glCompressedTextureSubImage3D");
    glad_glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC glad_glCompressedTextureSubImage3D = glad_on_demand_impl_glCompressedTextureSubImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) {
    glad_glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glCompressedTextureSubImage3DEXT");
    glad_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glad_glCompressedTextureSubImage3DEXT = glad_on_demand_impl_glCompressedTextureSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) {
    glad_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC) glad_gl_on_demand_loader("glConvolutionFilter1D");
    glad_glConvolutionFilter1D(target, internalformat, width, format, type, image);
}
PFNGLCONVOLUTIONFILTER1DPROC glad_glConvolutionFilter1D = glad_on_demand_impl_glConvolutionFilter1D;
static void GLAD_API_PTR glad_on_demand_impl_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) {
    glad_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC) glad_gl_on_demand_loader("glConvolutionFilter2D");
    glad_glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
}
PFNGLCONVOLUTIONFILTER2DPROC glad_glConvolutionFilter2D = glad_on_demand_impl_glConvolutionFilter2D;
static void GLAD_API_PTR glad_on_demand_impl_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {
    glad_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC) glad_gl_on_demand_loader("glConvolutionParameterf");
    glad_glConvolutionParameterf(target, pname, params);
}
PFNGLCONVOLUTIONPARAMETERFPROC glad_glConvolutionParameterf = glad_on_demand_impl_glConvolutionParameterf;
static void GLAD_API_PTR glad_on_demand_impl_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
    glad_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC) glad_gl_on_demand_loader("glConvolutionParameterfv");
    glad_glConvolutionParameterfv(target, pname, params);
}
PFNGLCONVOLUTIONPARAMETERFVPROC glad_glConvolutionParameterfv = glad_on_demand_impl_glConvolutionParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {
    glad_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC) glad_gl_on_demand_loader("glConvolutionParameteri");
    glad_glConvolutionParameteri(target, pname, params);
}
PFNGLCONVOLUTIONPARAMETERIPROC glad_glConvolutionParameteri = glad_on_demand_impl_glConvolutionParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) {
    glad_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC) glad_gl_on_demand_loader("glConvolutionParameteriv");
    glad_glConvolutionParameteriv(target, pname, params);
}
PFNGLCONVOLUTIONPARAMETERIVPROC glad_glConvolutionParameteriv = glad_on_demand_impl_glConvolutionParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glCopyBufferSubData");
    glad_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
}
PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData = glad_on_demand_impl_glCopyBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
    glad_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC) glad_gl_on_demand_loader("glCopyColorSubTable");
    glad_glCopyColorSubTable(target, start, x, y, width);
}
PFNGLCOPYCOLORSUBTABLEPROC glad_glCopyColorSubTable = glad_on_demand_impl_glCopyColorSubTable;
static void GLAD_API_PTR glad_on_demand_impl_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
    glad_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC) glad_gl_on_demand_loader("glCopyColorTable");
    glad_glCopyColorTable(target, internalformat, x, y, width);
}
PFNGLCOPYCOLORTABLEPROC glad_glCopyColorTable = glad_on_demand_impl_glCopyColorTable;
static void GLAD_API_PTR glad_on_demand_impl_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
    glad_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC) glad_gl_on_demand_loader("glCopyConvolutionFilter1D");
    glad_glCopyConvolutionFilter1D(target, internalformat, x, y, width);
}
PFNGLCOPYCONVOLUTIONFILTER1DPROC glad_glCopyConvolutionFilter1D = glad_on_demand_impl_glCopyConvolutionFilter1D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC) glad_gl_on_demand_loader("glCopyConvolutionFilter2D");
    glad_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
}
PFNGLCOPYCONVOLUTIONFILTER2DPROC glad_glCopyConvolutionFilter2D = glad_on_demand_impl_glCopyConvolutionFilter2D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
    glad_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC) glad_gl_on_demand_loader("glCopyImageSubData");
    glad_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
PFNGLCOPYIMAGESUBDATAPROC glad_glCopyImageSubData = glad_on_demand_impl_glCopyImageSubData;
static void GLAD_API_PTR glad_on_demand_impl_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCopyMultiTexImage1DEXT");
    glad_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
}
PFNGLCOPYMULTITEXIMAGE1DEXTPROC glad_glCopyMultiTexImage1DEXT = glad_on_demand_impl_glCopyMultiTexImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCopyMultiTexImage2DEXT");
    glad_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
}
PFNGLCOPYMULTITEXIMAGE2DEXTPROC glad_glCopyMultiTexImage2DEXT = glad_on_demand_impl_glCopyMultiTexImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCopyMultiTexSubImage1DEXT");
    glad_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
}
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glad_glCopyMultiTexSubImage1DEXT = glad_on_demand_impl_glCopyMultiTexSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCopyMultiTexSubImage2DEXT");
    glad_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glad_glCopyMultiTexSubImage2DEXT = glad_on_demand_impl_glCopyMultiTexSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glCopyMultiTexSubImage3DEXT");
    glad_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glad_glCopyMultiTexSubImage3DEXT = glad_on_demand_impl_glCopyMultiTexSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    glad_glCopyNamedBufferSubData = (PFNGLCOPYNAMEDBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glCopyNamedBufferSubData");
    glad_glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
PFNGLCOPYNAMEDBUFFERSUBDATAPROC glad_glCopyNamedBufferSubData = glad_on_demand_impl_glCopyNamedBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
    glad_glCopyPixels = (PFNGLCOPYPIXELSPROC) glad_gl_on_demand_loader("glCopyPixels");
    glad_glCopyPixels(x, y, width, height, type);
}
PFNGLCOPYPIXELSPROC glad_glCopyPixels = glad_on_demand_impl_glCopyPixels;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) glad_gl_on_demand_loader("glCopyTexImage1D");
    glad_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}
PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D = glad_on_demand_impl_glCopyTexImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCopyTexImage1DEXT");
    glad_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
}
PFNGLCOPYTEXIMAGE1DEXTPROC glad_glCopyTexImage1DEXT = glad_on_demand_impl_glCopyTexImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) glad_gl_on_demand_loader("glCopyTexImage2D");
    glad_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}
PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D = glad_on_demand_impl_glCopyTexImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCopyTexImage2DEXT");
    glad_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
}
PFNGLCOPYTEXIMAGE2DEXTPROC glad_glCopyTexImage2DEXT = glad_on_demand_impl_glCopyTexImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) glad_gl_on_demand_loader("glCopyTexSubImage1D");
    glad_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}
PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D = glad_on_demand_impl_glCopyTexSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCopyTexSubImage1DEXT");
    glad_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
}
PFNGLCOPYTEXSUBIMAGE1DEXTPROC glad_glCopyTexSubImage1DEXT = glad_on_demand_impl_glCopyTexSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) glad_gl_on_demand_loader("glCopyTexSubImage2D");
    glad_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D = glad_on_demand_impl_glCopyTexSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCopyTexSubImage2DEXT");
    glad_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE2DEXTPROC glad_glCopyTexSubImage2DEXT = glad_on_demand_impl_glCopyTexSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC) glad_gl_on_demand_loader("glCopyTexSubImage3D");
    glad_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D = glad_on_demand_impl_glCopyTexSubImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glCopyTexSubImage3DEXT");
    glad_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE3DEXTPROC glad_glCopyTexSubImage3DEXT = glad_on_demand_impl_glCopyTexSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCopyTextureImage1DEXT");
    glad_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
}
PFNGLCOPYTEXTUREIMAGE1DEXTPROC glad_glCopyTextureImage1DEXT = glad_on_demand_impl_glCopyTextureImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCopyTextureImage2DEXT");
    glad_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
}
PFNGLCOPYTEXTUREIMAGE2DEXTPROC glad_glCopyTextureImage2DEXT = glad_on_demand_impl_glCopyTextureImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTextureSubImage1D = (PFNGLCOPYTEXTURESUBIMAGE1DPROC) glad_gl_on_demand_loader("glCopyTextureSubImage1D");
    glad_glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
}
PFNGLCOPYTEXTURESUBIMAGE1DPROC glad_glCopyTextureSubImage1D = glad_on_demand_impl_glCopyTextureSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glCopyTextureSubImage1DEXT");
    glad_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
}
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glad_glCopyTextureSubImage1DEXT = glad_on_demand_impl_glCopyTextureSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage2D = (PFNGLCOPYTEXTURESUBIMAGE2DPROC) glad_gl_on_demand_loader("glCopyTextureSubImage2D");
    glad_glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYTEXTURESUBIMAGE2DPROC glad_glCopyTextureSubImage2D = glad_on_demand_impl_glCopyTextureSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glCopyTextureSubImage2DEXT");
    glad_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glad_glCopyTextureSubImage2DEXT = glad_on_demand_impl_glCopyTextureSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage3D = (PFNGLCOPYTEXTURESUBIMAGE3DPROC) glad_gl_on_demand_loader("glCopyTextureSubImage3D");
    glad_glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}
PFNGLCOPYTEXTURESUBIMAGE3DPROC glad_glCopyTextureSubImage3D = glad_on_demand_impl_glCopyTextureSubImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glCopyTextureSubImage3DEXT");
    glad_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glad_glCopyTextureSubImage3DEXT = glad_on_demand_impl_glCopyTextureSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glCreateBuffers(GLsizei n, GLuint * buffers) {
    glad_glCreateBuffers = (PFNGLCREATEBUFFERSPROC) glad_gl_on_demand_loader("glCreateBuffers");
    glad_glCreateBuffers(n, buffers);
}
PFNGLCREATEBUFFERSPROC glad_glCreateBuffers = glad_on_demand_impl_glCreateBuffers;
static void GLAD_API_PTR glad_on_demand_impl_glCreateFramebuffers(GLsizei n, GLuint * framebuffers) {
    glad_glCreateFramebuffers = (PFNGLCREATEFRAMEBUFFERSPROC) glad_gl_on_demand_loader("glCreateFramebuffers");
    glad_glCreateFramebuffers(n, framebuffers);
}
PFNGLCREATEFRAMEBUFFERSPROC glad_glCreateFramebuffers = glad_on_demand_impl_glCreateFramebuffers;
static GLuint GLAD_API_PTR glad_on_demand_impl_glCreateProgram(void) {
    glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC) glad_gl_on_demand_loader("glCreateProgram");
    return glad_glCreateProgram();
}
PFNGLCREATEPROGRAMPROC glad_glCreateProgram = glad_on_demand_impl_glCreateProgram;
static GLhandleARB GLAD_API_PTR glad_on_demand_impl_glCreateProgramObjectARB(void) {
    glad_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC) glad_gl_on_demand_loader("glCreateProgramObjectARB");
    return glad_glCreateProgramObjectARB();
}
PFNGLCREATEPROGRAMOBJECTARBPROC glad_glCreateProgramObjectARB = glad_on_demand_impl_glCreateProgramObjectARB;
static void GLAD_API_PTR glad_on_demand_impl_glCreateProgramPipelines(GLsizei n, GLuint * pipelines) {
    glad_glCreateProgramPipelines = (PFNGLCREATEPROGRAMPIPELINESPROC) glad_gl_on_demand_loader("glCreateProgramPipelines");
    glad_glCreateProgramPipelines(n, pipelines);
}
PFNGLCREATEPROGRAMPIPELINESPROC glad_glCreateProgramPipelines = glad_on_demand_impl_glCreateProgramPipelines;
static void GLAD_API_PTR glad_on_demand_impl_glCreateQueries(GLenum target, GLsizei n, GLuint * ids) {
    glad_glCreateQueries = (PFNGLCREATEQUERIESPROC) glad_gl_on_demand_loader("glCreateQueries");
    glad_glCreateQueries(target, n, ids);
}
PFNGLCREATEQUERIESPROC glad_glCreateQueries = glad_on_demand_impl_glCreateQueries;
static void GLAD_API_PTR glad_on_demand_impl_glCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) {
    glad_glCreateRenderbuffers = (PFNGLCREATERENDERBUFFERSPROC) glad_gl_on_demand_loader("glCreateRenderbuffers");
    glad_glCreateRenderbuffers(n, renderbuffers);
}
PFNGLCREATERENDERBUFFERSPROC glad_glCreateRenderbuffers = glad_on_demand_impl_glCreateRenderbuffers;
static void GLAD_API_PTR glad_on_demand_impl_glCreateSamplers(GLsizei n, GLuint * samplers) {
    glad_glCreateSamplers = (PFNGLCREATESAMPLERSPROC) glad_gl_on_demand_loader("glCreateSamplers");
    glad_glCreateSamplers(n, samplers);
}
PFNGLCREATESAMPLERSPROC glad_glCreateSamplers = glad_on_demand_impl_glCreateSamplers;
static GLuint GLAD_API_PTR glad_on_demand_impl_glCreateShader(GLenum type) {
    glad_glCreateShader = (PFNGLCREATESHADERPROC) glad_gl_on_demand_loader("glCreateShader");
    return glad_glCreateShader(type);
}
PFNGLCREATESHADERPROC glad_glCreateShader = glad_on_demand_impl_glCreateShader;
static GLhandleARB GLAD_API_PTR glad_on_demand_impl_glCreateShaderObjectARB(GLenum shaderType) {
    glad_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC) glad_gl_on_demand_loader("glCreateShaderObjectARB");
    return glad_glCreateShaderObjectARB(shaderType);
}
PFNGLCREATESHADEROBJECTARBPROC glad_glCreateShaderObjectARB = glad_on_demand_impl_glCreateShaderObjectARB;
static GLuint GLAD_API_PTR glad_on_demand_impl_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) {
    glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC) glad_gl_on_demand_loader("glCreateShaderProgramv");
    return glad_glCreateShaderProgramv(type, count, strings);
}
PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv = glad_on_demand_impl_glCreateShaderProgramv;
static void GLAD_API_PTR glad_on_demand_impl_glCreateTextures(GLenum target, GLsizei n, GLuint * textures) {
    glad_glCreateTextures = (PFNGLCREATETEXTURESPROC) glad_gl_on_demand_loader("glCreateTextures");
    glad_glCreateTextures(target, n, textures);
}
PFNGLCREATETEXTURESPROC glad_glCreateTextures = glad_on_demand_impl_glCreateTextures;
static void GLAD_API_PTR glad_on_demand_impl_glCreateTransformFeedbacks(GLsizei n, GLuint * ids) {
    glad_glCreateTransformFeedbacks = (PFNGLCREATETRANSFORMFEEDBACKSPROC) glad_gl_on_demand_loader("glCreateTransformFeedbacks");
    glad_glCreateTransformFeedbacks(n, ids);
}
PFNGLCREATETRANSFORMFEEDBACKSPROC glad_glCreateTransformFeedbacks = glad_on_demand_impl_glCreateTransformFeedbacks;
static void GLAD_API_PTR glad_on_demand_impl_glCreateVertexArrays(GLsizei n, GLuint * arrays) {
    glad_glCreateVertexArrays = (PFNGLCREATEVERTEXARRAYSPROC) glad_gl_on_demand_loader("glCreateVertexArrays");
    glad_glCreateVertexArrays(n, arrays);
}
PFNGLCREATEVERTEXARRAYSPROC glad_glCreateVertexArrays = glad_on_demand_impl_glCreateVertexArrays;
static void GLAD_API_PTR glad_on_demand_impl_glCullFace(GLenum mode) {
    glad_glCullFace = (PFNGLCULLFACEPROC) glad_gl_on_demand_loader("glCullFace");
    glad_glCullFace(mode);
}
PFNGLCULLFACEPROC glad_glCullFace = glad_on_demand_impl_glCullFace;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) {
    glad_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC) glad_gl_on_demand_loader("glDebugMessageCallback");
    glad_glDebugMessageCallback(callback, userParam);
}
PFNGLDEBUGMESSAGECALLBACKPROC glad_glDebugMessageCallback = glad_on_demand_impl_glDebugMessageCallback;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) {
    glad_glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC) glad_gl_on_demand_loader("glDebugMessageCallbackAMD");
    glad_glDebugMessageCallbackAMD(callback, userParam);
}
PFNGLDEBUGMESSAGECALLBACKAMDPROC glad_glDebugMessageCallbackAMD = glad_on_demand_impl_glDebugMessageCallbackAMD;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) {
    glad_glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC) glad_gl_on_demand_loader("glDebugMessageCallbackARB");
    glad_glDebugMessageCallbackARB(callback, userParam);
}
PFNGLDEBUGMESSAGECALLBACKARBPROC glad_glDebugMessageCallbackARB = glad_on_demand_impl_glDebugMessageCallbackARB;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
    glad_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC) glad_gl_on_demand_loader("glDebugMessageControl");
    glad_glDebugMessageControl(source, type, severity, count, ids, enabled);
}
PFNGLDEBUGMESSAGECONTROLPROC glad_glDebugMessageControl = glad_on_demand_impl_glDebugMessageControl;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
    glad_glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC) glad_gl_on_demand_loader("glDebugMessageControlARB");
    glad_glDebugMessageControlARB(source, type, severity, count, ids, enabled);
}
PFNGLDEBUGMESSAGECONTROLARBPROC glad_glDebugMessageControlARB = glad_on_demand_impl_glDebugMessageControlARB;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
    glad_glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC) glad_gl_on_demand_loader("glDebugMessageEnableAMD");
    glad_glDebugMessageEnableAMD(category, severity, count, ids, enabled);
}
PFNGLDEBUGMESSAGEENABLEAMDPROC glad_glDebugMessageEnableAMD = glad_on_demand_impl_glDebugMessageEnableAMD;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
    glad_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC) glad_gl_on_demand_loader("glDebugMessageInsert");
    glad_glDebugMessageInsert(source, type, id, severity, length, buf);
}
PFNGLDEBUGMESSAGEINSERTPROC glad_glDebugMessageInsert = glad_on_demand_impl_glDebugMessageInsert;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) {
    glad_glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC) glad_gl_on_demand_loader("glDebugMessageInsertAMD");
    glad_glDebugMessageInsertAMD(category, severity, id, length, buf);
}
PFNGLDEBUGMESSAGEINSERTAMDPROC glad_glDebugMessageInsertAMD = glad_on_demand_impl_glDebugMessageInsertAMD;
static void GLAD_API_PTR glad_on_demand_impl_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
    glad_glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC) glad_gl_on_demand_loader("glDebugMessageInsertARB");
    glad_glDebugMessageInsertARB(source, type, id, severity, length, buf);
}
PFNGLDEBUGMESSAGEINSERTARBPROC glad_glDebugMessageInsertARB = glad_on_demand_impl_glDebugMessageInsertARB;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteBuffers(GLsizei n, const GLuint * buffers) {
    glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC) glad_gl_on_demand_loader("glDeleteBuffers");
    glad_glDeleteBuffers(n, buffers);
}
PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers = glad_on_demand_impl_glDeleteBuffers;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteBuffersARB(GLsizei n, const GLuint * buffers) {
    glad_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC) glad_gl_on_demand_loader("glDeleteBuffersARB");
    glad_glDeleteBuffersARB(n, buffers);
}
PFNGLDELETEBUFFERSARBPROC glad_glDeleteBuffersARB = glad_on_demand_impl_glDeleteBuffersARB;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) {
    glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC) glad_gl_on_demand_loader("glDeleteFramebuffers");
    glad_glDeleteFramebuffers(n, framebuffers);
}
PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers = glad_on_demand_impl_glDeleteFramebuffers;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) {
    glad_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC) glad_gl_on_demand_loader("glDeleteFramebuffersEXT");
    glad_glDeleteFramebuffersEXT(n, framebuffers);
}
PFNGLDELETEFRAMEBUFFERSEXTPROC glad_glDeleteFramebuffersEXT = glad_on_demand_impl_glDeleteFramebuffersEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteLists(GLuint list, GLsizei range) {
    glad_glDeleteLists = (PFNGLDELETELISTSPROC) glad_gl_on_demand_loader("glDeleteLists");
    glad_glDeleteLists(list, range);
}
PFNGLDELETELISTSPROC glad_glDeleteLists = glad_on_demand_impl_glDeleteLists;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteObjectARB(GLhandleARB obj) {
    glad_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC) glad_gl_on_demand_loader("glDeleteObjectARB");
    glad_glDeleteObjectARB(obj);
}
PFNGLDELETEOBJECTARBPROC glad_glDeleteObjectARB = glad_on_demand_impl_glDeleteObjectARB;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteProgram(GLuint program) {
    glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC) glad_gl_on_demand_loader("glDeleteProgram");
    glad_glDeleteProgram(program);
}
PFNGLDELETEPROGRAMPROC glad_glDeleteProgram = glad_on_demand_impl_glDeleteProgram;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) {
    glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC) glad_gl_on_demand_loader("glDeleteProgramPipelines");
    glad_glDeleteProgramPipelines(n, pipelines);
}
PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines = glad_on_demand_impl_glDeleteProgramPipelines;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteProgramsARB(GLsizei n, const GLuint * programs) {
    glad_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC) glad_gl_on_demand_loader("glDeleteProgramsARB");
    glad_glDeleteProgramsARB(n, programs);
}
PFNGLDELETEPROGRAMSARBPROC glad_glDeleteProgramsARB = glad_on_demand_impl_glDeleteProgramsARB;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteProgramsNV(GLsizei n, const GLuint * programs) {
    glad_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC) glad_gl_on_demand_loader("glDeleteProgramsNV");
    glad_glDeleteProgramsNV(n, programs);
}
PFNGLDELETEPROGRAMSNVPROC glad_glDeleteProgramsNV = glad_on_demand_impl_glDeleteProgramsNV;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteQueries(GLsizei n, const GLuint * ids) {
    glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC) glad_gl_on_demand_loader("glDeleteQueries");
    glad_glDeleteQueries(n, ids);
}
PFNGLDELETEQUERIESPROC glad_glDeleteQueries = glad_on_demand_impl_glDeleteQueries;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteQueriesARB(GLsizei n, const GLuint * ids) {
    glad_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC) glad_gl_on_demand_loader("glDeleteQueriesARB");
    glad_glDeleteQueriesARB(n, ids);
}
PFNGLDELETEQUERIESARBPROC glad_glDeleteQueriesARB = glad_on_demand_impl_glDeleteQueriesARB;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) {
    glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC) glad_gl_on_demand_loader("glDeleteRenderbuffers");
    glad_glDeleteRenderbuffers(n, renderbuffers);
}
PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers = glad_on_demand_impl_glDeleteRenderbuffers;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) {
    glad_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC) glad_gl_on_demand_loader("glDeleteRenderbuffersEXT");
    glad_glDeleteRenderbuffersEXT(n, renderbuffers);
}
PFNGLDELETERENDERBUFFERSEXTPROC glad_glDeleteRenderbuffersEXT = glad_on_demand_impl_glDeleteRenderbuffersEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteSamplers(GLsizei count, const GLuint * samplers) {
    glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC) glad_gl_on_demand_loader("glDeleteSamplers");
    glad_glDeleteSamplers(count, samplers);
}
PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers = glad_on_demand_impl_glDeleteSamplers;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteShader(GLuint shader) {
    glad_glDeleteShader = (PFNGLDELETESHADERPROC) glad_gl_on_demand_loader("glDeleteShader");
    glad_glDeleteShader(shader);
}
PFNGLDELETESHADERPROC glad_glDeleteShader = glad_on_demand_impl_glDeleteShader;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteSync(GLsync sync) {
    glad_glDeleteSync = (PFNGLDELETESYNCPROC) glad_gl_on_demand_loader("glDeleteSync");
    glad_glDeleteSync(sync);
}
PFNGLDELETESYNCPROC glad_glDeleteSync = glad_on_demand_impl_glDeleteSync;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteTextures(GLsizei n, const GLuint * textures) {
    glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) glad_gl_on_demand_loader("glDeleteTextures");
    glad_glDeleteTextures(n, textures);
}
PFNGLDELETETEXTURESPROC glad_glDeleteTextures = glad_on_demand_impl_glDeleteTextures;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteTexturesEXT(GLsizei n, const GLuint * textures) {
    glad_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC) glad_gl_on_demand_loader("glDeleteTexturesEXT");
    glad_glDeleteTexturesEXT(n, textures);
}
PFNGLDELETETEXTURESEXTPROC glad_glDeleteTexturesEXT = glad_on_demand_impl_glDeleteTexturesEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) {
    glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC) glad_gl_on_demand_loader("glDeleteTransformFeedbacks");
    glad_glDeleteTransformFeedbacks(n, ids);
}
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks = glad_on_demand_impl_glDeleteTransformFeedbacks;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) {
    glad_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC) glad_gl_on_demand_loader("glDeleteTransformFeedbacksNV");
    glad_glDeleteTransformFeedbacksNV(n, ids);
}
PFNGLDELETETRANSFORMFEEDBACKSNVPROC glad_glDeleteTransformFeedbacksNV = glad_on_demand_impl_glDeleteTransformFeedbacksNV;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteVertexArrays(GLsizei n, const GLuint * arrays) {
    glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC) glad_gl_on_demand_loader("glDeleteVertexArrays");
    glad_glDeleteVertexArrays(n, arrays);
}
PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays = glad_on_demand_impl_glDeleteVertexArrays;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) {
    glad_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC) glad_gl_on_demand_loader("glDeleteVertexArraysAPPLE");
    glad_glDeleteVertexArraysAPPLE(n, arrays);
}
PFNGLDELETEVERTEXARRAYSAPPLEPROC glad_glDeleteVertexArraysAPPLE = glad_on_demand_impl_glDeleteVertexArraysAPPLE;
static void GLAD_API_PTR glad_on_demand_impl_glDepthFunc(GLenum func) {
    glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) glad_gl_on_demand_loader("glDepthFunc");
    glad_glDepthFunc(func);
}
PFNGLDEPTHFUNCPROC glad_glDepthFunc = glad_on_demand_impl_glDepthFunc;
static void GLAD_API_PTR glad_on_demand_impl_glDepthMask(GLboolean flag) {
    glad_glDepthMask = (PFNGLDEPTHMASKPROC) glad_gl_on_demand_loader("glDepthMask");
    glad_glDepthMask(flag);
}
PFNGLDEPTHMASKPROC glad_glDepthMask = glad_on_demand_impl_glDepthMask;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRange(GLdouble n, GLdouble f) {
    glad_glDepthRange = (PFNGLDEPTHRANGEPROC) glad_gl_on_demand_loader("glDepthRange");
    glad_glDepthRange(n, f);
}
PFNGLDEPTHRANGEPROC glad_glDepthRange = glad_on_demand_impl_glDepthRange;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRangeArraydvNV(GLuint first, GLsizei count, const GLdouble * v) {
    glad_glDepthRangeArraydvNV = (PFNGLDEPTHRANGEARRAYDVNVPROC) glad_gl_on_demand_loader("glDepthRangeArraydvNV");
    glad_glDepthRangeArraydvNV(first, count, v);
}
PFNGLDEPTHRANGEARRAYDVNVPROC glad_glDepthRangeArraydvNV = glad_on_demand_impl_glDepthRangeArraydvNV;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) {
    glad_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC) glad_gl_on_demand_loader("glDepthRangeArrayv");
    glad_glDepthRangeArrayv(first, count, v);
}
PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv = glad_on_demand_impl_glDepthRangeArrayv;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) {
    glad_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC) glad_gl_on_demand_loader("glDepthRangeIndexed");
    glad_glDepthRangeIndexed(index, n, f);
}
PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed = glad_on_demand_impl_glDepthRangeIndexed;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRangeIndexeddNV(GLuint index, GLdouble n, GLdouble f) {
    glad_glDepthRangeIndexeddNV = (PFNGLDEPTHRANGEINDEXEDDNVPROC) glad_gl_on_demand_loader("glDepthRangeIndexeddNV");
    glad_glDepthRangeIndexeddNV(index, n, f);
}
PFNGLDEPTHRANGEINDEXEDDNVPROC glad_glDepthRangeIndexeddNV = glad_on_demand_impl_glDepthRangeIndexeddNV;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRangef(GLfloat n, GLfloat f) {
    glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC) glad_gl_on_demand_loader("glDepthRangef");
    glad_glDepthRangef(n, f);
}
PFNGLDEPTHRANGEFPROC glad_glDepthRangef = glad_on_demand_impl_glDepthRangef;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRangefOES(GLclampf n, GLclampf f) {
    glad_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC) glad_gl_on_demand_loader("glDepthRangefOES");
    glad_glDepthRangefOES(n, f);
}
PFNGLDEPTHRANGEFOESPROC glad_glDepthRangefOES = glad_on_demand_impl_glDepthRangefOES;
static void GLAD_API_PTR glad_on_demand_impl_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) {
    glad_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC) glad_gl_on_demand_loader("glDetachObjectARB");
    glad_glDetachObjectARB(containerObj, attachedObj);
}
PFNGLDETACHOBJECTARBPROC glad_glDetachObjectARB = glad_on_demand_impl_glDetachObjectARB;
static void GLAD_API_PTR glad_on_demand_impl_glDetachShader(GLuint program, GLuint shader) {
    glad_glDetachShader = (PFNGLDETACHSHADERPROC) glad_gl_on_demand_loader("glDetachShader");
    glad_glDetachShader(program, shader);
}
PFNGLDETACHSHADERPROC glad_glDetachShader = glad_on_demand_impl_glDetachShader;
static void GLAD_API_PTR glad_on_demand_impl_glDisable(GLenum cap) {
    glad_glDisable = (PFNGLDISABLEPROC) glad_gl_on_demand_loader("glDisable");
    glad_glDisable(cap);
}
PFNGLDISABLEPROC glad_glDisable = glad_on_demand_impl_glDisable;
static void GLAD_API_PTR glad_on_demand_impl_glDisableClientState(GLenum array) {
    glad_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) glad_gl_on_demand_loader("glDisableClientState");
    glad_glDisableClientState(array);
}
PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState = glad_on_demand_impl_glDisableClientState;
static void GLAD_API_PTR glad_on_demand_impl_glDisableClientStateIndexedEXT(GLenum array, GLuint index) {
    glad_glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) glad_gl_on_demand_loader("glDisableClientStateIndexedEXT");
    glad_glDisableClientStateIndexedEXT(array, index);
}
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glad_glDisableClientStateIndexedEXT = glad_on_demand_impl_glDisableClientStateIndexedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDisableClientStateiEXT(GLenum array, GLuint index) {
    glad_glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC) glad_gl_on_demand_loader("glDisableClientStateiEXT");
    glad_glDisableClientStateiEXT(array, index);
}
PFNGLDISABLECLIENTSTATEIEXTPROC glad_glDisableClientStateiEXT = glad_on_demand_impl_glDisableClientStateiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDisableIndexedEXT(GLenum target, GLuint index) {
    glad_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC) glad_gl_on_demand_loader("glDisableIndexedEXT");
    glad_glDisableIndexedEXT(target, index);
}
PFNGLDISABLEINDEXEDEXTPROC glad_glDisableIndexedEXT = glad_on_demand_impl_glDisableIndexedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDisableVertexArrayAttrib(GLuint vaobj, GLuint index) {
    glad_glDisableVertexArrayAttrib = (PFNGLDISABLEVERTEXARRAYATTRIBPROC) glad_gl_on_demand_loader("glDisableVertexArrayAttrib");
    glad_glDisableVertexArrayAttrib(vaobj, index);
}
PFNGLDISABLEVERTEXARRAYATTRIBPROC glad_glDisableVertexArrayAttrib = glad_on_demand_impl_glDisableVertexArrayAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
    glad_glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) glad_gl_on_demand_loader("glDisableVertexArrayAttribEXT");
    glad_glDisableVertexArrayAttribEXT(vaobj, index);
}
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC glad_glDisableVertexArrayAttribEXT = glad_on_demand_impl_glDisableVertexArrayAttribEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDisableVertexArrayEXT(GLuint vaobj, GLenum array) {
    glad_glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC) glad_gl_on_demand_loader("glDisableVertexArrayEXT");
    glad_glDisableVertexArrayEXT(vaobj, array);
}
PFNGLDISABLEVERTEXARRAYEXTPROC glad_glDisableVertexArrayEXT = glad_on_demand_impl_glDisableVertexArrayEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDisableVertexAttribArray(GLuint index) {
    glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC) glad_gl_on_demand_loader("glDisableVertexAttribArray");
    glad_glDisableVertexAttribArray(index);
}
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray = glad_on_demand_impl_glDisableVertexAttribArray;
static void GLAD_API_PTR glad_on_demand_impl_glDisableVertexAttribArrayARB(GLuint index) {
    glad_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) glad_gl_on_demand_loader("glDisableVertexAttribArrayARB");
    glad_glDisableVertexAttribArrayARB(index);
}
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glad_glDisableVertexAttribArrayARB = glad_on_demand_impl_glDisableVertexAttribArrayARB;
static void GLAD_API_PTR glad_on_demand_impl_glDisablei(GLenum target, GLuint index) {
    glad_glDisablei = (PFNGLDISABLEIPROC) glad_gl_on_demand_loader("glDisablei");
    glad_glDisablei(target, index);
}
PFNGLDISABLEIPROC glad_glDisablei = glad_on_demand_impl_glDisablei;
static void GLAD_API_PTR glad_on_demand_impl_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
    glad_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC) glad_gl_on_demand_loader("glDispatchCompute");
    glad_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}
PFNGLDISPATCHCOMPUTEPROC glad_glDispatchCompute = glad_on_demand_impl_glDispatchCompute;
static void GLAD_API_PTR glad_on_demand_impl_glDispatchComputeIndirect(GLintptr indirect) {
    glad_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC) glad_gl_on_demand_loader("glDispatchComputeIndirect");
    glad_glDispatchComputeIndirect(indirect);
}
PFNGLDISPATCHCOMPUTEINDIRECTPROC glad_glDispatchComputeIndirect = glad_on_demand_impl_glDispatchComputeIndirect;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
    glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) glad_gl_on_demand_loader("glDrawArrays");
    glad_glDrawArrays(mode, first, count);
}
PFNGLDRAWARRAYSPROC glad_glDrawArrays = glad_on_demand_impl_glDrawArrays;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count) {
    glad_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC) glad_gl_on_demand_loader("glDrawArraysEXT");
    glad_glDrawArraysEXT(mode, first, count);
}
PFNGLDRAWARRAYSEXTPROC glad_glDrawArraysEXT = glad_on_demand_impl_glDrawArraysEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArraysIndirect(GLenum mode, const void * indirect) {
    glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC) glad_gl_on_demand_loader("glDrawArraysIndirect");
    glad_glDrawArraysIndirect(mode, indirect);
}
PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect = glad_on_demand_impl_glDrawArraysIndirect;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) {
    glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC) glad_gl_on_demand_loader("glDrawArraysInstanced");
    glad_glDrawArraysInstanced(mode, first, count, instancecount);
}
PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced = glad_on_demand_impl_glDrawArraysInstanced;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
    glad_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC) glad_gl_on_demand_loader("glDrawArraysInstancedARB");
    glad_glDrawArraysInstancedARB(mode, first, count, primcount);
}
PFNGLDRAWARRAYSINSTANCEDARBPROC glad_glDrawArraysInstancedARB = glad_on_demand_impl_glDrawArraysInstancedARB;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) {
    glad_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) glad_gl_on_demand_loader("glDrawArraysInstancedBaseInstance");
    glad_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glad_glDrawArraysInstancedBaseInstance = glad_on_demand_impl_glDrawArraysInstancedBaseInstance;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
    glad_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC) glad_gl_on_demand_loader("glDrawArraysInstancedEXT");
    glad_glDrawArraysInstancedEXT(mode, start, count, primcount);
}
PFNGLDRAWARRAYSINSTANCEDEXTPROC glad_glDrawArraysInstancedEXT = glad_on_demand_impl_glDrawArraysInstancedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDrawBuffer(GLenum buf) {
    glad_glDrawBuffer = (PFNGLDRAWBUFFERPROC) glad_gl_on_demand_loader("glDrawBuffer");
    glad_glDrawBuffer(buf);
}
PFNGLDRAWBUFFERPROC glad_glDrawBuffer = glad_on_demand_impl_glDrawBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glDrawBuffers(GLsizei n, const GLenum * bufs) {
    glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC) glad_gl_on_demand_loader("glDrawBuffers");
    glad_glDrawBuffers(n, bufs);
}
PFNGLDRAWBUFFERSPROC glad_glDrawBuffers = glad_on_demand_impl_glDrawBuffers;
static void GLAD_API_PTR glad_on_demand_impl_glDrawBuffersARB(GLsizei n, const GLenum * bufs) {
    glad_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC) glad_gl_on_demand_loader("glDrawBuffersARB");
    glad_glDrawBuffersARB(n, bufs);
}
PFNGLDRAWBUFFERSARBPROC glad_glDrawBuffersARB = glad_on_demand_impl_glDrawBuffersARB;
static void GLAD_API_PTR glad_on_demand_impl_glDrawBuffersATI(GLsizei n, const GLenum * bufs) {
    glad_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC) glad_gl_on_demand_loader("glDrawBuffersATI");
    glad_glDrawBuffersATI(n, bufs);
}
PFNGLDRAWBUFFERSATIPROC glad_glDrawBuffersATI = glad_on_demand_impl_glDrawBuffersATI;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) {
    glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) glad_gl_on_demand_loader("glDrawElements");
    glad_glDrawElements(mode, count, type, indices);
}
PFNGLDRAWELEMENTSPROC glad_glDrawElements = glad_on_demand_impl_glDrawElements;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
    glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC) glad_gl_on_demand_loader("glDrawElementsBaseVertex");
    glad_glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex = glad_on_demand_impl_glDrawElementsBaseVertex;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) {
    glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC) glad_gl_on_demand_loader("glDrawElementsIndirect");
    glad_glDrawElementsIndirect(mode, type, indirect);
}
PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect = glad_on_demand_impl_glDrawElementsIndirect;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) {
    glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC) glad_gl_on_demand_loader("glDrawElementsInstanced");
    glad_glDrawElementsInstanced(mode, count, type, indices, instancecount);
}
PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced = glad_on_demand_impl_glDrawElementsInstanced;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
    glad_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC) glad_gl_on_demand_loader("glDrawElementsInstancedARB");
    glad_glDrawElementsInstancedARB(mode, count, type, indices, primcount);
}
PFNGLDRAWELEMENTSINSTANCEDARBPROC glad_glDrawElementsInstancedARB = glad_on_demand_impl_glDrawElementsInstancedARB;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) {
    glad_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) glad_gl_on_demand_loader("glDrawElementsInstancedBaseInstance");
    glad_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
}
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glad_glDrawElementsInstancedBaseInstance = glad_on_demand_impl_glDrawElementsInstancedBaseInstance;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) {
    glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) glad_gl_on_demand_loader("glDrawElementsInstancedBaseVertex");
    glad_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex = glad_on_demand_impl_glDrawElementsInstancedBaseVertex;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) {
    glad_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) glad_gl_on_demand_loader("glDrawElementsInstancedBaseVertexBaseInstance");
    glad_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glad_glDrawElementsInstancedBaseVertexBaseInstance = glad_on_demand_impl_glDrawElementsInstancedBaseVertexBaseInstance;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) {
    glad_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC) glad_gl_on_demand_loader("glDrawElementsInstancedEXT");
    glad_glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
}
PFNGLDRAWELEMENTSINSTANCEDEXTPROC glad_glDrawElementsInstancedEXT = glad_on_demand_impl_glDrawElementsInstancedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glDrawPixels = (PFNGLDRAWPIXELSPROC) glad_gl_on_demand_loader("glDrawPixels");
    glad_glDrawPixels(width, height, format, type, pixels);
}
PFNGLDRAWPIXELSPROC glad_glDrawPixels = glad_on_demand_impl_glDrawPixels;
static void GLAD_API_PTR glad_on_demand_impl_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
    glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC) glad_gl_on_demand_loader("glDrawRangeElements");
    glad_glDrawRangeElements(mode, start, end, count, type, indices);
}
PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements = glad_on_demand_impl_glDrawRangeElements;
static void GLAD_API_PTR glad_on_demand_impl_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) {
    glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) glad_gl_on_demand_loader("glDrawRangeElementsBaseVertex");
    glad_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex = glad_on_demand_impl_glDrawRangeElementsBaseVertex;
static void GLAD_API_PTR glad_on_demand_impl_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
    glad_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC) glad_gl_on_demand_loader("glDrawRangeElementsEXT");
    glad_glDrawRangeElementsEXT(mode, start, end, count, type, indices);
}
PFNGLDRAWRANGEELEMENTSEXTPROC glad_glDrawRangeElementsEXT = glad_on_demand_impl_glDrawRangeElementsEXT;
static void GLAD_API_PTR glad_on_demand_impl_glDrawTransformFeedback(GLenum mode, GLuint id) {
    glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC) glad_gl_on_demand_loader("glDrawTransformFeedback");
    glad_glDrawTransformFeedback(mode, id);
}
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback = glad_on_demand_impl_glDrawTransformFeedback;
static void GLAD_API_PTR glad_on_demand_impl_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) {
    glad_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) glad_gl_on_demand_loader("glDrawTransformFeedbackInstanced");
    glad_glDrawTransformFeedbackInstanced(mode, id, instancecount);
}
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glad_glDrawTransformFeedbackInstanced = glad_on_demand_impl_glDrawTransformFeedbackInstanced;
static void GLAD_API_PTR glad_on_demand_impl_glDrawTransformFeedbackNV(GLenum mode, GLuint id) {
    glad_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC) glad_gl_on_demand_loader("glDrawTransformFeedbackNV");
    glad_glDrawTransformFeedbackNV(mode, id);
}
PFNGLDRAWTRANSFORMFEEDBACKNVPROC glad_glDrawTransformFeedbackNV = glad_on_demand_impl_glDrawTransformFeedbackNV;
static void GLAD_API_PTR glad_on_demand_impl_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
    glad_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) glad_gl_on_demand_loader("glDrawTransformFeedbackStream");
    glad_glDrawTransformFeedbackStream(mode, id, stream);
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream = glad_on_demand_impl_glDrawTransformFeedbackStream;
static void GLAD_API_PTR glad_on_demand_impl_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) {
    glad_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) glad_gl_on_demand_loader("glDrawTransformFeedbackStreamInstanced");
    glad_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glad_glDrawTransformFeedbackStreamInstanced = glad_on_demand_impl_glDrawTransformFeedbackStreamInstanced;
static void GLAD_API_PTR glad_on_demand_impl_glEdgeFlag(GLboolean flag) {
    glad_glEdgeFlag = (PFNGLEDGEFLAGPROC) glad_gl_on_demand_loader("glEdgeFlag");
    glad_glEdgeFlag(flag);
}
PFNGLEDGEFLAGPROC glad_glEdgeFlag = glad_on_demand_impl_glEdgeFlag;
static void GLAD_API_PTR glad_on_demand_impl_glEdgeFlagPointer(GLsizei stride, const void * pointer) {
    glad_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC) glad_gl_on_demand_loader("glEdgeFlagPointer");
    glad_glEdgeFlagPointer(stride, pointer);
}
PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer = glad_on_demand_impl_glEdgeFlagPointer;
static void GLAD_API_PTR glad_on_demand_impl_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) {
    glad_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC) glad_gl_on_demand_loader("glEdgeFlagPointerEXT");
    glad_glEdgeFlagPointerEXT(stride, count, pointer);
}
PFNGLEDGEFLAGPOINTEREXTPROC glad_glEdgeFlagPointerEXT = glad_on_demand_impl_glEdgeFlagPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glEdgeFlagv(const GLboolean * flag) {
    glad_glEdgeFlagv = (PFNGLEDGEFLAGVPROC) glad_gl_on_demand_loader("glEdgeFlagv");
    glad_glEdgeFlagv(flag);
}
PFNGLEDGEFLAGVPROC glad_glEdgeFlagv = glad_on_demand_impl_glEdgeFlagv;
static void GLAD_API_PTR glad_on_demand_impl_glEnable(GLenum cap) {
    glad_glEnable = (PFNGLENABLEPROC) glad_gl_on_demand_loader("glEnable");
    glad_glEnable(cap);
}
PFNGLENABLEPROC glad_glEnable = glad_on_demand_impl_glEnable;
static void GLAD_API_PTR glad_on_demand_impl_glEnableClientState(GLenum array) {
    glad_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) glad_gl_on_demand_loader("glEnableClientState");
    glad_glEnableClientState(array);
}
PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState = glad_on_demand_impl_glEnableClientState;
static void GLAD_API_PTR glad_on_demand_impl_glEnableClientStateIndexedEXT(GLenum array, GLuint index) {
    glad_glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) glad_gl_on_demand_loader("glEnableClientStateIndexedEXT");
    glad_glEnableClientStateIndexedEXT(array, index);
}
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glad_glEnableClientStateIndexedEXT = glad_on_demand_impl_glEnableClientStateIndexedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glEnableClientStateiEXT(GLenum array, GLuint index) {
    glad_glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC) glad_gl_on_demand_loader("glEnableClientStateiEXT");
    glad_glEnableClientStateiEXT(array, index);
}
PFNGLENABLECLIENTSTATEIEXTPROC glad_glEnableClientStateiEXT = glad_on_demand_impl_glEnableClientStateiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glEnableIndexedEXT(GLenum target, GLuint index) {
    glad_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC) glad_gl_on_demand_loader("glEnableIndexedEXT");
    glad_glEnableIndexedEXT(target, index);
}
PFNGLENABLEINDEXEDEXTPROC glad_glEnableIndexedEXT = glad_on_demand_impl_glEnableIndexedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glEnableVertexArrayAttrib(GLuint vaobj, GLuint index) {
    glad_glEnableVertexArrayAttrib = (PFNGLENABLEVERTEXARRAYATTRIBPROC) glad_gl_on_demand_loader("glEnableVertexArrayAttrib");
    glad_glEnableVertexArrayAttrib(vaobj, index);
}
PFNGLENABLEVERTEXARRAYATTRIBPROC glad_glEnableVertexArrayAttrib = glad_on_demand_impl_glEnableVertexArrayAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) {
    glad_glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) glad_gl_on_demand_loader("glEnableVertexArrayAttribEXT");
    glad_glEnableVertexArrayAttribEXT(vaobj, index);
}
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC glad_glEnableVertexArrayAttribEXT = glad_on_demand_impl_glEnableVertexArrayAttribEXT;
static void GLAD_API_PTR glad_on_demand_impl_glEnableVertexArrayEXT(GLuint vaobj, GLenum array) {
    glad_glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC) glad_gl_on_demand_loader("glEnableVertexArrayEXT");
    glad_glEnableVertexArrayEXT(vaobj, array);
}
PFNGLENABLEVERTEXARRAYEXTPROC glad_glEnableVertexArrayEXT = glad_on_demand_impl_glEnableVertexArrayEXT;
static void GLAD_API_PTR glad_on_demand_impl_glEnableVertexAttribArray(GLuint index) {
    glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC) glad_gl_on_demand_loader("glEnableVertexAttribArray");
    glad_glEnableVertexAttribArray(index);
}
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray = glad_on_demand_impl_glEnableVertexAttribArray;
static void GLAD_API_PTR glad_on_demand_impl_glEnableVertexAttribArrayARB(GLuint index) {
    glad_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC) glad_gl_on_demand_loader("glEnableVertexAttribArrayARB");
    glad_glEnableVertexAttribArrayARB(index);
}
PFNGLENABLEVERTEXATTRIBARRAYARBPROC glad_glEnableVertexAttribArrayARB = glad_on_demand_impl_glEnableVertexAttribArrayARB;
static void GLAD_API_PTR glad_on_demand_impl_glEnablei(GLenum target, GLuint index) {
    glad_glEnablei = (PFNGLENABLEIPROC) glad_gl_on_demand_loader("glEnablei");
    glad_glEnablei(target, index);
}
PFNGLENABLEIPROC glad_glEnablei = glad_on_demand_impl_glEnablei;
static void GLAD_API_PTR glad_on_demand_impl_glEnd(void) {
    glad_glEnd = (PFNGLENDPROC) glad_gl_on_demand_loader("glEnd");
    glad_glEnd();
}
PFNGLENDPROC glad_glEnd = glad_on_demand_impl_glEnd;
static void GLAD_API_PTR glad_on_demand_impl_glEndConditionalRender(void) {
    glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC) glad_gl_on_demand_loader("glEndConditionalRender");
    glad_glEndConditionalRender();
}
PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender = glad_on_demand_impl_glEndConditionalRender;
static void GLAD_API_PTR glad_on_demand_impl_glEndConditionalRenderNV(void) {
    glad_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC) glad_gl_on_demand_loader("glEndConditionalRenderNV");
    glad_glEndConditionalRenderNV();
}
PFNGLENDCONDITIONALRENDERNVPROC glad_glEndConditionalRenderNV = glad_on_demand_impl_glEndConditionalRenderNV;
static void GLAD_API_PTR glad_on_demand_impl_glEndConditionalRenderNVX(void) {
    glad_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC) glad_gl_on_demand_loader("glEndConditionalRenderNVX");
    glad_glEndConditionalRenderNVX();
}
PFNGLENDCONDITIONALRENDERNVXPROC glad_glEndConditionalRenderNVX = glad_on_demand_impl_glEndConditionalRenderNVX;
static void GLAD_API_PTR glad_on_demand_impl_glEndList(void) {
    glad_glEndList = (PFNGLENDLISTPROC) glad_gl_on_demand_loader("glEndList");
    glad_glEndList();
}
PFNGLENDLISTPROC glad_glEndList = glad_on_demand_impl_glEndList;
static void GLAD_API_PTR glad_on_demand_impl_glEndQuery(GLenum target) {
    glad_glEndQuery = (PFNGLENDQUERYPROC) glad_gl_on_demand_loader("glEndQuery");
    glad_glEndQuery(target);
}
PFNGLENDQUERYPROC glad_glEndQuery = glad_on_demand_impl_glEndQuery;
static void GLAD_API_PTR glad_on_demand_impl_glEndQueryARB(GLenum target) {
    glad_glEndQueryARB = (PFNGLENDQUERYARBPROC) glad_gl_on_demand_loader("glEndQueryARB");
    glad_glEndQueryARB(target);
}
PFNGLENDQUERYARBPROC glad_glEndQueryARB = glad_on_demand_impl_glEndQueryARB;
static void GLAD_API_PTR glad_on_demand_impl_glEndQueryIndexed(GLenum target, GLuint index) {
    glad_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC) glad_gl_on_demand_loader("glEndQueryIndexed");
    glad_glEndQueryIndexed(target, index);
}
PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed = glad_on_demand_impl_glEndQueryIndexed;
static void GLAD_API_PTR glad_on_demand_impl_glEndTransformFeedback(void) {
    glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC) glad_gl_on_demand_loader("glEndTransformFeedback");
    glad_glEndTransformFeedback();
}
PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback = glad_on_demand_impl_glEndTransformFeedback;
static void GLAD_API_PTR glad_on_demand_impl_glEndTransformFeedbackEXT(void) {
    glad_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC) glad_gl_on_demand_loader("glEndTransformFeedbackEXT");
    glad_glEndTransformFeedbackEXT();
}
PFNGLENDTRANSFORMFEEDBACKEXTPROC glad_glEndTransformFeedbackEXT = glad_on_demand_impl_glEndTransformFeedbackEXT;
static void GLAD_API_PTR glad_on_demand_impl_glEndTransformFeedbackNV(void) {
    glad_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC) glad_gl_on_demand_loader("glEndTransformFeedbackNV");
    glad_glEndTransformFeedbackNV();
}
PFNGLENDTRANSFORMFEEDBACKNVPROC glad_glEndTransformFeedbackNV = glad_on_demand_impl_glEndTransformFeedbackNV;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1d(GLdouble u) {
    glad_glEvalCoord1d = (PFNGLEVALCOORD1DPROC) glad_gl_on_demand_loader("glEvalCoord1d");
    glad_glEvalCoord1d(u);
}
PFNGLEVALCOORD1DPROC glad_glEvalCoord1d = glad_on_demand_impl_glEvalCoord1d;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1dv(const GLdouble * u) {
    glad_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC) glad_gl_on_demand_loader("glEvalCoord1dv");
    glad_glEvalCoord1dv(u);
}
PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv = glad_on_demand_impl_glEvalCoord1dv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1f(GLfloat u) {
    glad_glEvalCoord1f = (PFNGLEVALCOORD1FPROC) glad_gl_on_demand_loader("glEvalCoord1f");
    glad_glEvalCoord1f(u);
}
PFNGLEVALCOORD1FPROC glad_glEvalCoord1f = glad_on_demand_impl_glEvalCoord1f;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1fv(const GLfloat * u) {
    glad_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC) glad_gl_on_demand_loader("glEvalCoord1fv");
    glad_glEvalCoord1fv(u);
}
PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv = glad_on_demand_impl_glEvalCoord1fv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2d(GLdouble u, GLdouble v) {
    glad_glEvalCoord2d = (PFNGLEVALCOORD2DPROC) glad_gl_on_demand_loader("glEvalCoord2d");
    glad_glEvalCoord2d(u, v);
}
PFNGLEVALCOORD2DPROC glad_glEvalCoord2d = glad_on_demand_impl_glEvalCoord2d;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2dv(const GLdouble * u) {
    glad_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC) glad_gl_on_demand_loader("glEvalCoord2dv");
    glad_glEvalCoord2dv(u);
}
PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv = glad_on_demand_impl_glEvalCoord2dv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2f(GLfloat u, GLfloat v) {
    glad_glEvalCoord2f = (PFNGLEVALCOORD2FPROC) glad_gl_on_demand_loader("glEvalCoord2f");
    glad_glEvalCoord2f(u, v);
}
PFNGLEVALCOORD2FPROC glad_glEvalCoord2f = glad_on_demand_impl_glEvalCoord2f;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2fv(const GLfloat * u) {
    glad_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC) glad_gl_on_demand_loader("glEvalCoord2fv");
    glad_glEvalCoord2fv(u);
}
PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv = glad_on_demand_impl_glEvalCoord2fv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
    glad_glEvalMesh1 = (PFNGLEVALMESH1PROC) glad_gl_on_demand_loader("glEvalMesh1");
    glad_glEvalMesh1(mode, i1, i2);
}
PFNGLEVALMESH1PROC glad_glEvalMesh1 = glad_on_demand_impl_glEvalMesh1;
static void GLAD_API_PTR glad_on_demand_impl_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
    glad_glEvalMesh2 = (PFNGLEVALMESH2PROC) glad_gl_on_demand_loader("glEvalMesh2");
    glad_glEvalMesh2(mode, i1, i2, j1, j2);
}
PFNGLEVALMESH2PROC glad_glEvalMesh2 = glad_on_demand_impl_glEvalMesh2;
static void GLAD_API_PTR glad_on_demand_impl_glEvalPoint1(GLint i) {
    glad_glEvalPoint1 = (PFNGLEVALPOINT1PROC) glad_gl_on_demand_loader("glEvalPoint1");
    glad_glEvalPoint1(i);
}
PFNGLEVALPOINT1PROC glad_glEvalPoint1 = glad_on_demand_impl_glEvalPoint1;
static void GLAD_API_PTR glad_on_demand_impl_glEvalPoint2(GLint i, GLint j) {
    glad_glEvalPoint2 = (PFNGLEVALPOINT2PROC) glad_gl_on_demand_loader("glEvalPoint2");
    glad_glEvalPoint2(i, j);
}
PFNGLEVALPOINT2PROC glad_glEvalPoint2 = glad_on_demand_impl_glEvalPoint2;
static void GLAD_API_PTR glad_on_demand_impl_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) {
    glad_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC) glad_gl_on_demand_loader("glExecuteProgramNV");
    glad_glExecuteProgramNV(target, id, params);
}
PFNGLEXECUTEPROGRAMNVPROC glad_glExecuteProgramNV = glad_on_demand_impl_glExecuteProgramNV;
static void GLAD_API_PTR glad_on_demand_impl_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) {
    glad_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC) glad_gl_on_demand_loader("glFeedbackBuffer");
    glad_glFeedbackBuffer(size, type, buffer);
}
PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer = glad_on_demand_impl_glFeedbackBuffer;
static GLsync GLAD_API_PTR glad_on_demand_impl_glFenceSync(GLenum condition, GLbitfield flags) {
    glad_glFenceSync = (PFNGLFENCESYNCPROC) glad_gl_on_demand_loader("glFenceSync");
    return glad_glFenceSync(condition, flags);
}
PFNGLFENCESYNCPROC glad_glFenceSync = glad_on_demand_impl_glFenceSync;
static void GLAD_API_PTR glad_on_demand_impl_glFinish(void) {
    glad_glFinish = (PFNGLFINISHPROC) glad_gl_on_demand_loader("glFinish");
    glad_glFinish();
}
PFNGLFINISHPROC glad_glFinish = glad_on_demand_impl_glFinish;
static void GLAD_API_PTR glad_on_demand_impl_glFlush(void) {
    glad_glFlush = (PFNGLFLUSHPROC) glad_gl_on_demand_loader("glFlush");
    glad_glFlush();
}
PFNGLFLUSHPROC glad_glFlush = glad_on_demand_impl_glFlush;
static void GLAD_API_PTR glad_on_demand_impl_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
    glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC) glad_gl_on_demand_loader("glFlushMappedBufferRange");
    glad_glFlushMappedBufferRange(target, offset, length);
}
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange = glad_on_demand_impl_glFlushMappedBufferRange;
static void GLAD_API_PTR glad_on_demand_impl_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) {
    glad_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) glad_gl_on_demand_loader("glFlushMappedBufferRangeAPPLE");
    glad_glFlushMappedBufferRangeAPPLE(target, offset, size);
}
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glad_glFlushMappedBufferRangeAPPLE = glad_on_demand_impl_glFlushMappedBufferRangeAPPLE;
static void GLAD_API_PTR glad_on_demand_impl_glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) {
    glad_glFlushMappedNamedBufferRange = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) glad_gl_on_demand_loader("glFlushMappedNamedBufferRange");
    glad_glFlushMappedNamedBufferRange(buffer, offset, length);
}
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC glad_glFlushMappedNamedBufferRange = glad_on_demand_impl_glFlushMappedNamedBufferRange;
static void GLAD_API_PTR glad_on_demand_impl_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) {
    glad_glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) glad_gl_on_demand_loader("glFlushMappedNamedBufferRangeEXT");
    glad_glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
}
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glad_glFlushMappedNamedBufferRangeEXT = glad_on_demand_impl_glFlushMappedNamedBufferRangeEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) {
    glad_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC) glad_gl_on_demand_loader("glFogCoordPointer");
    glad_glFogCoordPointer(type, stride, pointer);
}
PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer = glad_on_demand_impl_glFogCoordPointer;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) {
    glad_glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC) glad_gl_on_demand_loader("glFogCoordPointerEXT");
    glad_glFogCoordPointerEXT(type, stride, pointer);
}
PFNGLFOGCOORDPOINTEREXTPROC glad_glFogCoordPointerEXT = glad_on_demand_impl_glFogCoordPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoordd(GLdouble coord) {
    glad_glFogCoordd = (PFNGLFOGCOORDDPROC) glad_gl_on_demand_loader("glFogCoordd");
    glad_glFogCoordd(coord);
}
PFNGLFOGCOORDDPROC glad_glFogCoordd = glad_on_demand_impl_glFogCoordd;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoorddEXT(GLdouble coord) {
    glad_glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC) glad_gl_on_demand_loader("glFogCoorddEXT");
    glad_glFogCoorddEXT(coord);
}
PFNGLFOGCOORDDEXTPROC glad_glFogCoorddEXT = glad_on_demand_impl_glFogCoorddEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoorddv(const GLdouble * coord) {
    glad_glFogCoorddv = (PFNGLFOGCOORDDVPROC) glad_gl_on_demand_loader("glFogCoorddv");
    glad_glFogCoorddv(coord);
}
PFNGLFOGCOORDDVPROC glad_glFogCoorddv = glad_on_demand_impl_glFogCoorddv;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoorddvEXT(const GLdouble * coord) {
    glad_glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC) glad_gl_on_demand_loader("glFogCoorddvEXT");
    glad_glFogCoorddvEXT(coord);
}
PFNGLFOGCOORDDVEXTPROC glad_glFogCoorddvEXT = glad_on_demand_impl_glFogCoorddvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoordf(GLfloat coord) {
    glad_glFogCoordf = (PFNGLFOGCOORDFPROC) glad_gl_on_demand_loader("glFogCoordf");
    glad_glFogCoordf(coord);
}
PFNGLFOGCOORDFPROC glad_glFogCoordf = glad_on_demand_impl_glFogCoordf;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoordfEXT(GLfloat coord) {
    glad_glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC) glad_gl_on_demand_loader("glFogCoordfEXT");
    glad_glFogCoordfEXT(coord);
}
PFNGLFOGCOORDFEXTPROC glad_glFogCoordfEXT = glad_on_demand_impl_glFogCoordfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoordfv(const GLfloat * coord) {
    glad_glFogCoordfv = (PFNGLFOGCOORDFVPROC) glad_gl_on_demand_loader("glFogCoordfv");
    glad_glFogCoordfv(coord);
}
PFNGLFOGCOORDFVPROC glad_glFogCoordfv = glad_on_demand_impl_glFogCoordfv;
static void GLAD_API_PTR glad_on_demand_impl_glFogCoordfvEXT(const GLfloat * coord) {
    glad_glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC) glad_gl_on_demand_loader("glFogCoordfvEXT");
    glad_glFogCoordfvEXT(coord);
}
PFNGLFOGCOORDFVEXTPROC glad_glFogCoordfvEXT = glad_on_demand_impl_glFogCoordfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFogf(GLenum pname, GLfloat param) {
    glad_glFogf = (PFNGLFOGFPROC) glad_gl_on_demand_loader("glFogf");
    glad_glFogf(pname, param);
}
PFNGLFOGFPROC glad_glFogf = glad_on_demand_impl_glFogf;
static void GLAD_API_PTR glad_on_demand_impl_glFogfv(GLenum pname, const GLfloat * params) {
    glad_glFogfv = (PFNGLFOGFVPROC) glad_gl_on_demand_loader("glFogfv");
    glad_glFogfv(pname, params);
}
PFNGLFOGFVPROC glad_glFogfv = glad_on_demand_impl_glFogfv;
static void GLAD_API_PTR glad_on_demand_impl_glFogi(GLenum pname, GLint param) {
    glad_glFogi = (PFNGLFOGIPROC) glad_gl_on_demand_loader("glFogi");
    glad_glFogi(pname, param);
}
PFNGLFOGIPROC glad_glFogi = glad_on_demand_impl_glFogi;
static void GLAD_API_PTR glad_on_demand_impl_glFogiv(GLenum pname, const GLint * params) {
    glad_glFogiv = (PFNGLFOGIVPROC) glad_gl_on_demand_loader("glFogiv");
    glad_glFogiv(pname, params);
}
PFNGLFOGIVPROC glad_glFogiv = glad_on_demand_impl_glFogiv;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) {
    glad_glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) glad_gl_on_demand_loader("glFramebufferDrawBufferEXT");
    glad_glFramebufferDrawBufferEXT(framebuffer, mode);
}
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glad_glFramebufferDrawBufferEXT = glad_on_demand_impl_glFramebufferDrawBufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) {
    glad_glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) glad_gl_on_demand_loader("glFramebufferDrawBuffersEXT");
    glad_glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
}
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glad_glFramebufferDrawBuffersEXT = glad_on_demand_impl_glFramebufferDrawBuffersEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
    glad_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC) glad_gl_on_demand_loader("glFramebufferParameteri");
    glad_glFramebufferParameteri(target, pname, param);
}
PFNGLFRAMEBUFFERPARAMETERIPROC glad_glFramebufferParameteri = glad_on_demand_impl_glFramebufferParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) {
    glad_glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC) glad_gl_on_demand_loader("glFramebufferReadBufferEXT");
    glad_glFramebufferReadBufferEXT(framebuffer, mode);
}
PFNGLFRAMEBUFFERREADBUFFEREXTPROC glad_glFramebufferReadBufferEXT = glad_on_demand_impl_glFramebufferReadBufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC) glad_gl_on_demand_loader("glFramebufferRenderbuffer");
    glad_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer = glad_on_demand_impl_glFramebufferRenderbuffer;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) glad_gl_on_demand_loader("glFramebufferRenderbufferEXT");
    glad_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
}
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glad_glFramebufferRenderbufferEXT = glad_on_demand_impl_glFramebufferRenderbufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
    glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC) glad_gl_on_demand_loader("glFramebufferTexture");
    glad_glFramebufferTexture(target, attachment, texture, level);
}
PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture = glad_on_demand_impl_glFramebufferTexture;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC) glad_gl_on_demand_loader("glFramebufferTexture1D");
    glad_glFramebufferTexture1D(target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D = glad_on_demand_impl_glFramebufferTexture1D;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) glad_gl_on_demand_loader("glFramebufferTexture1DEXT");
    glad_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glad_glFramebufferTexture1DEXT = glad_on_demand_impl_glFramebufferTexture1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC) glad_gl_on_demand_loader("glFramebufferTexture2D");
    glad_glFramebufferTexture2D(target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D = glad_on_demand_impl_glFramebufferTexture2D;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) glad_gl_on_demand_loader("glFramebufferTexture2DEXT");
    glad_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
}
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glad_glFramebufferTexture2DEXT = glad_on_demand_impl_glFramebufferTexture2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
    glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC) glad_gl_on_demand_loader("glFramebufferTexture3D");
    glad_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
}
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D = glad_on_demand_impl_glFramebufferTexture3D;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
    glad_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) glad_gl_on_demand_loader("glFramebufferTexture3DEXT");
    glad_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
}
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glad_glFramebufferTexture3DEXT = glad_on_demand_impl_glFramebufferTexture3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) {
    glad_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC) glad_gl_on_demand_loader("glFramebufferTextureARB");
    glad_glFramebufferTextureARB(target, attachment, texture, level);
}
PFNGLFRAMEBUFFERTEXTUREARBPROC glad_glFramebufferTextureARB = glad_on_demand_impl_glFramebufferTextureARB;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) {
    glad_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC) glad_gl_on_demand_loader("glFramebufferTextureEXT");
    glad_glFramebufferTextureEXT(target, attachment, texture, level);
}
PFNGLFRAMEBUFFERTEXTUREEXTPROC glad_glFramebufferTextureEXT = glad_on_demand_impl_glFramebufferTextureEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
    glad_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) glad_gl_on_demand_loader("glFramebufferTextureFaceARB");
    glad_glFramebufferTextureFaceARB(target, attachment, texture, level, face);
}
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glad_glFramebufferTextureFaceARB = glad_on_demand_impl_glFramebufferTextureFaceARB;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
    glad_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) glad_gl_on_demand_loader("glFramebufferTextureFaceEXT");
    glad_glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
}
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glad_glFramebufferTextureFaceEXT = glad_on_demand_impl_glFramebufferTextureFaceEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC) glad_gl_on_demand_loader("glFramebufferTextureLayer");
    glad_glFramebufferTextureLayer(target, attachment, texture, level, layer);
}
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer = glad_on_demand_impl_glFramebufferTextureLayer;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) glad_gl_on_demand_loader("glFramebufferTextureLayerARB");
    glad_glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
}
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glad_glFramebufferTextureLayerARB = glad_on_demand_impl_glFramebufferTextureLayerARB;
static void GLAD_API_PTR glad_on_demand_impl_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) glad_gl_on_demand_loader("glFramebufferTextureLayerEXT");
    glad_glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
}
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glad_glFramebufferTextureLayerEXT = glad_on_demand_impl_glFramebufferTextureLayerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glFrontFace(GLenum mode) {
    glad_glFrontFace = (PFNGLFRONTFACEPROC) glad_gl_on_demand_loader("glFrontFace");
    glad_glFrontFace(mode);
}
PFNGLFRONTFACEPROC glad_glFrontFace = glad_on_demand_impl_glFrontFace;
static void GLAD_API_PTR glad_on_demand_impl_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glFrustum = (PFNGLFRUSTUMPROC) glad_gl_on_demand_loader("glFrustum");
    glad_glFrustum(left, right, bottom, top, zNear, zFar);
}
PFNGLFRUSTUMPROC glad_glFrustum = glad_on_demand_impl_glFrustum;
static void GLAD_API_PTR glad_on_demand_impl_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
    glad_glFrustumfOES = (PFNGLFRUSTUMFOESPROC) glad_gl_on_demand_loader("glFrustumfOES");
    glad_glFrustumfOES(l, r, b, t, n, f);
}
PFNGLFRUSTUMFOESPROC glad_glFrustumfOES = glad_on_demand_impl_glFrustumfOES;
static void GLAD_API_PTR glad_on_demand_impl_glGenBuffers(GLsizei n, GLuint * buffers) {
    glad_glGenBuffers = (PFNGLGENBUFFERSPROC) glad_gl_on_demand_loader("glGenBuffers");
    glad_glGenBuffers(n, buffers);
}
PFNGLGENBUFFERSPROC glad_glGenBuffers = glad_on_demand_impl_glGenBuffers;
static void GLAD_API_PTR glad_on_demand_impl_glGenBuffersARB(GLsizei n, GLuint * buffers) {
    glad_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC) glad_gl_on_demand_loader("glGenBuffersARB");
    glad_glGenBuffersARB(n, buffers);
}
PFNGLGENBUFFERSARBPROC glad_glGenBuffersARB = glad_on_demand_impl_glGenBuffersARB;
static void GLAD_API_PTR glad_on_demand_impl_glGenFramebuffers(GLsizei n, GLuint * framebuffers) {
    glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC) glad_gl_on_demand_loader("glGenFramebuffers");
    glad_glGenFramebuffers(n, framebuffers);
}
PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers = glad_on_demand_impl_glGenFramebuffers;
static void GLAD_API_PTR glad_on_demand_impl_glGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) {
    glad_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC) glad_gl_on_demand_loader("glGenFramebuffersEXT");
    glad_glGenFramebuffersEXT(n, framebuffers);
}
PFNGLGENFRAMEBUFFERSEXTPROC glad_glGenFramebuffersEXT = glad_on_demand_impl_glGenFramebuffersEXT;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGenLists(GLsizei range) {
    glad_glGenLists = (PFNGLGENLISTSPROC) glad_gl_on_demand_loader("glGenLists");
    return glad_glGenLists(range);
}
PFNGLGENLISTSPROC glad_glGenLists = glad_on_demand_impl_glGenLists;
static void GLAD_API_PTR glad_on_demand_impl_glGenProgramPipelines(GLsizei n, GLuint * pipelines) {
    glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC) glad_gl_on_demand_loader("glGenProgramPipelines");
    glad_glGenProgramPipelines(n, pipelines);
}
PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines = glad_on_demand_impl_glGenProgramPipelines;
static void GLAD_API_PTR glad_on_demand_impl_glGenProgramsARB(GLsizei n, GLuint * programs) {
    glad_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC) glad_gl_on_demand_loader("glGenProgramsARB");
    glad_glGenProgramsARB(n, programs);
}
PFNGLGENPROGRAMSARBPROC glad_glGenProgramsARB = glad_on_demand_impl_glGenProgramsARB;
static void GLAD_API_PTR glad_on_demand_impl_glGenProgramsNV(GLsizei n, GLuint * programs) {
    glad_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC) glad_gl_on_demand_loader("glGenProgramsNV");
    glad_glGenProgramsNV(n, programs);
}
PFNGLGENPROGRAMSNVPROC glad_glGenProgramsNV = glad_on_demand_impl_glGenProgramsNV;
static void GLAD_API_PTR glad_on_demand_impl_glGenQueries(GLsizei n, GLuint * ids) {
    glad_glGenQueries = (PFNGLGENQUERIESPROC) glad_gl_on_demand_loader("glGenQueries");
    glad_glGenQueries(n, ids);
}
PFNGLGENQUERIESPROC glad_glGenQueries = glad_on_demand_impl_glGenQueries;
static void GLAD_API_PTR glad_on_demand_impl_glGenQueriesARB(GLsizei n, GLuint * ids) {
    glad_glGenQueriesARB = (PFNGLGENQUERIESARBPROC) glad_gl_on_demand_loader("glGenQueriesARB");
    glad_glGenQueriesARB(n, ids);
}
PFNGLGENQUERIESARBPROC glad_glGenQueriesARB = glad_on_demand_impl_glGenQueriesARB;
static void GLAD_API_PTR glad_on_demand_impl_glGenRenderbuffers(GLsizei n, GLuint * renderbuffers) {
    glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC) glad_gl_on_demand_loader("glGenRenderbuffers");
    glad_glGenRenderbuffers(n, renderbuffers);
}
PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers = glad_on_demand_impl_glGenRenderbuffers;
static void GLAD_API_PTR glad_on_demand_impl_glGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) {
    glad_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC) glad_gl_on_demand_loader("glGenRenderbuffersEXT");
    glad_glGenRenderbuffersEXT(n, renderbuffers);
}
PFNGLGENRENDERBUFFERSEXTPROC glad_glGenRenderbuffersEXT = glad_on_demand_impl_glGenRenderbuffersEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGenSamplers(GLsizei count, GLuint * samplers) {
    glad_glGenSamplers = (PFNGLGENSAMPLERSPROC) glad_gl_on_demand_loader("glGenSamplers");
    glad_glGenSamplers(count, samplers);
}
PFNGLGENSAMPLERSPROC glad_glGenSamplers = glad_on_demand_impl_glGenSamplers;
static void GLAD_API_PTR glad_on_demand_impl_glGenTextures(GLsizei n, GLuint * textures) {
    glad_glGenTextures = (PFNGLGENTEXTURESPROC) glad_gl_on_demand_loader("glGenTextures");
    glad_glGenTextures(n, textures);
}
PFNGLGENTEXTURESPROC glad_glGenTextures = glad_on_demand_impl_glGenTextures;
static void GLAD_API_PTR glad_on_demand_impl_glGenTexturesEXT(GLsizei n, GLuint * textures) {
    glad_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC) glad_gl_on_demand_loader("glGenTexturesEXT");
    glad_glGenTexturesEXT(n, textures);
}
PFNGLGENTEXTURESEXTPROC glad_glGenTexturesEXT = glad_on_demand_impl_glGenTexturesEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGenTransformFeedbacks(GLsizei n, GLuint * ids) {
    glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC) glad_gl_on_demand_loader("glGenTransformFeedbacks");
    glad_glGenTransformFeedbacks(n, ids);
}
PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks = glad_on_demand_impl_glGenTransformFeedbacks;
static void GLAD_API_PTR glad_on_demand_impl_glGenTransformFeedbacksNV(GLsizei n, GLuint * ids) {
    glad_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC) glad_gl_on_demand_loader("glGenTransformFeedbacksNV");
    glad_glGenTransformFeedbacksNV(n, ids);
}
PFNGLGENTRANSFORMFEEDBACKSNVPROC glad_glGenTransformFeedbacksNV = glad_on_demand_impl_glGenTransformFeedbacksNV;
static void GLAD_API_PTR glad_on_demand_impl_glGenVertexArrays(GLsizei n, GLuint * arrays) {
    glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC) glad_gl_on_demand_loader("glGenVertexArrays");
    glad_glGenVertexArrays(n, arrays);
}
PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays = glad_on_demand_impl_glGenVertexArrays;
static void GLAD_API_PTR glad_on_demand_impl_glGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) {
    glad_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC) glad_gl_on_demand_loader("glGenVertexArraysAPPLE");
    glad_glGenVertexArraysAPPLE(n, arrays);
}
PFNGLGENVERTEXARRAYSAPPLEPROC glad_glGenVertexArraysAPPLE = glad_on_demand_impl_glGenVertexArraysAPPLE;
static void GLAD_API_PTR glad_on_demand_impl_glGenerateMipmap(GLenum target) {
    glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC) glad_gl_on_demand_loader("glGenerateMipmap");
    glad_glGenerateMipmap(target);
}
PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap = glad_on_demand_impl_glGenerateMipmap;
static void GLAD_API_PTR glad_on_demand_impl_glGenerateMipmapEXT(GLenum target) {
    glad_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC) glad_gl_on_demand_loader("glGenerateMipmapEXT");
    glad_glGenerateMipmapEXT(target);
}
PFNGLGENERATEMIPMAPEXTPROC glad_glGenerateMipmapEXT = glad_on_demand_impl_glGenerateMipmapEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) {
    glad_glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC) glad_gl_on_demand_loader("glGenerateMultiTexMipmapEXT");
    glad_glGenerateMultiTexMipmapEXT(texunit, target);
}
PFNGLGENERATEMULTITEXMIPMAPEXTPROC glad_glGenerateMultiTexMipmapEXT = glad_on_demand_impl_glGenerateMultiTexMipmapEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGenerateTextureMipmap(GLuint texture) {
    glad_glGenerateTextureMipmap = (PFNGLGENERATETEXTUREMIPMAPPROC) glad_gl_on_demand_loader("glGenerateTextureMipmap");
    glad_glGenerateTextureMipmap(texture);
}
PFNGLGENERATETEXTUREMIPMAPPROC glad_glGenerateTextureMipmap = glad_on_demand_impl_glGenerateTextureMipmap;
static void GLAD_API_PTR glad_on_demand_impl_glGenerateTextureMipmapEXT(GLuint texture, GLenum target) {
    glad_glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC) glad_gl_on_demand_loader("glGenerateTextureMipmapEXT");
    glad_glGenerateTextureMipmapEXT(texture, target);
}
PFNGLGENERATETEXTUREMIPMAPEXTPROC glad_glGenerateTextureMipmapEXT = glad_on_demand_impl_glGenerateTextureMipmapEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) {
    glad_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) glad_gl_on_demand_loader("glGetActiveAtomicCounterBufferiv");
    glad_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glad_glGetActiveAtomicCounterBufferiv = glad_on_demand_impl_glGetActiveAtomicCounterBufferiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
    glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC) glad_gl_on_demand_loader("glGetActiveAttrib");
    glad_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}
PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib = glad_on_demand_impl_glGetActiveAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
    glad_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC) glad_gl_on_demand_loader("glGetActiveAttribARB");
    glad_glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
}
PFNGLGETACTIVEATTRIBARBPROC glad_glGetActiveAttribARB = glad_on_demand_impl_glGetActiveAttribARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
    glad_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC) glad_gl_on_demand_loader("glGetActiveSubroutineName");
    glad_glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
}
PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName = glad_on_demand_impl_glGetActiveSubroutineName;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
    glad_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) glad_gl_on_demand_loader("glGetActiveSubroutineUniformName");
    glad_glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name);
}
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName = glad_on_demand_impl_glGetActiveSubroutineUniformName;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) {
    glad_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) glad_gl_on_demand_loader("glGetActiveSubroutineUniformiv");
    glad_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv = glad_on_demand_impl_glGetActiveSubroutineUniformiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
    glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC) glad_gl_on_demand_loader("glGetActiveUniform");
    glad_glGetActiveUniform(program, index, bufSize, length, size, type, name);
}
PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform = glad_on_demand_impl_glGetActiveUniform;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
    glad_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC) glad_gl_on_demand_loader("glGetActiveUniformARB");
    glad_glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
}
PFNGLGETACTIVEUNIFORMARBPROC glad_glGetActiveUniformARB = glad_on_demand_impl_glGetActiveUniformARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) {
    glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) glad_gl_on_demand_loader("glGetActiveUniformBlockName");
    glad_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName = glad_on_demand_impl_glGetActiveUniformBlockName;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) {
    glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC) glad_gl_on_demand_loader("glGetActiveUniformBlockiv");
    glad_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv = glad_on_demand_impl_glGetActiveUniformBlockiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) {
    glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC) glad_gl_on_demand_loader("glGetActiveUniformName");
    glad_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}
PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName = glad_on_demand_impl_glGetActiveUniformName;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) {
    glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC) glad_gl_on_demand_loader("glGetActiveUniformsiv");
    glad_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}
PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv = glad_on_demand_impl_glGetActiveUniformsiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
    glad_glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC) glad_gl_on_demand_loader("glGetActiveVaryingNV");
    glad_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
}
PFNGLGETACTIVEVARYINGNVPROC glad_glGetActiveVaryingNV = glad_on_demand_impl_glGetActiveVaryingNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) {
    glad_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC) glad_gl_on_demand_loader("glGetAttachedObjectsARB");
    glad_glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
}
PFNGLGETATTACHEDOBJECTSARBPROC glad_glGetAttachedObjectsARB = glad_on_demand_impl_glGetAttachedObjectsARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) {
    glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC) glad_gl_on_demand_loader("glGetAttachedShaders");
    glad_glGetAttachedShaders(program, maxCount, count, shaders);
}
PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders = glad_on_demand_impl_glGetAttachedShaders;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetAttribLocation(GLuint program, const GLchar * name) {
    glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC) glad_gl_on_demand_loader("glGetAttribLocation");
    return glad_glGetAttribLocation(program, name);
}
PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation = glad_on_demand_impl_glGetAttribLocation;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) {
    glad_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC) glad_gl_on_demand_loader("glGetAttribLocationARB");
    return glad_glGetAttribLocationARB(programObj, name);
}
PFNGLGETATTRIBLOCATIONARBPROC glad_glGetAttribLocationARB = glad_on_demand_impl_glGetAttribLocationARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) {
    glad_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC) glad_gl_on_demand_loader("glGetBooleanIndexedvEXT");
    glad_glGetBooleanIndexedvEXT(target, index, data);
}
PFNGLGETBOOLEANINDEXEDVEXTPROC glad_glGetBooleanIndexedvEXT = glad_on_demand_impl_glGetBooleanIndexedvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetBooleani_v(GLenum target, GLuint index, GLboolean * data) {
    glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC) glad_gl_on_demand_loader("glGetBooleani_v");
    glad_glGetBooleani_v(target, index, data);
}
PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v = glad_on_demand_impl_glGetBooleani_v;
static void GLAD_API_PTR glad_on_demand_impl_glGetBooleanv(GLenum pname, GLboolean * data) {
    glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) glad_gl_on_demand_loader("glGetBooleanv");
    glad_glGetBooleanv(pname, data);
}
PFNGLGETBOOLEANVPROC glad_glGetBooleanv = glad_on_demand_impl_glGetBooleanv;
static void GLAD_API_PTR glad_on_demand_impl_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) {
    glad_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC) glad_gl_on_demand_loader("glGetBufferParameteri64v");
    glad_glGetBufferParameteri64v(target, pname, params);
}
PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v = glad_on_demand_impl_glGetBufferParameteri64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC) glad_gl_on_demand_loader("glGetBufferParameteriv");
    glad_glGetBufferParameteriv(target, pname, params);
}
PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv = glad_on_demand_impl_glGetBufferParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) {
    glad_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC) glad_gl_on_demand_loader("glGetBufferParameterivARB");
    glad_glGetBufferParameterivARB(target, pname, params);
}
PFNGLGETBUFFERPARAMETERIVARBPROC glad_glGetBufferParameterivARB = glad_on_demand_impl_glGetBufferParameterivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetBufferPointerv(GLenum target, GLenum pname, void ** params) {
    glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC) glad_gl_on_demand_loader("glGetBufferPointerv");
    glad_glGetBufferPointerv(target, pname, params);
}
PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv = glad_on_demand_impl_glGetBufferPointerv;
static void GLAD_API_PTR glad_on_demand_impl_glGetBufferPointervARB(GLenum target, GLenum pname, void ** params) {
    glad_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC) glad_gl_on_demand_loader("glGetBufferPointervARB");
    glad_glGetBufferPointervARB(target, pname, params);
}
PFNGLGETBUFFERPOINTERVARBPROC glad_glGetBufferPointervARB = glad_on_demand_impl_glGetBufferPointervARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) {
    glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glGetBufferSubData");
    glad_glGetBufferSubData(target, offset, size, data);
}
PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData = glad_on_demand_impl_glGetBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) {
    glad_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC) glad_gl_on_demand_loader("glGetBufferSubDataARB");
    glad_glGetBufferSubDataARB(target, offset, size, data);
}
PFNGLGETBUFFERSUBDATAARBPROC glad_glGetBufferSubDataARB = glad_on_demand_impl_glGetBufferSubDataARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetClipPlane(GLenum plane, GLdouble * equation) {
    glad_glGetClipPlane = (PFNGLGETCLIPPLANEPROC) glad_gl_on_demand_loader("glGetClipPlane");
    glad_glGetClipPlane(plane, equation);
}
PFNGLGETCLIPPLANEPROC glad_glGetClipPlane = glad_on_demand_impl_glGetClipPlane;
static void GLAD_API_PTR glad_on_demand_impl_glGetClipPlanefOES(GLenum plane, GLfloat * equation) {
    glad_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC) glad_gl_on_demand_loader("glGetClipPlanefOES");
    glad_glGetClipPlanefOES(plane, equation);
}
PFNGLGETCLIPPLANEFOESPROC glad_glGetClipPlanefOES = glad_on_demand_impl_glGetClipPlanefOES;
static void GLAD_API_PTR glad_on_demand_impl_glGetColorTable(GLenum target, GLenum format, GLenum type, void * table) {
    glad_glGetColorTable = (PFNGLGETCOLORTABLEPROC) glad_gl_on_demand_loader("glGetColorTable");
    glad_glGetColorTable(target, format, type, table);
}
PFNGLGETCOLORTABLEPROC glad_glGetColorTable = glad_on_demand_impl_glGetColorTable;
static void GLAD_API_PTR glad_on_demand_impl_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC) glad_gl_on_demand_loader("glGetColorTableParameterfv");
    glad_glGetColorTableParameterfv(target, pname, params);
}
PFNGLGETCOLORTABLEPARAMETERFVPROC glad_glGetColorTableParameterfv = glad_on_demand_impl_glGetColorTableParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC) glad_gl_on_demand_loader("glGetColorTableParameteriv");
    glad_glGetColorTableParameteriv(target, pname, params);
}
PFNGLGETCOLORTABLEPARAMETERIVPROC glad_glGetColorTableParameteriv = glad_on_demand_impl_glGetColorTableParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) {
    glad_glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) glad_gl_on_demand_loader("glGetCompressedMultiTexImageEXT");
    glad_glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
}
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glad_glGetCompressedMultiTexImageEXT = glad_on_demand_impl_glGetCompressedMultiTexImageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetCompressedTexImage(GLenum target, GLint level, void * img) {
    glad_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC) glad_gl_on_demand_loader("glGetCompressedTexImage");
    glad_glGetCompressedTexImage(target, level, img);
}
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage = glad_on_demand_impl_glGetCompressedTexImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetCompressedTexImageARB(GLenum target, GLint level, void * img) {
    glad_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) glad_gl_on_demand_loader("glGetCompressedTexImageARB");
    glad_glGetCompressedTexImageARB(target, level, img);
}
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glad_glGetCompressedTexImageARB = glad_on_demand_impl_glGetCompressedTexImageARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) {
    glad_glGetCompressedTextureImage = (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) glad_gl_on_demand_loader("glGetCompressedTextureImage");
    glad_glGetCompressedTextureImage(texture, level, bufSize, pixels);
}
PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC glad_glGetCompressedTextureImage = glad_on_demand_impl_glGetCompressedTextureImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) {
    glad_glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) glad_gl_on_demand_loader("glGetCompressedTextureImageEXT");
    glad_glGetCompressedTextureImageEXT(texture, target, lod, img);
}
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glad_glGetCompressedTextureImageEXT = glad_on_demand_impl_glGetCompressedTextureImageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) {
    glad_glGetCompressedTextureSubImage = (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) glad_gl_on_demand_loader("glGetCompressedTextureSubImage");
    glad_glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}
PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC glad_glGetCompressedTextureSubImage = glad_on_demand_impl_glGetCompressedTextureSubImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) {
    glad_glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC) glad_gl_on_demand_loader("glGetConvolutionFilter");
    glad_glGetConvolutionFilter(target, format, type, image);
}
PFNGLGETCONVOLUTIONFILTERPROC glad_glGetConvolutionFilter = glad_on_demand_impl_glGetConvolutionFilter;
static void GLAD_API_PTR glad_on_demand_impl_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC) glad_gl_on_demand_loader("glGetConvolutionParameterfv");
    glad_glGetConvolutionParameterfv(target, pname, params);
}
PFNGLGETCONVOLUTIONPARAMETERFVPROC glad_glGetConvolutionParameterfv = glad_on_demand_impl_glGetConvolutionParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC) glad_gl_on_demand_loader("glGetConvolutionParameteriv");
    glad_glGetConvolutionParameteriv(target, pname, params);
}
PFNGLGETCONVOLUTIONPARAMETERIVPROC glad_glGetConvolutionParameteriv = glad_on_demand_impl_glGetConvolutionParameteriv;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
    glad_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC) glad_gl_on_demand_loader("glGetDebugMessageLog");
    return glad_glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
PFNGLGETDEBUGMESSAGELOGPROC glad_glGetDebugMessageLog = glad_on_demand_impl_glGetDebugMessageLog;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGetDebugMessageLogAMD(GLuint count, GLsizei bufSize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) {
    glad_glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC) glad_gl_on_demand_loader("glGetDebugMessageLogAMD");
    return glad_glGetDebugMessageLogAMD(count, bufSize, categories, severities, ids, lengths, message);
}
PFNGLGETDEBUGMESSAGELOGAMDPROC glad_glGetDebugMessageLogAMD = glad_on_demand_impl_glGetDebugMessageLogAMD;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
    glad_glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC) glad_gl_on_demand_loader("glGetDebugMessageLogARB");
    return glad_glGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
PFNGLGETDEBUGMESSAGELOGARBPROC glad_glGetDebugMessageLogARB = glad_on_demand_impl_glGetDebugMessageLogARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) {
    glad_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC) glad_gl_on_demand_loader("glGetDoubleIndexedvEXT");
    glad_glGetDoubleIndexedvEXT(target, index, data);
}
PFNGLGETDOUBLEINDEXEDVEXTPROC glad_glGetDoubleIndexedvEXT = glad_on_demand_impl_glGetDoubleIndexedvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetDoublei_v(GLenum target, GLuint index, GLdouble * data) {
    glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC) glad_gl_on_demand_loader("glGetDoublei_v");
    glad_glGetDoublei_v(target, index, data);
}
PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v = glad_on_demand_impl_glGetDoublei_v;
static void GLAD_API_PTR glad_on_demand_impl_glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) {
    glad_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC) glad_gl_on_demand_loader("glGetDoublei_vEXT");
    glad_glGetDoublei_vEXT(pname, index, params);
}
PFNGLGETDOUBLEI_VEXTPROC glad_glGetDoublei_vEXT = glad_on_demand_impl_glGetDoublei_vEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetDoublev(GLenum pname, GLdouble * data) {
    glad_glGetDoublev = (PFNGLGETDOUBLEVPROC) glad_gl_on_demand_loader("glGetDoublev");
    glad_glGetDoublev(pname, data);
}
PFNGLGETDOUBLEVPROC glad_glGetDoublev = glad_on_demand_impl_glGetDoublev;
static GLenum GLAD_API_PTR glad_on_demand_impl_glGetError(void) {
    glad_glGetError = (PFNGLGETERRORPROC) glad_gl_on_demand_loader("glGetError");
    return glad_glGetError();
}
PFNGLGETERRORPROC glad_glGetError = glad_on_demand_impl_glGetError;
static void GLAD_API_PTR glad_on_demand_impl_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) {
    glad_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC) glad_gl_on_demand_loader("glGetFloatIndexedvEXT");
    glad_glGetFloatIndexedvEXT(target, index, data);
}
PFNGLGETFLOATINDEXEDVEXTPROC glad_glGetFloatIndexedvEXT = glad_on_demand_impl_glGetFloatIndexedvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetFloati_v(GLenum target, GLuint index, GLfloat * data) {
    glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC) glad_gl_on_demand_loader("glGetFloati_v");
    glad_glGetFloati_v(target, index, data);
}
PFNGLGETFLOATI_VPROC glad_glGetFloati_v = glad_on_demand_impl_glGetFloati_v;
static void GLAD_API_PTR glad_on_demand_impl_glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) {
    glad_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC) glad_gl_on_demand_loader("glGetFloati_vEXT");
    glad_glGetFloati_vEXT(pname, index, params);
}
PFNGLGETFLOATI_VEXTPROC glad_glGetFloati_vEXT = glad_on_demand_impl_glGetFloati_vEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetFloatv(GLenum pname, GLfloat * data) {
    glad_glGetFloatv = (PFNGLGETFLOATVPROC) glad_gl_on_demand_loader("glGetFloatv");
    glad_glGetFloatv(pname, data);
}
PFNGLGETFLOATVPROC glad_glGetFloatv = glad_on_demand_impl_glGetFloatv;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetFragDataIndex(GLuint program, const GLchar * name) {
    glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC) glad_gl_on_demand_loader("glGetFragDataIndex");
    return glad_glGetFragDataIndex(program, name);
}
PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex = glad_on_demand_impl_glGetFragDataIndex;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetFragDataLocation(GLuint program, const GLchar * name) {
    glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC) glad_gl_on_demand_loader("glGetFragDataLocation");
    return glad_glGetFragDataLocation(program, name);
}
PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation = glad_on_demand_impl_glGetFragDataLocation;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetFragDataLocationEXT(GLuint program, const GLchar * name) {
    glad_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC) glad_gl_on_demand_loader("glGetFragDataLocationEXT");
    return glad_glGetFragDataLocationEXT(program, name);
}
PFNGLGETFRAGDATALOCATIONEXTPROC glad_glGetFragDataLocationEXT = glad_on_demand_impl_glGetFragDataLocationEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
    glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) glad_gl_on_demand_loader("glGetFramebufferAttachmentParameteriv");
    glad_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv = glad_on_demand_impl_glGetFramebufferAttachmentParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) {
    glad_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetFramebufferAttachmentParameterivEXT");
    glad_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
}
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetFramebufferAttachmentParameterivEXT = glad_on_demand_impl_glGetFramebufferAttachmentParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC) glad_gl_on_demand_loader("glGetFramebufferParameteriv");
    glad_glGetFramebufferParameteriv(target, pname, params);
}
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glad_glGetFramebufferParameteriv = glad_on_demand_impl_glGetFramebufferParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) {
    glad_glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetFramebufferParameterivEXT");
    glad_glGetFramebufferParameterivEXT(framebuffer, pname, params);
}
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetFramebufferParameterivEXT = glad_on_demand_impl_glGetFramebufferParameterivEXT;
static GLenum GLAD_API_PTR glad_on_demand_impl_glGetGraphicsResetStatus(void) {
    glad_glGetGraphicsResetStatus = (PFNGLGETGRAPHICSRESETSTATUSPROC) glad_gl_on_demand_loader("glGetGraphicsResetStatus");
    return glad_glGetGraphicsResetStatus();
}
PFNGLGETGRAPHICSRESETSTATUSPROC glad_glGetGraphicsResetStatus = glad_on_demand_impl_glGetGraphicsResetStatus;
static GLenum GLAD_API_PTR glad_on_demand_impl_glGetGraphicsResetStatusARB(void) {
    glad_glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC) glad_gl_on_demand_loader("glGetGraphicsResetStatusARB");
    return glad_glGetGraphicsResetStatusARB();
}
PFNGLGETGRAPHICSRESETSTATUSARBPROC glad_glGetGraphicsResetStatusARB = glad_on_demand_impl_glGetGraphicsResetStatusARB;
static GLhandleARB GLAD_API_PTR glad_on_demand_impl_glGetHandleARB(GLenum pname) {
    glad_glGetHandleARB = (PFNGLGETHANDLEARBPROC) glad_gl_on_demand_loader("glGetHandleARB");
    return glad_glGetHandleARB(pname);
}
PFNGLGETHANDLEARBPROC glad_glGetHandleARB = glad_on_demand_impl_glGetHandleARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
    glad_glGetHistogram = (PFNGLGETHISTOGRAMPROC) glad_gl_on_demand_loader("glGetHistogram");
    glad_glGetHistogram(target, reset, format, type, values);
}
PFNGLGETHISTOGRAMPROC glad_glGetHistogram = glad_on_demand_impl_glGetHistogram;
static void GLAD_API_PTR glad_on_demand_impl_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC) glad_gl_on_demand_loader("glGetHistogramParameterfv");
    glad_glGetHistogramParameterfv(target, pname, params);
}
PFNGLGETHISTOGRAMPARAMETERFVPROC glad_glGetHistogramParameterfv = glad_on_demand_impl_glGetHistogramParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC) glad_gl_on_demand_loader("glGetHistogramParameteriv");
    glad_glGetHistogramParameteriv(target, pname, params);
}
PFNGLGETHISTOGRAMPARAMETERIVPROC glad_glGetHistogramParameteriv = glad_on_demand_impl_glGetHistogramParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) {
    glad_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC) glad_gl_on_demand_loader("glGetInfoLogARB");
    glad_glGetInfoLogARB(obj, maxLength, length, infoLog);
}
PFNGLGETINFOLOGARBPROC glad_glGetInfoLogARB = glad_on_demand_impl_glGetInfoLogARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) {
    glad_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC) glad_gl_on_demand_loader("glGetInteger64i_v");
    glad_glGetInteger64i_v(target, index, data);
}
PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v = glad_on_demand_impl_glGetInteger64i_v;
static void GLAD_API_PTR glad_on_demand_impl_glGetInteger64v(GLenum pname, GLint64 * data) {
    glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC) glad_gl_on_demand_loader("glGetInteger64v");
    glad_glGetInteger64v(pname, data);
}
PFNGLGETINTEGER64VPROC glad_glGetInteger64v = glad_on_demand_impl_glGetInteger64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) {
    glad_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC) glad_gl_on_demand_loader("glGetIntegerIndexedvEXT");
    glad_glGetIntegerIndexedvEXT(target, index, data);
}
PFNGLGETINTEGERINDEXEDVEXTPROC glad_glGetIntegerIndexedvEXT = glad_on_demand_impl_glGetIntegerIndexedvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetIntegeri_v(GLenum target, GLuint index, GLint * data) {
    glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC) glad_gl_on_demand_loader("glGetIntegeri_v");
    glad_glGetIntegeri_v(target, index, data);
}
PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v = glad_on_demand_impl_glGetIntegeri_v;
static void GLAD_API_PTR glad_on_demand_impl_glGetIntegerv(GLenum pname, GLint * data) {
    glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) glad_gl_on_demand_loader("glGetIntegerv");
    glad_glGetIntegerv(pname, data);
}
PFNGLGETINTEGERVPROC glad_glGetIntegerv = glad_on_demand_impl_glGetIntegerv;
static void GLAD_API_PTR glad_on_demand_impl_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 * params) {
    glad_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC) glad_gl_on_demand_loader("glGetInternalformati64v");
    glad_glGetInternalformati64v(target, internalformat, pname, count, params);
}
PFNGLGETINTERNALFORMATI64VPROC glad_glGetInternalformati64v = glad_on_demand_impl_glGetInternalformati64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint * params) {
    glad_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC) glad_gl_on_demand_loader("glGetInternalformativ");
    glad_glGetInternalformativ(target, internalformat, pname, count, params);
}
PFNGLGETINTERNALFORMATIVPROC glad_glGetInternalformativ = glad_on_demand_impl_glGetInternalformativ;
static void GLAD_API_PTR glad_on_demand_impl_glGetLightfv(GLenum light, GLenum pname, GLfloat * params) {
    glad_glGetLightfv = (PFNGLGETLIGHTFVPROC) glad_gl_on_demand_loader("glGetLightfv");
    glad_glGetLightfv(light, pname, params);
}
PFNGLGETLIGHTFVPROC glad_glGetLightfv = glad_on_demand_impl_glGetLightfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetLightiv(GLenum light, GLenum pname, GLint * params) {
    glad_glGetLightiv = (PFNGLGETLIGHTIVPROC) glad_gl_on_demand_loader("glGetLightiv");
    glad_glGetLightiv(light, pname, params);
}
PFNGLGETLIGHTIVPROC glad_glGetLightiv = glad_on_demand_impl_glGetLightiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMapdv(GLenum target, GLenum query, GLdouble * v) {
    glad_glGetMapdv = (PFNGLGETMAPDVPROC) glad_gl_on_demand_loader("glGetMapdv");
    glad_glGetMapdv(target, query, v);
}
PFNGLGETMAPDVPROC glad_glGetMapdv = glad_on_demand_impl_glGetMapdv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMapfv(GLenum target, GLenum query, GLfloat * v) {
    glad_glGetMapfv = (PFNGLGETMAPFVPROC) glad_gl_on_demand_loader("glGetMapfv");
    glad_glGetMapfv(target, query, v);
}
PFNGLGETMAPFVPROC glad_glGetMapfv = glad_on_demand_impl_glGetMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMapiv(GLenum target, GLenum query, GLint * v) {
    glad_glGetMapiv = (PFNGLGETMAPIVPROC) glad_gl_on_demand_loader("glGetMapiv");
    glad_glGetMapiv(target, query, v);
}
PFNGLGETMAPIVPROC glad_glGetMapiv = glad_on_demand_impl_glGetMapiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) {
    glad_glGetMaterialfv = (PFNGLGETMATERIALFVPROC) glad_gl_on_demand_loader("glGetMaterialfv");
    glad_glGetMaterialfv(face, pname, params);
}
PFNGLGETMATERIALFVPROC glad_glGetMaterialfv = glad_on_demand_impl_glGetMaterialfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMaterialiv(GLenum face, GLenum pname, GLint * params) {
    glad_glGetMaterialiv = (PFNGLGETMATERIALIVPROC) glad_gl_on_demand_loader("glGetMaterialiv");
    glad_glGetMaterialiv(face, pname, params);
}
PFNGLGETMATERIALIVPROC glad_glGetMaterialiv = glad_on_demand_impl_glGetMaterialiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) {
    glad_glGetMinmax = (PFNGLGETMINMAXPROC) glad_gl_on_demand_loader("glGetMinmax");
    glad_glGetMinmax(target, reset, format, type, values);
}
PFNGLGETMINMAXPROC glad_glGetMinmax = glad_on_demand_impl_glGetMinmax;
static void GLAD_API_PTR glad_on_demand_impl_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC) glad_gl_on_demand_loader("glGetMinmaxParameterfv");
    glad_glGetMinmaxParameterfv(target, pname, params);
}
PFNGLGETMINMAXPARAMETERFVPROC glad_glGetMinmaxParameterfv = glad_on_demand_impl_glGetMinmaxParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC) glad_gl_on_demand_loader("glGetMinmaxParameteriv");
    glad_glGetMinmaxParameteriv(target, pname, params);
}
PFNGLGETMINMAXPARAMETERIVPROC glad_glGetMinmaxParameteriv = glad_on_demand_impl_glGetMinmaxParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexEnvfvEXT");
    glad_glGetMultiTexEnvfvEXT(texunit, target, pname, params);
}
PFNGLGETMULTITEXENVFVEXTPROC glad_glGetMultiTexEnvfvEXT = glad_on_demand_impl_glGetMultiTexEnvfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
    glad_glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexEnvivEXT");
    glad_glGetMultiTexEnvivEXT(texunit, target, pname, params);
}
PFNGLGETMULTITEXENVIVEXTPROC glad_glGetMultiTexEnvivEXT = glad_on_demand_impl_glGetMultiTexEnvivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) {
    glad_glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexGendvEXT");
    glad_glGetMultiTexGendvEXT(texunit, coord, pname, params);
}
PFNGLGETMULTITEXGENDVEXTPROC glad_glGetMultiTexGendvEXT = glad_on_demand_impl_glGetMultiTexGendvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) {
    glad_glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexGenfvEXT");
    glad_glGetMultiTexGenfvEXT(texunit, coord, pname, params);
}
PFNGLGETMULTITEXGENFVEXTPROC glad_glGetMultiTexGenfvEXT = glad_on_demand_impl_glGetMultiTexGenfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) {
    glad_glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexGenivEXT");
    glad_glGetMultiTexGenivEXT(texunit, coord, pname, params);
}
PFNGLGETMULTITEXGENIVEXTPROC glad_glGetMultiTexGenivEXT = glad_on_demand_impl_glGetMultiTexGenivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
    glad_glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC) glad_gl_on_demand_loader("glGetMultiTexImageEXT");
    glad_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
}
PFNGLGETMULTITEXIMAGEEXTPROC glad_glGetMultiTexImageEXT = glad_on_demand_impl_glGetMultiTexImageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) {
    glad_glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexLevelParameterfvEXT");
    glad_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
}
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glad_glGetMultiTexLevelParameterfvEXT = glad_on_demand_impl_glGetMultiTexLevelParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) {
    glad_glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexLevelParameterivEXT");
    glad_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
}
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glad_glGetMultiTexLevelParameterivEXT = glad_on_demand_impl_glGetMultiTexLevelParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
    glad_glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexParameterIivEXT");
    glad_glGetMultiTexParameterIivEXT(texunit, target, pname, params);
}
PFNGLGETMULTITEXPARAMETERIIVEXTPROC glad_glGetMultiTexParameterIivEXT = glad_on_demand_impl_glGetMultiTexParameterIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) {
    glad_glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexParameterIuivEXT");
    glad_glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
}
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glad_glGetMultiTexParameterIuivEXT = glad_on_demand_impl_glGetMultiTexParameterIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexParameterfvEXT");
    glad_glGetMultiTexParameterfvEXT(texunit, target, pname, params);
}
PFNGLGETMULTITEXPARAMETERFVEXTPROC glad_glGetMultiTexParameterfvEXT = glad_on_demand_impl_glGetMultiTexParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) {
    glad_glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetMultiTexParameterivEXT");
    glad_glGetMultiTexParameterivEXT(texunit, target, pname, params);
}
PFNGLGETMULTITEXPARAMETERIVEXTPROC glad_glGetMultiTexParameterivEXT = glad_on_demand_impl_glGetMultiTexParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) {
    glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC) glad_gl_on_demand_loader("glGetMultisamplefv");
    glad_glGetMultisamplefv(pname, index, val);
}
PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv = glad_on_demand_impl_glGetMultisamplefv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) {
    glad_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC) glad_gl_on_demand_loader("glGetMultisamplefvNV");
    glad_glGetMultisamplefvNV(pname, index, val);
}
PFNGLGETMULTISAMPLEFVNVPROC glad_glGetMultisamplefvNV = glad_on_demand_impl_glGetMultisamplefvNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) {
    glad_glGetNamedBufferParameteri64v = (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) glad_gl_on_demand_loader("glGetNamedBufferParameteri64v");
    glad_glGetNamedBufferParameteri64v(buffer, pname, params);
}
PFNGLGETNAMEDBUFFERPARAMETERI64VPROC glad_glGetNamedBufferParameteri64v = glad_on_demand_impl_glGetNamedBufferParameteri64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) {
    glad_glGetNamedBufferParameteriv = (PFNGLGETNAMEDBUFFERPARAMETERIVPROC) glad_gl_on_demand_loader("glGetNamedBufferParameteriv");
    glad_glGetNamedBufferParameteriv(buffer, pname, params);
}
PFNGLGETNAMEDBUFFERPARAMETERIVPROC glad_glGetNamedBufferParameteriv = glad_on_demand_impl_glGetNamedBufferParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) {
    glad_glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetNamedBufferParameterivEXT");
    glad_glGetNamedBufferParameterivEXT(buffer, pname, params);
}
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glad_glGetNamedBufferParameterivEXT = glad_on_demand_impl_glGetNamedBufferParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) {
    glad_glGetNamedBufferPointerv = (PFNGLGETNAMEDBUFFERPOINTERVPROC) glad_gl_on_demand_loader("glGetNamedBufferPointerv");
    glad_glGetNamedBufferPointerv(buffer, pname, params);
}
PFNGLGETNAMEDBUFFERPOINTERVPROC glad_glGetNamedBufferPointerv = glad_on_demand_impl_glGetNamedBufferPointerv;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) {
    glad_glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) glad_gl_on_demand_loader("glGetNamedBufferPointervEXT");
    glad_glGetNamedBufferPointervEXT(buffer, pname, params);
}
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glad_glGetNamedBufferPointervEXT = glad_on_demand_impl_glGetNamedBufferPointervEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) {
    glad_glGetNamedBufferSubData = (PFNGLGETNAMEDBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glGetNamedBufferSubData");
    glad_glGetNamedBufferSubData(buffer, offset, size, data);
}
PFNGLGETNAMEDBUFFERSUBDATAPROC glad_glGetNamedBufferSubData = glad_on_demand_impl_glGetNamedBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) {
    glad_glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) glad_gl_on_demand_loader("glGetNamedBufferSubDataEXT");
    glad_glGetNamedBufferSubDataEXT(buffer, offset, size, data);
}
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glad_glGetNamedBufferSubDataEXT = glad_on_demand_impl_glGetNamedBufferSubDataEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) {
    glad_glGetNamedFramebufferAttachmentParameteriv = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) glad_gl_on_demand_loader("glGetNamedFramebufferAttachmentParameteriv");
    glad_glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
}
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetNamedFramebufferAttachmentParameteriv = glad_on_demand_impl_glGetNamedFramebufferAttachmentParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) {
    glad_glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetNamedFramebufferAttachmentParameterivEXT");
    glad_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
}
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glad_glGetNamedFramebufferAttachmentParameterivEXT = glad_on_demand_impl_glGetNamedFramebufferAttachmentParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) {
    glad_glGetNamedFramebufferParameteriv = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) glad_gl_on_demand_loader("glGetNamedFramebufferParameteriv");
    glad_glGetNamedFramebufferParameteriv(framebuffer, pname, param);
}
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC glad_glGetNamedFramebufferParameteriv = glad_on_demand_impl_glGetNamedFramebufferParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) {
    glad_glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetNamedFramebufferParameterivEXT");
    glad_glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
}
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glad_glGetNamedFramebufferParameterivEXT = glad_on_demand_impl_glGetNamedFramebufferParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) {
    glad_glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) glad_gl_on_demand_loader("glGetNamedProgramLocalParameterIivEXT");
    glad_glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glad_glGetNamedProgramLocalParameterIivEXT = glad_on_demand_impl_glGetNamedProgramLocalParameterIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) {
    glad_glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) glad_gl_on_demand_loader("glGetNamedProgramLocalParameterIuivEXT");
    glad_glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glad_glGetNamedProgramLocalParameterIuivEXT = glad_on_demand_impl_glGetNamedProgramLocalParameterIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) {
    glad_glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) glad_gl_on_demand_loader("glGetNamedProgramLocalParameterdvEXT");
    glad_glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glad_glGetNamedProgramLocalParameterdvEXT = glad_on_demand_impl_glGetNamedProgramLocalParameterdvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) {
    glad_glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glGetNamedProgramLocalParameterfvEXT");
    glad_glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
}
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glad_glGetNamedProgramLocalParameterfvEXT = glad_on_demand_impl_glGetNamedProgramLocalParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) {
    glad_glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) glad_gl_on_demand_loader("glGetNamedProgramStringEXT");
    glad_glGetNamedProgramStringEXT(program, target, pname, string);
}
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glad_glGetNamedProgramStringEXT = glad_on_demand_impl_glGetNamedProgramStringEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) {
    glad_glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC) glad_gl_on_demand_loader("glGetNamedProgramivEXT");
    glad_glGetNamedProgramivEXT(program, target, pname, params);
}
PFNGLGETNAMEDPROGRAMIVEXTPROC glad_glGetNamedProgramivEXT = glad_on_demand_impl_glGetNamedProgramivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) {
    glad_glGetNamedRenderbufferParameteriv = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) glad_gl_on_demand_loader("glGetNamedRenderbufferParameteriv");
    glad_glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
}
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC glad_glGetNamedRenderbufferParameteriv = glad_on_demand_impl_glGetNamedRenderbufferParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) {
    glad_glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetNamedRenderbufferParameterivEXT");
    glad_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
}
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glad_glGetNamedRenderbufferParameterivEXT = glad_on_demand_impl_glGetNamedRenderbufferParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) {
    glad_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC) glad_gl_on_demand_loader("glGetObjectLabel");
    glad_glGetObjectLabel(identifier, name, bufSize, length, label);
}
PFNGLGETOBJECTLABELPROC glad_glGetObjectLabel = glad_on_demand_impl_glGetObjectLabel;
static void GLAD_API_PTR glad_on_demand_impl_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) {
    glad_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC) glad_gl_on_demand_loader("glGetObjectParameterfvARB");
    glad_glGetObjectParameterfvARB(obj, pname, params);
}
PFNGLGETOBJECTPARAMETERFVARBPROC glad_glGetObjectParameterfvARB = glad_on_demand_impl_glGetObjectParameterfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) {
    glad_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC) glad_gl_on_demand_loader("glGetObjectParameterivARB");
    glad_glGetObjectParameterivARB(obj, pname, params);
}
PFNGLGETOBJECTPARAMETERIVARBPROC glad_glGetObjectParameterivARB = glad_on_demand_impl_glGetObjectParameterivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) {
    glad_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC) glad_gl_on_demand_loader("glGetObjectPtrLabel");
    glad_glGetObjectPtrLabel(ptr, bufSize, length, label);
}
PFNGLGETOBJECTPTRLABELPROC glad_glGetObjectPtrLabel = glad_on_demand_impl_glGetObjectPtrLabel;
static void GLAD_API_PTR glad_on_demand_impl_glGetPixelMapfv(GLenum map, GLfloat * values) {
    glad_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC) glad_gl_on_demand_loader("glGetPixelMapfv");
    glad_glGetPixelMapfv(map, values);
}
PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv = glad_on_demand_impl_glGetPixelMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPixelMapuiv(GLenum map, GLuint * values) {
    glad_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC) glad_gl_on_demand_loader("glGetPixelMapuiv");
    glad_glGetPixelMapuiv(map, values);
}
PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv = glad_on_demand_impl_glGetPixelMapuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPixelMapusv(GLenum map, GLushort * values) {
    glad_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC) glad_gl_on_demand_loader("glGetPixelMapusv");
    glad_glGetPixelMapusv(map, values);
}
PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv = glad_on_demand_impl_glGetPixelMapusv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) {
    glad_glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC) glad_gl_on_demand_loader("glGetPointerIndexedvEXT");
    glad_glGetPointerIndexedvEXT(target, index, data);
}
PFNGLGETPOINTERINDEXEDVEXTPROC glad_glGetPointerIndexedvEXT = glad_on_demand_impl_glGetPointerIndexedvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) {
    glad_glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC) glad_gl_on_demand_loader("glGetPointeri_vEXT");
    glad_glGetPointeri_vEXT(pname, index, params);
}
PFNGLGETPOINTERI_VEXTPROC glad_glGetPointeri_vEXT = glad_on_demand_impl_glGetPointeri_vEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetPointerv(GLenum pname, void ** params) {
    glad_glGetPointerv = (PFNGLGETPOINTERVPROC) glad_gl_on_demand_loader("glGetPointerv");
    glad_glGetPointerv(pname, params);
}
PFNGLGETPOINTERVPROC glad_glGetPointerv = glad_on_demand_impl_glGetPointerv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPointervEXT(GLenum pname, void ** params) {
    glad_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC) glad_gl_on_demand_loader("glGetPointervEXT");
    glad_glGetPointervEXT(pname, params);
}
PFNGLGETPOINTERVEXTPROC glad_glGetPointervEXT = glad_on_demand_impl_glGetPointervEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetPolygonStipple(GLubyte * mask) {
    glad_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC) glad_gl_on_demand_loader("glGetPolygonStipple");
    glad_glGetPolygonStipple(mask);
}
PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple = glad_on_demand_impl_glGetPolygonStipple;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
    glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC) glad_gl_on_demand_loader("glGetProgramBinary");
    glad_glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}
PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary = glad_on_demand_impl_glGetProgramBinary;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) {
    glad_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC) glad_gl_on_demand_loader("glGetProgramEnvParameterdvARB");
    glad_glGetProgramEnvParameterdvARB(target, index, params);
}
PFNGLGETPROGRAMENVPARAMETERDVARBPROC glad_glGetProgramEnvParameterdvARB = glad_on_demand_impl_glGetProgramEnvParameterdvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) {
    glad_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC) glad_gl_on_demand_loader("glGetProgramEnvParameterfvARB");
    glad_glGetProgramEnvParameterfvARB(target, index, params);
}
PFNGLGETPROGRAMENVPARAMETERFVARBPROC glad_glGetProgramEnvParameterfvARB = glad_on_demand_impl_glGetProgramEnvParameterfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
    glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC) glad_gl_on_demand_loader("glGetProgramInfoLog");
    glad_glGetProgramInfoLog(program, bufSize, length, infoLog);
}
PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog = glad_on_demand_impl_glGetProgramInfoLog;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) {
    glad_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC) glad_gl_on_demand_loader("glGetProgramInterfaceiv");
    glad_glGetProgramInterfaceiv(program, programInterface, pname, params);
}
PFNGLGETPROGRAMINTERFACEIVPROC glad_glGetProgramInterfaceiv = glad_on_demand_impl_glGetProgramInterfaceiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) {
    glad_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) glad_gl_on_demand_loader("glGetProgramLocalParameterdvARB");
    glad_glGetProgramLocalParameterdvARB(target, index, params);
}
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glad_glGetProgramLocalParameterdvARB = glad_on_demand_impl_glGetProgramLocalParameterdvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) {
    glad_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) glad_gl_on_demand_loader("glGetProgramLocalParameterfvARB");
    glad_glGetProgramLocalParameterfvARB(target, index, params);
}
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glad_glGetProgramLocalParameterfvARB = glad_on_demand_impl_glGetProgramLocalParameterfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) {
    glad_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC) glad_gl_on_demand_loader("glGetProgramParameterdvNV");
    glad_glGetProgramParameterdvNV(target, index, pname, params);
}
PFNGLGETPROGRAMPARAMETERDVNVPROC glad_glGetProgramParameterdvNV = glad_on_demand_impl_glGetProgramParameterdvNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) {
    glad_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC) glad_gl_on_demand_loader("glGetProgramParameterfvNV");
    glad_glGetProgramParameterfvNV(target, index, pname, params);
}
PFNGLGETPROGRAMPARAMETERFVNVPROC glad_glGetProgramParameterfvNV = glad_on_demand_impl_glGetProgramParameterfvNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
    glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC) glad_gl_on_demand_loader("glGetProgramPipelineInfoLog");
    glad_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog = glad_on_demand_impl_glGetProgramPipelineInfoLog;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) {
    glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC) glad_gl_on_demand_loader("glGetProgramPipelineiv");
    glad_glGetProgramPipelineiv(pipeline, pname, params);
}
PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv = glad_on_demand_impl_glGetProgramPipelineiv;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) {
    glad_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC) glad_gl_on_demand_loader("glGetProgramResourceIndex");
    return glad_glGetProgramResourceIndex(program, programInterface, name);
}
PFNGLGETPROGRAMRESOURCEINDEXPROC glad_glGetProgramResourceIndex = glad_on_demand_impl_glGetProgramResourceIndex;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) {
    glad_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC) glad_gl_on_demand_loader("glGetProgramResourceLocation");
    return glad_glGetProgramResourceLocation(program, programInterface, name);
}
PFNGLGETPROGRAMRESOURCELOCATIONPROC glad_glGetProgramResourceLocation = glad_on_demand_impl_glGetProgramResourceLocation;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) {
    glad_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) glad_gl_on_demand_loader("glGetProgramResourceLocationIndex");
    return glad_glGetProgramResourceLocationIndex(program, programInterface, name);
}
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glad_glGetProgramResourceLocationIndex = glad_on_demand_impl_glGetProgramResourceLocationIndex;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) {
    glad_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC) glad_gl_on_demand_loader("glGetProgramResourceName");
    glad_glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
}
PFNGLGETPROGRAMRESOURCENAMEPROC glad_glGetProgramResourceName = glad_on_demand_impl_glGetProgramResourceName;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei count, GLsizei * length, GLint * params) {
    glad_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC) glad_gl_on_demand_loader("glGetProgramResourceiv");
    glad_glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
}
PFNGLGETPROGRAMRESOURCEIVPROC glad_glGetProgramResourceiv = glad_on_demand_impl_glGetProgramResourceiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) {
    glad_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC) glad_gl_on_demand_loader("glGetProgramStageiv");
    glad_glGetProgramStageiv(program, shadertype, pname, values);
}
PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv = glad_on_demand_impl_glGetProgramStageiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramStringARB(GLenum target, GLenum pname, void * string) {
    glad_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC) glad_gl_on_demand_loader("glGetProgramStringARB");
    glad_glGetProgramStringARB(target, pname, string);
}
PFNGLGETPROGRAMSTRINGARBPROC glad_glGetProgramStringARB = glad_on_demand_impl_glGetProgramStringARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) {
    glad_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC) glad_gl_on_demand_loader("glGetProgramStringNV");
    glad_glGetProgramStringNV(id, pname, program);
}
PFNGLGETPROGRAMSTRINGNVPROC glad_glGetProgramStringNV = glad_on_demand_impl_glGetProgramStringNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramiv(GLuint program, GLenum pname, GLint * params) {
    glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC) glad_gl_on_demand_loader("glGetProgramiv");
    glad_glGetProgramiv(program, pname, params);
}
PFNGLGETPROGRAMIVPROC glad_glGetProgramiv = glad_on_demand_impl_glGetProgramiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramivARB(GLenum target, GLenum pname, GLint * params) {
    glad_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC) glad_gl_on_demand_loader("glGetProgramivARB");
    glad_glGetProgramivARB(target, pname, params);
}
PFNGLGETPROGRAMIVARBPROC glad_glGetProgramivARB = glad_on_demand_impl_glGetProgramivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetProgramivNV(GLuint id, GLenum pname, GLint * params) {
    glad_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC) glad_gl_on_demand_loader("glGetProgramivNV");
    glad_glGetProgramivNV(id, pname, params);
}
PFNGLGETPROGRAMIVNVPROC glad_glGetProgramivNV = glad_on_demand_impl_glGetProgramivNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjecti64v = (PFNGLGETQUERYBUFFEROBJECTI64VPROC) glad_gl_on_demand_loader("glGetQueryBufferObjecti64v");
    glad_glGetQueryBufferObjecti64v(id, buffer, pname, offset);
}
PFNGLGETQUERYBUFFEROBJECTI64VPROC glad_glGetQueryBufferObjecti64v = glad_on_demand_impl_glGetQueryBufferObjecti64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjectiv = (PFNGLGETQUERYBUFFEROBJECTIVPROC) glad_gl_on_demand_loader("glGetQueryBufferObjectiv");
    glad_glGetQueryBufferObjectiv(id, buffer, pname, offset);
}
PFNGLGETQUERYBUFFEROBJECTIVPROC glad_glGetQueryBufferObjectiv = glad_on_demand_impl_glGetQueryBufferObjectiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjectui64v = (PFNGLGETQUERYBUFFEROBJECTUI64VPROC) glad_gl_on_demand_loader("glGetQueryBufferObjectui64v");
    glad_glGetQueryBufferObjectui64v(id, buffer, pname, offset);
}
PFNGLGETQUERYBUFFEROBJECTUI64VPROC glad_glGetQueryBufferObjectui64v = glad_on_demand_impl_glGetQueryBufferObjectui64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) {
    glad_glGetQueryBufferObjectuiv = (PFNGLGETQUERYBUFFEROBJECTUIVPROC) glad_gl_on_demand_loader("glGetQueryBufferObjectuiv");
    glad_glGetQueryBufferObjectuiv(id, buffer, pname, offset);
}
PFNGLGETQUERYBUFFEROBJECTUIVPROC glad_glGetQueryBufferObjectuiv = glad_on_demand_impl_glGetQueryBufferObjectuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) {
    glad_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC) glad_gl_on_demand_loader("glGetQueryIndexediv");
    glad_glGetQueryIndexediv(target, index, pname, params);
}
PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv = glad_on_demand_impl_glGetQueryIndexediv;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) {
    glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC) glad_gl_on_demand_loader("glGetQueryObjecti64v");
    glad_glGetQueryObjecti64v(id, pname, params);
}
PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v = glad_on_demand_impl_glGetQueryObjecti64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) {
    glad_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC) glad_gl_on_demand_loader("glGetQueryObjecti64vEXT");
    glad_glGetQueryObjecti64vEXT(id, pname, params);
}
PFNGLGETQUERYOBJECTI64VEXTPROC glad_glGetQueryObjecti64vEXT = glad_on_demand_impl_glGetQueryObjecti64vEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) {
    glad_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC) glad_gl_on_demand_loader("glGetQueryObjectiv");
    glad_glGetQueryObjectiv(id, pname, params);
}
PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv = glad_on_demand_impl_glGetQueryObjectiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) {
    glad_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC) glad_gl_on_demand_loader("glGetQueryObjectivARB");
    glad_glGetQueryObjectivARB(id, pname, params);
}
PFNGLGETQUERYOBJECTIVARBPROC glad_glGetQueryObjectivARB = glad_on_demand_impl_glGetQueryObjectivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) {
    glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC) glad_gl_on_demand_loader("glGetQueryObjectui64v");
    glad_glGetQueryObjectui64v(id, pname, params);
}
PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v = glad_on_demand_impl_glGetQueryObjectui64v;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) {
    glad_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC) glad_gl_on_demand_loader("glGetQueryObjectui64vEXT");
    glad_glGetQueryObjectui64vEXT(id, pname, params);
}
PFNGLGETQUERYOBJECTUI64VEXTPROC glad_glGetQueryObjectui64vEXT = glad_on_demand_impl_glGetQueryObjectui64vEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) {
    glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC) glad_gl_on_demand_loader("glGetQueryObjectuiv");
    glad_glGetQueryObjectuiv(id, pname, params);
}
PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv = glad_on_demand_impl_glGetQueryObjectuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) {
    glad_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC) glad_gl_on_demand_loader("glGetQueryObjectuivARB");
    glad_glGetQueryObjectuivARB(id, pname, params);
}
PFNGLGETQUERYOBJECTUIVARBPROC glad_glGetQueryObjectuivARB = glad_on_demand_impl_glGetQueryObjectuivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryiv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetQueryiv = (PFNGLGETQUERYIVPROC) glad_gl_on_demand_loader("glGetQueryiv");
    glad_glGetQueryiv(target, pname, params);
}
PFNGLGETQUERYIVPROC glad_glGetQueryiv = glad_on_demand_impl_glGetQueryiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetQueryivARB(GLenum target, GLenum pname, GLint * params) {
    glad_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC) glad_gl_on_demand_loader("glGetQueryivARB");
    glad_glGetQueryivARB(target, pname, params);
}
PFNGLGETQUERYIVARBPROC glad_glGetQueryivARB = glad_on_demand_impl_glGetQueryivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC) glad_gl_on_demand_loader("glGetRenderbufferParameteriv");
    glad_glGetRenderbufferParameteriv(target, pname, params);
}
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv = glad_on_demand_impl_glGetRenderbufferParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) {
    glad_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetRenderbufferParameterivEXT");
    glad_glGetRenderbufferParameterivEXT(target, pname, params);
}
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glad_glGetRenderbufferParameterivEXT = glad_on_demand_impl_glGetRenderbufferParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) {
    glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC) glad_gl_on_demand_loader("glGetSamplerParameterIiv");
    glad_glGetSamplerParameterIiv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv = glad_on_demand_impl_glGetSamplerParameterIiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) {
    glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC) glad_gl_on_demand_loader("glGetSamplerParameterIuiv");
    glad_glGetSamplerParameterIuiv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv = glad_on_demand_impl_glGetSamplerParameterIuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) {
    glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC) glad_gl_on_demand_loader("glGetSamplerParameterfv");
    glad_glGetSamplerParameterfv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv = glad_on_demand_impl_glGetSamplerParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) {
    glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC) glad_gl_on_demand_loader("glGetSamplerParameteriv");
    glad_glGetSamplerParameteriv(sampler, pname, params);
}
PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv = glad_on_demand_impl_glGetSamplerParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) {
    glad_glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC) glad_gl_on_demand_loader("glGetSeparableFilter");
    glad_glGetSeparableFilter(target, format, type, row, column, span);
}
PFNGLGETSEPARABLEFILTERPROC glad_glGetSeparableFilter = glad_on_demand_impl_glGetSeparableFilter;
static void GLAD_API_PTR glad_on_demand_impl_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
    glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC) glad_gl_on_demand_loader("glGetShaderInfoLog");
    glad_glGetShaderInfoLog(shader, bufSize, length, infoLog);
}
PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog = glad_on_demand_impl_glGetShaderInfoLog;
static void GLAD_API_PTR glad_on_demand_impl_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) {
    glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC) glad_gl_on_demand_loader("glGetShaderPrecisionFormat");
    glad_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}
PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat = glad_on_demand_impl_glGetShaderPrecisionFormat;
static void GLAD_API_PTR glad_on_demand_impl_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
    glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC) glad_gl_on_demand_loader("glGetShaderSource");
    glad_glGetShaderSource(shader, bufSize, length, source);
}
PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource = glad_on_demand_impl_glGetShaderSource;
static void GLAD_API_PTR glad_on_demand_impl_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) {
    glad_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC) glad_gl_on_demand_loader("glGetShaderSourceARB");
    glad_glGetShaderSourceARB(obj, maxLength, length, source);
}
PFNGLGETSHADERSOURCEARBPROC glad_glGetShaderSourceARB = glad_on_demand_impl_glGetShaderSourceARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetShaderiv(GLuint shader, GLenum pname, GLint * params) {
    glad_glGetShaderiv = (PFNGLGETSHADERIVPROC) glad_gl_on_demand_loader("glGetShaderiv");
    glad_glGetShaderiv(shader, pname, params);
}
PFNGLGETSHADERIVPROC glad_glGetShaderiv = glad_on_demand_impl_glGetShaderiv;
static const GLubyte * GLAD_API_PTR glad_on_demand_impl_glGetString(GLenum name) {
    glad_glGetString = (PFNGLGETSTRINGPROC) glad_gl_on_demand_loader("glGetString");
    return glad_glGetString(name);
}
PFNGLGETSTRINGPROC glad_glGetString = glad_on_demand_impl_glGetString;
static const GLubyte * GLAD_API_PTR glad_on_demand_impl_glGetStringi(GLenum name, GLuint index) {
    glad_glGetStringi = (PFNGLGETSTRINGIPROC) glad_gl_on_demand_loader("glGetStringi");
    return glad_glGetStringi(name, index);
}
PFNGLGETSTRINGIPROC glad_glGetStringi = glad_on_demand_impl_glGetStringi;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) {
    glad_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC) glad_gl_on_demand_loader("glGetSubroutineIndex");
    return glad_glGetSubroutineIndex(program, shadertype, name);
}
PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex = glad_on_demand_impl_glGetSubroutineIndex;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) {
    glad_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) glad_gl_on_demand_loader("glGetSubroutineUniformLocation");
    return glad_glGetSubroutineUniformLocation(program, shadertype, name);
}
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation = glad_on_demand_impl_glGetSubroutineUniformLocation;
static void GLAD_API_PTR glad_on_demand_impl_glGetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei * length, GLint * values) {
    glad_glGetSynciv = (PFNGLGETSYNCIVPROC) glad_gl_on_demand_loader("glGetSynciv");
    glad_glGetSynciv(sync, pname, count, length, values);
}
PFNGLGETSYNCIVPROC glad_glGetSynciv = glad_on_demand_impl_glGetSynciv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC) glad_gl_on_demand_loader("glGetTexEnvfv");
    glad_glGetTexEnvfv(target, pname, params);
}
PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv = glad_on_demand_impl_glGetTexEnvfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexEnviv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetTexEnviv = (PFNGLGETTEXENVIVPROC) glad_gl_on_demand_loader("glGetTexEnviv");
    glad_glGetTexEnviv(target, pname, params);
}
PFNGLGETTEXENVIVPROC glad_glGetTexEnviv = glad_on_demand_impl_glGetTexEnviv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) {
    glad_glGetTexGendv = (PFNGLGETTEXGENDVPROC) glad_gl_on_demand_loader("glGetTexGendv");
    glad_glGetTexGendv(coord, pname, params);
}
PFNGLGETTEXGENDVPROC glad_glGetTexGendv = glad_on_demand_impl_glGetTexGendv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) {
    glad_glGetTexGenfv = (PFNGLGETTEXGENFVPROC) glad_gl_on_demand_loader("glGetTexGenfv");
    glad_glGetTexGenfv(coord, pname, params);
}
PFNGLGETTEXGENFVPROC glad_glGetTexGenfv = glad_on_demand_impl_glGetTexGenfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexGeniv(GLenum coord, GLenum pname, GLint * params) {
    glad_glGetTexGeniv = (PFNGLGETTEXGENIVPROC) glad_gl_on_demand_loader("glGetTexGeniv");
    glad_glGetTexGeniv(coord, pname, params);
}
PFNGLGETTEXGENIVPROC glad_glGetTexGeniv = glad_on_demand_impl_glGetTexGeniv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
    glad_glGetTexImage = (PFNGLGETTEXIMAGEPROC) glad_gl_on_demand_loader("glGetTexImage");
    glad_glGetTexImage(target, level, format, type, pixels);
}
PFNGLGETTEXIMAGEPROC glad_glGetTexImage = glad_on_demand_impl_glGetTexImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) {
    glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) glad_gl_on_demand_loader("glGetTexLevelParameterfv");
    glad_glGetTexLevelParameterfv(target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv = glad_on_demand_impl_glGetTexLevelParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) {
    glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) glad_gl_on_demand_loader("glGetTexLevelParameteriv");
    glad_glGetTexLevelParameteriv(target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv = glad_on_demand_impl_glGetTexLevelParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC) glad_gl_on_demand_loader("glGetTexParameterIiv");
    glad_glGetTexParameterIiv(target, pname, params);
}
PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv = glad_on_demand_impl_glGetTexParameterIiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) {
    glad_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC) glad_gl_on_demand_loader("glGetTexParameterIivEXT");
    glad_glGetTexParameterIivEXT(target, pname, params);
}
PFNGLGETTEXPARAMETERIIVEXTPROC glad_glGetTexParameterIivEXT = glad_on_demand_impl_glGetTexParameterIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) {
    glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC) glad_gl_on_demand_loader("glGetTexParameterIuiv");
    glad_glGetTexParameterIuiv(target, pname, params);
}
PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv = glad_on_demand_impl_glGetTexParameterIuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) {
    glad_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC) glad_gl_on_demand_loader("glGetTexParameterIuivEXT");
    glad_glGetTexParameterIuivEXT(target, pname, params);
}
PFNGLGETTEXPARAMETERIUIVEXTPROC glad_glGetTexParameterIuivEXT = glad_on_demand_impl_glGetTexParameterIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) glad_gl_on_demand_loader("glGetTexParameterfv");
    glad_glGetTexParameterfv(target, pname, params);
}
PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv = glad_on_demand_impl_glGetTexParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) glad_gl_on_demand_loader("glGetTexParameteriv");
    glad_glGetTexParameteriv(target, pname, params);
}
PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv = glad_on_demand_impl_glGetTexParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
    glad_glGetTextureImage = (PFNGLGETTEXTUREIMAGEPROC) glad_gl_on_demand_loader("glGetTextureImage");
    glad_glGetTextureImage(texture, level, format, type, bufSize, pixels);
}
PFNGLGETTEXTUREIMAGEPROC glad_glGetTextureImage = glad_on_demand_impl_glGetTextureImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
    glad_glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC) glad_gl_on_demand_loader("glGetTextureImageEXT");
    glad_glGetTextureImageEXT(texture, target, level, format, type, pixels);
}
PFNGLGETTEXTUREIMAGEEXTPROC glad_glGetTextureImageEXT = glad_on_demand_impl_glGetTextureImageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) {
    glad_glGetTextureLevelParameterfv = (PFNGLGETTEXTURELEVELPARAMETERFVPROC) glad_gl_on_demand_loader("glGetTextureLevelParameterfv");
    glad_glGetTextureLevelParameterfv(texture, level, pname, params);
}
PFNGLGETTEXTURELEVELPARAMETERFVPROC glad_glGetTextureLevelParameterfv = glad_on_demand_impl_glGetTextureLevelParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) {
    glad_glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glGetTextureLevelParameterfvEXT");
    glad_glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
}
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glad_glGetTextureLevelParameterfvEXT = glad_on_demand_impl_glGetTextureLevelParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) {
    glad_glGetTextureLevelParameteriv = (PFNGLGETTEXTURELEVELPARAMETERIVPROC) glad_gl_on_demand_loader("glGetTextureLevelParameteriv");
    glad_glGetTextureLevelParameteriv(texture, level, pname, params);
}
PFNGLGETTEXTURELEVELPARAMETERIVPROC glad_glGetTextureLevelParameteriv = glad_on_demand_impl_glGetTextureLevelParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) {
    glad_glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetTextureLevelParameterivEXT");
    glad_glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
}
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glad_glGetTextureLevelParameterivEXT = glad_on_demand_impl_glGetTextureLevelParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) {
    glad_glGetTextureParameterIiv = (PFNGLGETTEXTUREPARAMETERIIVPROC) glad_gl_on_demand_loader("glGetTextureParameterIiv");
    glad_glGetTextureParameterIiv(texture, pname, params);
}
PFNGLGETTEXTUREPARAMETERIIVPROC glad_glGetTextureParameterIiv = glad_on_demand_impl_glGetTextureParameterIiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) {
    glad_glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC) glad_gl_on_demand_loader("glGetTextureParameterIivEXT");
    glad_glGetTextureParameterIivEXT(texture, target, pname, params);
}
PFNGLGETTEXTUREPARAMETERIIVEXTPROC glad_glGetTextureParameterIivEXT = glad_on_demand_impl_glGetTextureParameterIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) {
    glad_glGetTextureParameterIuiv = (PFNGLGETTEXTUREPARAMETERIUIVPROC) glad_gl_on_demand_loader("glGetTextureParameterIuiv");
    glad_glGetTextureParameterIuiv(texture, pname, params);
}
PFNGLGETTEXTUREPARAMETERIUIVPROC glad_glGetTextureParameterIuiv = glad_on_demand_impl_glGetTextureParameterIuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) {
    glad_glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) glad_gl_on_demand_loader("glGetTextureParameterIuivEXT");
    glad_glGetTextureParameterIuivEXT(texture, target, pname, params);
}
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glad_glGetTextureParameterIuivEXT = glad_on_demand_impl_glGetTextureParameterIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) {
    glad_glGetTextureParameterfv = (PFNGLGETTEXTUREPARAMETERFVPROC) glad_gl_on_demand_loader("glGetTextureParameterfv");
    glad_glGetTextureParameterfv(texture, pname, params);
}
PFNGLGETTEXTUREPARAMETERFVPROC glad_glGetTextureParameterfv = glad_on_demand_impl_glGetTextureParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glGetTextureParameterfvEXT");
    glad_glGetTextureParameterfvEXT(texture, target, pname, params);
}
PFNGLGETTEXTUREPARAMETERFVEXTPROC glad_glGetTextureParameterfvEXT = glad_on_demand_impl_glGetTextureParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) {
    glad_glGetTextureParameteriv = (PFNGLGETTEXTUREPARAMETERIVPROC) glad_gl_on_demand_loader("glGetTextureParameteriv");
    glad_glGetTextureParameteriv(texture, pname, params);
}
PFNGLGETTEXTUREPARAMETERIVPROC glad_glGetTextureParameteriv = glad_on_demand_impl_glGetTextureParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) {
    glad_glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glGetTextureParameterivEXT");
    glad_glGetTextureParameterivEXT(texture, target, pname, params);
}
PFNGLGETTEXTUREPARAMETERIVEXTPROC glad_glGetTextureParameterivEXT = glad_on_demand_impl_glGetTextureParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
    glad_glGetTextureSubImage = (PFNGLGETTEXTURESUBIMAGEPROC) glad_gl_on_demand_loader("glGetTextureSubImage");
    glad_glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}
PFNGLGETTEXTURESUBIMAGEPROC glad_glGetTextureSubImage = glad_on_demand_impl_glGetTextureSubImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) {
    glad_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC) glad_gl_on_demand_loader("glGetTrackMatrixivNV");
    glad_glGetTrackMatrixivNV(target, address, pname, params);
}
PFNGLGETTRACKMATRIXIVNVPROC glad_glGetTrackMatrixivNV = glad_on_demand_impl_glGetTrackMatrixivNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
    glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) glad_gl_on_demand_loader("glGetTransformFeedbackVarying");
    glad_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying = glad_on_demand_impl_glGetTransformFeedbackVarying;
static void GLAD_API_PTR glad_on_demand_impl_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
    glad_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) glad_gl_on_demand_loader("glGetTransformFeedbackVaryingEXT");
    glad_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
}
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glad_glGetTransformFeedbackVaryingEXT = glad_on_demand_impl_glGetTransformFeedbackVaryingEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) {
    glad_glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) glad_gl_on_demand_loader("glGetTransformFeedbackVaryingNV");
    glad_glGetTransformFeedbackVaryingNV(program, index, location);
}
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glad_glGetTransformFeedbackVaryingNV = glad_on_demand_impl_glGetTransformFeedbackVaryingNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) {
    glad_glGetTransformFeedbacki64_v = (PFNGLGETTRANSFORMFEEDBACKI64_VPROC) glad_gl_on_demand_loader("glGetTransformFeedbacki64_v");
    glad_glGetTransformFeedbacki64_v(xfb, pname, index, param);
}
PFNGLGETTRANSFORMFEEDBACKI64_VPROC glad_glGetTransformFeedbacki64_v = glad_on_demand_impl_glGetTransformFeedbacki64_v;
static void GLAD_API_PTR glad_on_demand_impl_glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) {
    glad_glGetTransformFeedbacki_v = (PFNGLGETTRANSFORMFEEDBACKI_VPROC) glad_gl_on_demand_loader("glGetTransformFeedbacki_v");
    glad_glGetTransformFeedbacki_v(xfb, pname, index, param);
}
PFNGLGETTRANSFORMFEEDBACKI_VPROC glad_glGetTransformFeedbacki_v = glad_on_demand_impl_glGetTransformFeedbacki_v;
static void GLAD_API_PTR glad_on_demand_impl_glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) {
    glad_glGetTransformFeedbackiv = (PFNGLGETTRANSFORMFEEDBACKIVPROC) glad_gl_on_demand_loader("glGetTransformFeedbackiv");
    glad_glGetTransformFeedbackiv(xfb, pname, param);
}
PFNGLGETTRANSFORMFEEDBACKIVPROC glad_glGetTransformFeedbackiv = glad_on_demand_impl_glGetTransformFeedbackiv;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) {
    glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC) glad_gl_on_demand_loader("glGetUniformBlockIndex");
    return glad_glGetUniformBlockIndex(program, uniformBlockName);
}
PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex = glad_on_demand_impl_glGetUniformBlockIndex;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) {
    glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC) glad_gl_on_demand_loader("glGetUniformIndices");
    glad_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}
PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices = glad_on_demand_impl_glGetUniformIndices;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetUniformLocation(GLuint program, const GLchar * name) {
    glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC) glad_gl_on_demand_loader("glGetUniformLocation");
    return glad_glGetUniformLocation(program, name);
}
PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation = glad_on_demand_impl_glGetUniformLocation;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) {
    glad_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC) glad_gl_on_demand_loader("glGetUniformLocationARB");
    return glad_glGetUniformLocationARB(programObj, name);
}
PFNGLGETUNIFORMLOCATIONARBPROC glad_glGetUniformLocationARB = glad_on_demand_impl_glGetUniformLocationARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) {
    glad_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC) glad_gl_on_demand_loader("glGetUniformSubroutineuiv");
    glad_glGetUniformSubroutineuiv(shadertype, location, params);
}
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv = glad_on_demand_impl_glGetUniformSubroutineuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformdv(GLuint program, GLint location, GLdouble * params) {
    glad_glGetUniformdv = (PFNGLGETUNIFORMDVPROC) glad_gl_on_demand_loader("glGetUniformdv");
    glad_glGetUniformdv(program, location, params);
}
PFNGLGETUNIFORMDVPROC glad_glGetUniformdv = glad_on_demand_impl_glGetUniformdv;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformfv(GLuint program, GLint location, GLfloat * params) {
    glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC) glad_gl_on_demand_loader("glGetUniformfv");
    glad_glGetUniformfv(program, location, params);
}
PFNGLGETUNIFORMFVPROC glad_glGetUniformfv = glad_on_demand_impl_glGetUniformfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) {
    glad_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC) glad_gl_on_demand_loader("glGetUniformfvARB");
    glad_glGetUniformfvARB(programObj, location, params);
}
PFNGLGETUNIFORMFVARBPROC glad_glGetUniformfvARB = glad_on_demand_impl_glGetUniformfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformiv(GLuint program, GLint location, GLint * params) {
    glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC) glad_gl_on_demand_loader("glGetUniformiv");
    glad_glGetUniformiv(program, location, params);
}
PFNGLGETUNIFORMIVPROC glad_glGetUniformiv = glad_on_demand_impl_glGetUniformiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) {
    glad_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC) glad_gl_on_demand_loader("glGetUniformivARB");
    glad_glGetUniformivARB(programObj, location, params);
}
PFNGLGETUNIFORMIVARBPROC glad_glGetUniformivARB = glad_on_demand_impl_glGetUniformivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformuiv(GLuint program, GLint location, GLuint * params) {
    glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC) glad_gl_on_demand_loader("glGetUniformuiv");
    glad_glGetUniformuiv(program, location, params);
}
PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv = glad_on_demand_impl_glGetUniformuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetUniformuivEXT(GLuint program, GLint location, GLuint * params) {
    glad_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC) glad_gl_on_demand_loader("glGetUniformuivEXT");
    glad_glGetUniformuivEXT(program, location, params);
}
PFNGLGETUNIFORMUIVEXTPROC glad_glGetUniformuivEXT = glad_on_demand_impl_glGetUniformuivEXT;
static GLint GLAD_API_PTR glad_on_demand_impl_glGetVaryingLocationNV(GLuint program, const GLchar * name) {
    glad_glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC) glad_gl_on_demand_loader("glGetVaryingLocationNV");
    return glad_glGetVaryingLocationNV(program, name);
}
PFNGLGETVARYINGLOCATIONNVPROC glad_glGetVaryingLocationNV = glad_on_demand_impl_glGetVaryingLocationNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) {
    glad_glGetVertexArrayIndexed64iv = (PFNGLGETVERTEXARRAYINDEXED64IVPROC) glad_gl_on_demand_loader("glGetVertexArrayIndexed64iv");
    glad_glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
}
PFNGLGETVERTEXARRAYINDEXED64IVPROC glad_glGetVertexArrayIndexed64iv = glad_on_demand_impl_glGetVertexArrayIndexed64iv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) {
    glad_glGetVertexArrayIndexediv = (PFNGLGETVERTEXARRAYINDEXEDIVPROC) glad_gl_on_demand_loader("glGetVertexArrayIndexediv");
    glad_glGetVertexArrayIndexediv(vaobj, index, pname, param);
}
PFNGLGETVERTEXARRAYINDEXEDIVPROC glad_glGetVertexArrayIndexediv = glad_on_demand_impl_glGetVertexArrayIndexediv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) {
    glad_glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) glad_gl_on_demand_loader("glGetVertexArrayIntegeri_vEXT");
    glad_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
}
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC glad_glGetVertexArrayIntegeri_vEXT = glad_on_demand_impl_glGetVertexArrayIntegeri_vEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) {
    glad_glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC) glad_gl_on_demand_loader("glGetVertexArrayIntegervEXT");
    glad_glGetVertexArrayIntegervEXT(vaobj, pname, param);
}
PFNGLGETVERTEXARRAYINTEGERVEXTPROC glad_glGetVertexArrayIntegervEXT = glad_on_demand_impl_glGetVertexArrayIntegervEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) {
    glad_glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) glad_gl_on_demand_loader("glGetVertexArrayPointeri_vEXT");
    glad_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
}
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC glad_glGetVertexArrayPointeri_vEXT = glad_on_demand_impl_glGetVertexArrayPointeri_vEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) {
    glad_glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC) glad_gl_on_demand_loader("glGetVertexArrayPointervEXT");
    glad_glGetVertexArrayPointervEXT(vaobj, pname, param);
}
PFNGLGETVERTEXARRAYPOINTERVEXTPROC glad_glGetVertexArrayPointervEXT = glad_on_demand_impl_glGetVertexArrayPointervEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) {
    glad_glGetVertexArrayiv = (PFNGLGETVERTEXARRAYIVPROC) glad_gl_on_demand_loader("glGetVertexArrayiv");
    glad_glGetVertexArrayiv(vaobj, pname, param);
}
PFNGLGETVERTEXARRAYIVPROC glad_glGetVertexArrayiv = glad_on_demand_impl_glGetVertexArrayiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) {
    glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC) glad_gl_on_demand_loader("glGetVertexAttribIiv");
    glad_glGetVertexAttribIiv(index, pname, params);
}
PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv = glad_on_demand_impl_glGetVertexAttribIiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) {
    glad_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC) glad_gl_on_demand_loader("glGetVertexAttribIivEXT");
    glad_glGetVertexAttribIivEXT(index, pname, params);
}
PFNGLGETVERTEXATTRIBIIVEXTPROC glad_glGetVertexAttribIivEXT = glad_on_demand_impl_glGetVertexAttribIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) {
    glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC) glad_gl_on_demand_loader("glGetVertexAttribIuiv");
    glad_glGetVertexAttribIuiv(index, pname, params);
}
PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv = glad_on_demand_impl_glGetVertexAttribIuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) {
    glad_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC) glad_gl_on_demand_loader("glGetVertexAttribIuivEXT");
    glad_glGetVertexAttribIuivEXT(index, pname, params);
}
PFNGLGETVERTEXATTRIBIUIVEXTPROC glad_glGetVertexAttribIuivEXT = glad_on_demand_impl_glGetVertexAttribIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) {
    glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC) glad_gl_on_demand_loader("glGetVertexAttribLdv");
    glad_glGetVertexAttribLdv(index, pname, params);
}
PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv = glad_on_demand_impl_glGetVertexAttribLdv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) {
    glad_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC) glad_gl_on_demand_loader("glGetVertexAttribLdvEXT");
    glad_glGetVertexAttribLdvEXT(index, pname, params);
}
PFNGLGETVERTEXATTRIBLDVEXTPROC glad_glGetVertexAttribLdvEXT = glad_on_demand_impl_glGetVertexAttribLdvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) {
    glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC) glad_gl_on_demand_loader("glGetVertexAttribPointerv");
    glad_glGetVertexAttribPointerv(index, pname, pointer);
}
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv = glad_on_demand_impl_glGetVertexAttribPointerv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) {
    glad_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC) glad_gl_on_demand_loader("glGetVertexAttribPointervARB");
    glad_glGetVertexAttribPointervARB(index, pname, pointer);
}
PFNGLGETVERTEXATTRIBPOINTERVARBPROC glad_glGetVertexAttribPointervARB = glad_on_demand_impl_glGetVertexAttribPointervARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) {
    glad_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC) glad_gl_on_demand_loader("glGetVertexAttribPointervNV");
    glad_glGetVertexAttribPointervNV(index, pname, pointer);
}
PFNGLGETVERTEXATTRIBPOINTERVNVPROC glad_glGetVertexAttribPointervNV = glad_on_demand_impl_glGetVertexAttribPointervNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) {
    glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC) glad_gl_on_demand_loader("glGetVertexAttribdv");
    glad_glGetVertexAttribdv(index, pname, params);
}
PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv = glad_on_demand_impl_glGetVertexAttribdv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) {
    glad_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC) glad_gl_on_demand_loader("glGetVertexAttribdvARB");
    glad_glGetVertexAttribdvARB(index, pname, params);
}
PFNGLGETVERTEXATTRIBDVARBPROC glad_glGetVertexAttribdvARB = glad_on_demand_impl_glGetVertexAttribdvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) {
    glad_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC) glad_gl_on_demand_loader("glGetVertexAttribdvNV");
    glad_glGetVertexAttribdvNV(index, pname, params);
}
PFNGLGETVERTEXATTRIBDVNVPROC glad_glGetVertexAttribdvNV = glad_on_demand_impl_glGetVertexAttribdvNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) {
    glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC) glad_gl_on_demand_loader("glGetVertexAttribfv");
    glad_glGetVertexAttribfv(index, pname, params);
}
PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv = glad_on_demand_impl_glGetVertexAttribfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) {
    glad_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC) glad_gl_on_demand_loader("glGetVertexAttribfvARB");
    glad_glGetVertexAttribfvARB(index, pname, params);
}
PFNGLGETVERTEXATTRIBFVARBPROC glad_glGetVertexAttribfvARB = glad_on_demand_impl_glGetVertexAttribfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) {
    glad_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC) glad_gl_on_demand_loader("glGetVertexAttribfvNV");
    glad_glGetVertexAttribfvNV(index, pname, params);
}
PFNGLGETVERTEXATTRIBFVNVPROC glad_glGetVertexAttribfvNV = glad_on_demand_impl_glGetVertexAttribfvNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) {
    glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC) glad_gl_on_demand_loader("glGetVertexAttribiv");
    glad_glGetVertexAttribiv(index, pname, params);
}
PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv = glad_on_demand_impl_glGetVertexAttribiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) {
    glad_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC) glad_gl_on_demand_loader("glGetVertexAttribivARB");
    glad_glGetVertexAttribivARB(index, pname, params);
}
PFNGLGETVERTEXATTRIBIVARBPROC glad_glGetVertexAttribivARB = glad_on_demand_impl_glGetVertexAttribivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) {
    glad_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC) glad_gl_on_demand_loader("glGetVertexAttribivNV");
    glad_glGetVertexAttribivNV(index, pname, params);
}
PFNGLGETVERTEXATTRIBIVNVPROC glad_glGetVertexAttribivNV = glad_on_demand_impl_glGetVertexAttribivNV;
static void GLAD_API_PTR glad_on_demand_impl_glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) {
    glad_glGetnColorTable = (PFNGLGETNCOLORTABLEPROC) glad_gl_on_demand_loader("glGetnColorTable");
    glad_glGetnColorTable(target, format, type, bufSize, table);
}
PFNGLGETNCOLORTABLEPROC glad_glGetnColorTable = glad_on_demand_impl_glGetnColorTable;
static void GLAD_API_PTR glad_on_demand_impl_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) {
    glad_glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC) glad_gl_on_demand_loader("glGetnColorTableARB");
    glad_glGetnColorTableARB(target, format, type, bufSize, table);
}
PFNGLGETNCOLORTABLEARBPROC glad_glGetnColorTableARB = glad_on_demand_impl_glGetnColorTableARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) {
    glad_glGetnCompressedTexImage = (PFNGLGETNCOMPRESSEDTEXIMAGEPROC) glad_gl_on_demand_loader("glGetnCompressedTexImage");
    glad_glGetnCompressedTexImage(target, lod, bufSize, pixels);
}
PFNGLGETNCOMPRESSEDTEXIMAGEPROC glad_glGetnCompressedTexImage = glad_on_demand_impl_glGetnCompressedTexImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) {
    glad_glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) glad_gl_on_demand_loader("glGetnCompressedTexImageARB");
    glad_glGetnCompressedTexImageARB(target, lod, bufSize, img);
}
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glad_glGetnCompressedTexImageARB = glad_on_demand_impl_glGetnCompressedTexImageARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) {
    glad_glGetnConvolutionFilter = (PFNGLGETNCONVOLUTIONFILTERPROC) glad_gl_on_demand_loader("glGetnConvolutionFilter");
    glad_glGetnConvolutionFilter(target, format, type, bufSize, image);
}
PFNGLGETNCONVOLUTIONFILTERPROC glad_glGetnConvolutionFilter = glad_on_demand_impl_glGetnConvolutionFilter;
static void GLAD_API_PTR glad_on_demand_impl_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) {
    glad_glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC) glad_gl_on_demand_loader("glGetnConvolutionFilterARB");
    glad_glGetnConvolutionFilterARB(target, format, type, bufSize, image);
}
PFNGLGETNCONVOLUTIONFILTERARBPROC glad_glGetnConvolutionFilterARB = glad_on_demand_impl_glGetnConvolutionFilterARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
    glad_glGetnHistogram = (PFNGLGETNHISTOGRAMPROC) glad_gl_on_demand_loader("glGetnHistogram");
    glad_glGetnHistogram(target, reset, format, type, bufSize, values);
}
PFNGLGETNHISTOGRAMPROC glad_glGetnHistogram = glad_on_demand_impl_glGetnHistogram;
static void GLAD_API_PTR glad_on_demand_impl_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
    glad_glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC) glad_gl_on_demand_loader("glGetnHistogramARB");
    glad_glGetnHistogramARB(target, reset, format, type, bufSize, values);
}
PFNGLGETNHISTOGRAMARBPROC glad_glGetnHistogramARB = glad_on_demand_impl_glGetnHistogramARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) {
    glad_glGetnMapdv = (PFNGLGETNMAPDVPROC) glad_gl_on_demand_loader("glGetnMapdv");
    glad_glGetnMapdv(target, query, bufSize, v);
}
PFNGLGETNMAPDVPROC glad_glGetnMapdv = glad_on_demand_impl_glGetnMapdv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) {
    glad_glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC) glad_gl_on_demand_loader("glGetnMapdvARB");
    glad_glGetnMapdvARB(target, query, bufSize, v);
}
PFNGLGETNMAPDVARBPROC glad_glGetnMapdvARB = glad_on_demand_impl_glGetnMapdvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) {
    glad_glGetnMapfv = (PFNGLGETNMAPFVPROC) glad_gl_on_demand_loader("glGetnMapfv");
    glad_glGetnMapfv(target, query, bufSize, v);
}
PFNGLGETNMAPFVPROC glad_glGetnMapfv = glad_on_demand_impl_glGetnMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) {
    glad_glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC) glad_gl_on_demand_loader("glGetnMapfvARB");
    glad_glGetnMapfvARB(target, query, bufSize, v);
}
PFNGLGETNMAPFVARBPROC glad_glGetnMapfvARB = glad_on_demand_impl_glGetnMapfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) {
    glad_glGetnMapiv = (PFNGLGETNMAPIVPROC) glad_gl_on_demand_loader("glGetnMapiv");
    glad_glGetnMapiv(target, query, bufSize, v);
}
PFNGLGETNMAPIVPROC glad_glGetnMapiv = glad_on_demand_impl_glGetnMapiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) {
    glad_glGetnMapivARB = (PFNGLGETNMAPIVARBPROC) glad_gl_on_demand_loader("glGetnMapivARB");
    glad_glGetnMapivARB(target, query, bufSize, v);
}
PFNGLGETNMAPIVARBPROC glad_glGetnMapivARB = glad_on_demand_impl_glGetnMapivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
    glad_glGetnMinmax = (PFNGLGETNMINMAXPROC) glad_gl_on_demand_loader("glGetnMinmax");
    glad_glGetnMinmax(target, reset, format, type, bufSize, values);
}
PFNGLGETNMINMAXPROC glad_glGetnMinmax = glad_on_demand_impl_glGetnMinmax;
static void GLAD_API_PTR glad_on_demand_impl_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) {
    glad_glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC) glad_gl_on_demand_loader("glGetnMinmaxARB");
    glad_glGetnMinmaxARB(target, reset, format, type, bufSize, values);
}
PFNGLGETNMINMAXARBPROC glad_glGetnMinmaxARB = glad_on_demand_impl_glGetnMinmaxARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) {
    glad_glGetnPixelMapfv = (PFNGLGETNPIXELMAPFVPROC) glad_gl_on_demand_loader("glGetnPixelMapfv");
    glad_glGetnPixelMapfv(map, bufSize, values);
}
PFNGLGETNPIXELMAPFVPROC glad_glGetnPixelMapfv = glad_on_demand_impl_glGetnPixelMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) {
    glad_glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC) glad_gl_on_demand_loader("glGetnPixelMapfvARB");
    glad_glGetnPixelMapfvARB(map, bufSize, values);
}
PFNGLGETNPIXELMAPFVARBPROC glad_glGetnPixelMapfvARB = glad_on_demand_impl_glGetnPixelMapfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) {
    glad_glGetnPixelMapuiv = (PFNGLGETNPIXELMAPUIVPROC) glad_gl_on_demand_loader("glGetnPixelMapuiv");
    glad_glGetnPixelMapuiv(map, bufSize, values);
}
PFNGLGETNPIXELMAPUIVPROC glad_glGetnPixelMapuiv = glad_on_demand_impl_glGetnPixelMapuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) {
    glad_glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC) glad_gl_on_demand_loader("glGetnPixelMapuivARB");
    glad_glGetnPixelMapuivARB(map, bufSize, values);
}
PFNGLGETNPIXELMAPUIVARBPROC glad_glGetnPixelMapuivARB = glad_on_demand_impl_glGetnPixelMapuivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) {
    glad_glGetnPixelMapusv = (PFNGLGETNPIXELMAPUSVPROC) glad_gl_on_demand_loader("glGetnPixelMapusv");
    glad_glGetnPixelMapusv(map, bufSize, values);
}
PFNGLGETNPIXELMAPUSVPROC glad_glGetnPixelMapusv = glad_on_demand_impl_glGetnPixelMapusv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) {
    glad_glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC) glad_gl_on_demand_loader("glGetnPixelMapusvARB");
    glad_glGetnPixelMapusvARB(map, bufSize, values);
}
PFNGLGETNPIXELMAPUSVARBPROC glad_glGetnPixelMapusvARB = glad_on_demand_impl_glGetnPixelMapusvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) {
    glad_glGetnPolygonStipple = (PFNGLGETNPOLYGONSTIPPLEPROC) glad_gl_on_demand_loader("glGetnPolygonStipple");
    glad_glGetnPolygonStipple(bufSize, pattern);
}
PFNGLGETNPOLYGONSTIPPLEPROC glad_glGetnPolygonStipple = glad_on_demand_impl_glGetnPolygonStipple;
static void GLAD_API_PTR glad_on_demand_impl_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) {
    glad_glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC) glad_gl_on_demand_loader("glGetnPolygonStippleARB");
    glad_glGetnPolygonStippleARB(bufSize, pattern);
}
PFNGLGETNPOLYGONSTIPPLEARBPROC glad_glGetnPolygonStippleARB = glad_on_demand_impl_glGetnPolygonStippleARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) {
    glad_glGetnSeparableFilter = (PFNGLGETNSEPARABLEFILTERPROC) glad_gl_on_demand_loader("glGetnSeparableFilter");
    glad_glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);
}
PFNGLGETNSEPARABLEFILTERPROC glad_glGetnSeparableFilter = glad_on_demand_impl_glGetnSeparableFilter;
static void GLAD_API_PTR glad_on_demand_impl_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) {
    glad_glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC) glad_gl_on_demand_loader("glGetnSeparableFilterARB");
    glad_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
}
PFNGLGETNSEPARABLEFILTERARBPROC glad_glGetnSeparableFilterARB = glad_on_demand_impl_glGetnSeparableFilterARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) {
    glad_glGetnTexImage = (PFNGLGETNTEXIMAGEPROC) glad_gl_on_demand_loader("glGetnTexImage");
    glad_glGetnTexImage(target, level, format, type, bufSize, pixels);
}
PFNGLGETNTEXIMAGEPROC glad_glGetnTexImage = glad_on_demand_impl_glGetnTexImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) {
    glad_glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC) glad_gl_on_demand_loader("glGetnTexImageARB");
    glad_glGetnTexImageARB(target, level, format, type, bufSize, img);
}
PFNGLGETNTEXIMAGEARBPROC glad_glGetnTexImageARB = glad_on_demand_impl_glGetnTexImageARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) {
    glad_glGetnUniformdv = (PFNGLGETNUNIFORMDVPROC) glad_gl_on_demand_loader("glGetnUniformdv");
    glad_glGetnUniformdv(program, location, bufSize, params);
}
PFNGLGETNUNIFORMDVPROC glad_glGetnUniformdv = glad_on_demand_impl_glGetnUniformdv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) {
    glad_glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC) glad_gl_on_demand_loader("glGetnUniformdvARB");
    glad_glGetnUniformdvARB(program, location, bufSize, params);
}
PFNGLGETNUNIFORMDVARBPROC glad_glGetnUniformdvARB = glad_on_demand_impl_glGetnUniformdvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
    glad_glGetnUniformfv = (PFNGLGETNUNIFORMFVPROC) glad_gl_on_demand_loader("glGetnUniformfv");
    glad_glGetnUniformfv(program, location, bufSize, params);
}
PFNGLGETNUNIFORMFVPROC glad_glGetnUniformfv = glad_on_demand_impl_glGetnUniformfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) {
    glad_glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC) glad_gl_on_demand_loader("glGetnUniformfvARB");
    glad_glGetnUniformfvARB(program, location, bufSize, params);
}
PFNGLGETNUNIFORMFVARBPROC glad_glGetnUniformfvARB = glad_on_demand_impl_glGetnUniformfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
    glad_glGetnUniformiv = (PFNGLGETNUNIFORMIVPROC) glad_gl_on_demand_loader("glGetnUniformiv");
    glad_glGetnUniformiv(program, location, bufSize, params);
}
PFNGLGETNUNIFORMIVPROC glad_glGetnUniformiv = glad_on_demand_impl_glGetnUniformiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) {
    glad_glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC) glad_gl_on_demand_loader("glGetnUniformivARB");
    glad_glGetnUniformivARB(program, location, bufSize, params);
}
PFNGLGETNUNIFORMIVARBPROC glad_glGetnUniformivARB = glad_on_demand_impl_glGetnUniformivARB;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
    glad_glGetnUniformuiv = (PFNGLGETNUNIFORMUIVPROC) glad_gl_on_demand_loader("glGetnUniformuiv");
    glad_glGetnUniformuiv(program, location, bufSize, params);
}
PFNGLGETNUNIFORMUIVPROC glad_glGetnUniformuiv = glad_on_demand_impl_glGetnUniformuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) {
    glad_glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC) glad_gl_on_demand_loader("glGetnUniformuivARB");
    glad_glGetnUniformuivARB(program, location, bufSize, params);
}
PFNGLGETNUNIFORMUIVARBPROC glad_glGetnUniformuivARB = glad_on_demand_impl_glGetnUniformuivARB;
static void GLAD_API_PTR glad_on_demand_impl_glHint(GLenum target, GLenum mode) {
    glad_glHint = (PFNGLHINTPROC) glad_gl_on_demand_loader("glHint");
    glad_glHint(target, mode);
}
PFNGLHINTPROC glad_glHint = glad_on_demand_impl_glHint;
static void GLAD_API_PTR glad_on_demand_impl_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
    glad_glHistogram = (PFNGLHISTOGRAMPROC) glad_gl_on_demand_loader("glHistogram");
    glad_glHistogram(target, width, internalformat, sink);
}
PFNGLHISTOGRAMPROC glad_glHistogram = glad_on_demand_impl_glHistogram;
static void GLAD_API_PTR glad_on_demand_impl_glIndexMask(GLuint mask) {
    glad_glIndexMask = (PFNGLINDEXMASKPROC) glad_gl_on_demand_loader("glIndexMask");
    glad_glIndexMask(mask);
}
PFNGLINDEXMASKPROC glad_glIndexMask = glad_on_demand_impl_glIndexMask;
static void GLAD_API_PTR glad_on_demand_impl_glIndexPointer(GLenum type, GLsizei stride, const void * pointer) {
    glad_glIndexPointer = (PFNGLINDEXPOINTERPROC) glad_gl_on_demand_loader("glIndexPointer");
    glad_glIndexPointer(type, stride, pointer);
}
PFNGLINDEXPOINTERPROC glad_glIndexPointer = glad_on_demand_impl_glIndexPointer;
static void GLAD_API_PTR glad_on_demand_impl_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
    glad_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC) glad_gl_on_demand_loader("glIndexPointerEXT");
    glad_glIndexPointerEXT(type, stride, count, pointer);
}
PFNGLINDEXPOINTEREXTPROC glad_glIndexPointerEXT = glad_on_demand_impl_glIndexPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glIndexd(GLdouble c) {
    glad_glIndexd = (PFNGLINDEXDPROC) glad_gl_on_demand_loader("glIndexd");
    glad_glIndexd(c);
}
PFNGLINDEXDPROC glad_glIndexd = glad_on_demand_impl_glIndexd;
static void GLAD_API_PTR glad_on_demand_impl_glIndexdv(const GLdouble * c) {
    glad_glIndexdv = (PFNGLINDEXDVPROC) glad_gl_on_demand_loader("glIndexdv");
    glad_glIndexdv(c);
}
PFNGLINDEXDVPROC glad_glIndexdv = glad_on_demand_impl_glIndexdv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexf(GLfloat c) {
    glad_glIndexf = (PFNGLINDEXFPROC) glad_gl_on_demand_loader("glIndexf");
    glad_glIndexf(c);
}
PFNGLINDEXFPROC glad_glIndexf = glad_on_demand_impl_glIndexf;
static void GLAD_API_PTR glad_on_demand_impl_glIndexfv(const GLfloat * c) {
    glad_glIndexfv = (PFNGLINDEXFVPROC) glad_gl_on_demand_loader("glIndexfv");
    glad_glIndexfv(c);
}
PFNGLINDEXFVPROC glad_glIndexfv = glad_on_demand_impl_glIndexfv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexi(GLint c) {
    glad_glIndexi = (PFNGLINDEXIPROC) glad_gl_on_demand_loader("glIndexi");
    glad_glIndexi(c);
}
PFNGLINDEXIPROC glad_glIndexi = glad_on_demand_impl_glIndexi;
static void GLAD_API_PTR glad_on_demand_impl_glIndexiv(const GLint * c) {
    glad_glIndexiv = (PFNGLINDEXIVPROC) glad_gl_on_demand_loader("glIndexiv");
    glad_glIndexiv(c);
}
PFNGLINDEXIVPROC glad_glIndexiv = glad_on_demand_impl_glIndexiv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexs(GLshort c) {
    glad_glIndexs = (PFNGLINDEXSPROC) glad_gl_on_demand_loader("glIndexs");
    glad_glIndexs(c);
}
PFNGLINDEXSPROC glad_glIndexs = glad_on_demand_impl_glIndexs;
static void GLAD_API_PTR glad_on_demand_impl_glIndexsv(const GLshort * c) {
    glad_glIndexsv = (PFNGLINDEXSVPROC) glad_gl_on_demand_loader("glIndexsv");
    glad_glIndexsv(c);
}
PFNGLINDEXSVPROC glad_glIndexsv = glad_on_demand_impl_glIndexsv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexub(GLubyte c) {
    glad_glIndexub = (PFNGLINDEXUBPROC) glad_gl_on_demand_loader("glIndexub");
    glad_glIndexub(c);
}
PFNGLINDEXUBPROC glad_glIndexub = glad_on_demand_impl_glIndexub;
static void GLAD_API_PTR glad_on_demand_impl_glIndexubv(const GLubyte * c) {
    glad_glIndexubv = (PFNGLINDEXUBVPROC) glad_gl_on_demand_loader("glIndexubv");
    glad_glIndexubv(c);
}
PFNGLINDEXUBVPROC glad_glIndexubv = glad_on_demand_impl_glIndexubv;
static void GLAD_API_PTR glad_on_demand_impl_glInitNames(void) {
    glad_glInitNames = (PFNGLINITNAMESPROC) glad_gl_on_demand_loader("glInitNames");
    glad_glInitNames();
}
PFNGLINITNAMESPROC glad_glInitNames = glad_on_demand_impl_glInitNames;
static void GLAD_API_PTR glad_on_demand_impl_glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) {
    glad_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC) glad_gl_on_demand_loader("glInterleavedArrays");
    glad_glInterleavedArrays(format, stride, pointer);
}
PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays = glad_on_demand_impl_glInterleavedArrays;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateBufferData(GLuint buffer) {
    glad_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC) glad_gl_on_demand_loader("glInvalidateBufferData");
    glad_glInvalidateBufferData(buffer);
}
PFNGLINVALIDATEBUFFERDATAPROC glad_glInvalidateBufferData = glad_on_demand_impl_glInvalidateBufferData;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
    glad_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glInvalidateBufferSubData");
    glad_glInvalidateBufferSubData(buffer, offset, length);
}
PFNGLINVALIDATEBUFFERSUBDATAPROC glad_glInvalidateBufferSubData = glad_on_demand_impl_glInvalidateBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) {
    glad_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC) glad_gl_on_demand_loader("glInvalidateFramebuffer");
    glad_glInvalidateFramebuffer(target, numAttachments, attachments);
}
PFNGLINVALIDATEFRAMEBUFFERPROC glad_glInvalidateFramebuffer = glad_on_demand_impl_glInvalidateFramebuffer;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) {
    glad_glInvalidateNamedFramebufferData = (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) glad_gl_on_demand_loader("glInvalidateNamedFramebufferData");
    glad_glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
}
PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC glad_glInvalidateNamedFramebufferData = glad_on_demand_impl_glInvalidateNamedFramebufferData;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glInvalidateNamedFramebufferSubData = (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glInvalidateNamedFramebufferSubData");
    glad_glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
}
PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC glad_glInvalidateNamedFramebufferSubData = glad_on_demand_impl_glInvalidateNamedFramebufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC) glad_gl_on_demand_loader("glInvalidateSubFramebuffer");
    glad_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}
PFNGLINVALIDATESUBFRAMEBUFFERPROC glad_glInvalidateSubFramebuffer = glad_on_demand_impl_glInvalidateSubFramebuffer;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateTexImage(GLuint texture, GLint level) {
    glad_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC) glad_gl_on_demand_loader("glInvalidateTexImage");
    glad_glInvalidateTexImage(texture, level);
}
PFNGLINVALIDATETEXIMAGEPROC glad_glInvalidateTexImage = glad_on_demand_impl_glInvalidateTexImage;
static void GLAD_API_PTR glad_on_demand_impl_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC) glad_gl_on_demand_loader("glInvalidateTexSubImage");
    glad_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
PFNGLINVALIDATETEXSUBIMAGEPROC glad_glInvalidateTexSubImage = glad_on_demand_impl_glInvalidateTexSubImage;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsBuffer(GLuint buffer) {
    glad_glIsBuffer = (PFNGLISBUFFERPROC) glad_gl_on_demand_loader("glIsBuffer");
    return glad_glIsBuffer(buffer);
}
PFNGLISBUFFERPROC glad_glIsBuffer = glad_on_demand_impl_glIsBuffer;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsBufferARB(GLuint buffer) {
    glad_glIsBufferARB = (PFNGLISBUFFERARBPROC) glad_gl_on_demand_loader("glIsBufferARB");
    return glad_glIsBufferARB(buffer);
}
PFNGLISBUFFERARBPROC glad_glIsBufferARB = glad_on_demand_impl_glIsBufferARB;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsEnabled(GLenum cap) {
    glad_glIsEnabled = (PFNGLISENABLEDPROC) glad_gl_on_demand_loader("glIsEnabled");
    return glad_glIsEnabled(cap);
}
PFNGLISENABLEDPROC glad_glIsEnabled = glad_on_demand_impl_glIsEnabled;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsEnabledIndexedEXT(GLenum target, GLuint index) {
    glad_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC) glad_gl_on_demand_loader("glIsEnabledIndexedEXT");
    return glad_glIsEnabledIndexedEXT(target, index);
}
PFNGLISENABLEDINDEXEDEXTPROC glad_glIsEnabledIndexedEXT = glad_on_demand_impl_glIsEnabledIndexedEXT;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsEnabledi(GLenum target, GLuint index) {
    glad_glIsEnabledi = (PFNGLISENABLEDIPROC) glad_gl_on_demand_loader("glIsEnabledi");
    return glad_glIsEnabledi(target, index);
}
PFNGLISENABLEDIPROC glad_glIsEnabledi = glad_on_demand_impl_glIsEnabledi;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsFramebuffer(GLuint framebuffer) {
    glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC) glad_gl_on_demand_loader("glIsFramebuffer");
    return glad_glIsFramebuffer(framebuffer);
}
PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer = glad_on_demand_impl_glIsFramebuffer;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsFramebufferEXT(GLuint framebuffer) {
    glad_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC) glad_gl_on_demand_loader("glIsFramebufferEXT");
    return glad_glIsFramebufferEXT(framebuffer);
}
PFNGLISFRAMEBUFFEREXTPROC glad_glIsFramebufferEXT = glad_on_demand_impl_glIsFramebufferEXT;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsList(GLuint list) {
    glad_glIsList = (PFNGLISLISTPROC) glad_gl_on_demand_loader("glIsList");
    return glad_glIsList(list);
}
PFNGLISLISTPROC glad_glIsList = glad_on_demand_impl_glIsList;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsProgram(GLuint program) {
    glad_glIsProgram = (PFNGLISPROGRAMPROC) glad_gl_on_demand_loader("glIsProgram");
    return glad_glIsProgram(program);
}
PFNGLISPROGRAMPROC glad_glIsProgram = glad_on_demand_impl_glIsProgram;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsProgramARB(GLuint program) {
    glad_glIsProgramARB = (PFNGLISPROGRAMARBPROC) glad_gl_on_demand_loader("glIsProgramARB");
    return glad_glIsProgramARB(program);
}
PFNGLISPROGRAMARBPROC glad_glIsProgramARB = glad_on_demand_impl_glIsProgramARB;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsProgramNV(GLuint id) {
    glad_glIsProgramNV = (PFNGLISPROGRAMNVPROC) glad_gl_on_demand_loader("glIsProgramNV");
    return glad_glIsProgramNV(id);
}
PFNGLISPROGRAMNVPROC glad_glIsProgramNV = glad_on_demand_impl_glIsProgramNV;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsProgramPipeline(GLuint pipeline) {
    glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC) glad_gl_on_demand_loader("glIsProgramPipeline");
    return glad_glIsProgramPipeline(pipeline);
}
PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline = glad_on_demand_impl_glIsProgramPipeline;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsQuery(GLuint id) {
    glad_glIsQuery = (PFNGLISQUERYPROC) glad_gl_on_demand_loader("glIsQuery");
    return glad_glIsQuery(id);
}
PFNGLISQUERYPROC glad_glIsQuery = glad_on_demand_impl_glIsQuery;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsQueryARB(GLuint id) {
    glad_glIsQueryARB = (PFNGLISQUERYARBPROC) glad_gl_on_demand_loader("glIsQueryARB");
    return glad_glIsQueryARB(id);
}
PFNGLISQUERYARBPROC glad_glIsQueryARB = glad_on_demand_impl_glIsQueryARB;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsRenderbuffer(GLuint renderbuffer) {
    glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC) glad_gl_on_demand_loader("glIsRenderbuffer");
    return glad_glIsRenderbuffer(renderbuffer);
}
PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer = glad_on_demand_impl_glIsRenderbuffer;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsRenderbufferEXT(GLuint renderbuffer) {
    glad_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC) glad_gl_on_demand_loader("glIsRenderbufferEXT");
    return glad_glIsRenderbufferEXT(renderbuffer);
}
PFNGLISRENDERBUFFEREXTPROC glad_glIsRenderbufferEXT = glad_on_demand_impl_glIsRenderbufferEXT;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsSampler(GLuint sampler) {
    glad_glIsSampler = (PFNGLISSAMPLERPROC) glad_gl_on_demand_loader("glIsSampler");
    return glad_glIsSampler(sampler);
}
PFNGLISSAMPLERPROC glad_glIsSampler = glad_on_demand_impl_glIsSampler;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsShader(GLuint shader) {
    glad_glIsShader = (PFNGLISSHADERPROC) glad_gl_on_demand_loader("glIsShader");
    return glad_glIsShader(shader);
}
PFNGLISSHADERPROC glad_glIsShader = glad_on_demand_impl_glIsShader;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsSync(GLsync sync) {
    glad_glIsSync = (PFNGLISSYNCPROC) glad_gl_on_demand_loader("glIsSync");
    return glad_glIsSync(sync);
}
PFNGLISSYNCPROC glad_glIsSync = glad_on_demand_impl_glIsSync;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsTexture(GLuint texture) {
    glad_glIsTexture = (PFNGLISTEXTUREPROC) glad_gl_on_demand_loader("glIsTexture");
    return glad_glIsTexture(texture);
}
PFNGLISTEXTUREPROC glad_glIsTexture = glad_on_demand_impl_glIsTexture;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsTextureEXT(GLuint texture) {
    glad_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC) glad_gl_on_demand_loader("glIsTextureEXT");
    return glad_glIsTextureEXT(texture);
}
PFNGLISTEXTUREEXTPROC glad_glIsTextureEXT = glad_on_demand_impl_glIsTextureEXT;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsTransformFeedback(GLuint id) {
    glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC) glad_gl_on_demand_loader("glIsTransformFeedback");
    return glad_glIsTransformFeedback(id);
}
PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback = glad_on_demand_impl_glIsTransformFeedback;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsTransformFeedbackNV(GLuint id) {
    glad_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC) glad_gl_on_demand_loader("glIsTransformFeedbackNV");
    return glad_glIsTransformFeedbackNV(id);
}
PFNGLISTRANSFORMFEEDBACKNVPROC glad_glIsTransformFeedbackNV = glad_on_demand_impl_glIsTransformFeedbackNV;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsVertexArray(GLuint array) {
    glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC) glad_gl_on_demand_loader("glIsVertexArray");
    return glad_glIsVertexArray(array);
}
PFNGLISVERTEXARRAYPROC glad_glIsVertexArray = glad_on_demand_impl_glIsVertexArray;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsVertexArrayAPPLE(GLuint array) {
    glad_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC) glad_gl_on_demand_loader("glIsVertexArrayAPPLE");
    return glad_glIsVertexArrayAPPLE(array);
}
PFNGLISVERTEXARRAYAPPLEPROC glad_glIsVertexArrayAPPLE = glad_on_demand_impl_glIsVertexArrayAPPLE;
static void GLAD_API_PTR glad_on_demand_impl_glLightModelf(GLenum pname, GLfloat param) {
    glad_glLightModelf = (PFNGLLIGHTMODELFPROC) glad_gl_on_demand_loader("glLightModelf");
    glad_glLightModelf(pname, param);
}
PFNGLLIGHTMODELFPROC glad_glLightModelf = glad_on_demand_impl_glLightModelf;
static void GLAD_API_PTR glad_on_demand_impl_glLightModelfv(GLenum pname, const GLfloat * params) {
    glad_glLightModelfv = (PFNGLLIGHTMODELFVPROC) glad_gl_on_demand_loader("glLightModelfv");
    glad_glLightModelfv(pname, params);
}
PFNGLLIGHTMODELFVPROC glad_glLightModelfv = glad_on_demand_impl_glLightModelfv;
static void GLAD_API_PTR glad_on_demand_impl_glLightModeli(GLenum pname, GLint param) {
    glad_glLightModeli = (PFNGLLIGHTMODELIPROC) glad_gl_on_demand_loader("glLightModeli");
    glad_glLightModeli(pname, param);
}
PFNGLLIGHTMODELIPROC glad_glLightModeli = glad_on_demand_impl_glLightModeli;
static void GLAD_API_PTR glad_on_demand_impl_glLightModeliv(GLenum pname, const GLint * params) {
    glad_glLightModeliv = (PFNGLLIGHTMODELIVPROC) glad_gl_on_demand_loader("glLightModeliv");
    glad_glLightModeliv(pname, params);
}
PFNGLLIGHTMODELIVPROC glad_glLightModeliv = glad_on_demand_impl_glLightModeliv;
static void GLAD_API_PTR glad_on_demand_impl_glLightf(GLenum light, GLenum pname, GLfloat param) {
    glad_glLightf = (PFNGLLIGHTFPROC) glad_gl_on_demand_loader("glLightf");
    glad_glLightf(light, pname, param);
}
PFNGLLIGHTFPROC glad_glLightf = glad_on_demand_impl_glLightf;
static void GLAD_API_PTR glad_on_demand_impl_glLightfv(GLenum light, GLenum pname, const GLfloat * params) {
    glad_glLightfv = (PFNGLLIGHTFVPROC) glad_gl_on_demand_loader("glLightfv");
    glad_glLightfv(light, pname, params);
}
PFNGLLIGHTFVPROC glad_glLightfv = glad_on_demand_impl_glLightfv;
static void GLAD_API_PTR glad_on_demand_impl_glLighti(GLenum light, GLenum pname, GLint param) {
    glad_glLighti = (PFNGLLIGHTIPROC) glad_gl_on_demand_loader("glLighti");
    glad_glLighti(light, pname, param);
}
PFNGLLIGHTIPROC glad_glLighti = glad_on_demand_impl_glLighti;
static void GLAD_API_PTR glad_on_demand_impl_glLightiv(GLenum light, GLenum pname, const GLint * params) {
    glad_glLightiv = (PFNGLLIGHTIVPROC) glad_gl_on_demand_loader("glLightiv");
    glad_glLightiv(light, pname, params);
}
PFNGLLIGHTIVPROC glad_glLightiv = glad_on_demand_impl_glLightiv;
static void GLAD_API_PTR glad_on_demand_impl_glLineStipple(GLint factor, GLushort pattern) {
    glad_glLineStipple = (PFNGLLINESTIPPLEPROC) glad_gl_on_demand_loader("glLineStipple");
    glad_glLineStipple(factor, pattern);
}
PFNGLLINESTIPPLEPROC glad_glLineStipple = glad_on_demand_impl_glLineStipple;
static void GLAD_API_PTR glad_on_demand_impl_glLineWidth(GLfloat width) {
    glad_glLineWidth = (PFNGLLINEWIDTHPROC) glad_gl_on_demand_loader("glLineWidth");
    glad_glLineWidth(width);
}
PFNGLLINEWIDTHPROC glad_glLineWidth = glad_on_demand_impl_glLineWidth;
static void GLAD_API_PTR glad_on_demand_impl_glLinkProgram(GLuint program) {
    glad_glLinkProgram = (PFNGLLINKPROGRAMPROC) glad_gl_on_demand_loader("glLinkProgram");
    glad_glLinkProgram(program);
}
PFNGLLINKPROGRAMPROC glad_glLinkProgram = glad_on_demand_impl_glLinkProgram;
static void GLAD_API_PTR glad_on_demand_impl_glLinkProgramARB(GLhandleARB programObj) {
    glad_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC) glad_gl_on_demand_loader("glLinkProgramARB");
    glad_glLinkProgramARB(programObj);
}
PFNGLLINKPROGRAMARBPROC glad_glLinkProgramARB = glad_on_demand_impl_glLinkProgramARB;
static void GLAD_API_PTR glad_on_demand_impl_glListBase(GLuint base) {
    glad_glListBase = (PFNGLLISTBASEPROC) glad_gl_on_demand_loader("glListBase");
    glad_glListBase(base);
}
PFNGLLISTBASEPROC glad_glListBase = glad_on_demand_impl_glListBase;
static void GLAD_API_PTR glad_on_demand_impl_glLoadIdentity(void) {
    glad_glLoadIdentity = (PFNGLLOADIDENTITYPROC) glad_gl_on_demand_loader("glLoadIdentity");
    glad_glLoadIdentity();
}
PFNGLLOADIDENTITYPROC glad_glLoadIdentity = glad_on_demand_impl_glLoadIdentity;
static void GLAD_API_PTR glad_on_demand_impl_glLoadMatrixd(const GLdouble * m) {
    glad_glLoadMatrixd = (PFNGLLOADMATRIXDPROC) glad_gl_on_demand_loader("glLoadMatrixd");
    glad_glLoadMatrixd(m);
}
PFNGLLOADMATRIXDPROC glad_glLoadMatrixd = glad_on_demand_impl_glLoadMatrixd;
static void GLAD_API_PTR glad_on_demand_impl_glLoadMatrixf(const GLfloat * m) {
    glad_glLoadMatrixf = (PFNGLLOADMATRIXFPROC) glad_gl_on_demand_loader("glLoadMatrixf");
    glad_glLoadMatrixf(m);
}
PFNGLLOADMATRIXFPROC glad_glLoadMatrixf = glad_on_demand_impl_glLoadMatrixf;
static void GLAD_API_PTR glad_on_demand_impl_glLoadName(GLuint name) {
    glad_glLoadName = (PFNGLLOADNAMEPROC) glad_gl_on_demand_loader("glLoadName");
    glad_glLoadName(name);
}
PFNGLLOADNAMEPROC glad_glLoadName = glad_on_demand_impl_glLoadName;
static void GLAD_API_PTR glad_on_demand_impl_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) {
    glad_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC) glad_gl_on_demand_loader("glLoadProgramNV");
    glad_glLoadProgramNV(target, id, len, program);
}
PFNGLLOADPROGRAMNVPROC glad_glLoadProgramNV = glad_on_demand_impl_glLoadProgramNV;
static void GLAD_API_PTR glad_on_demand_impl_glLoadTransposeMatrixd(const GLdouble * m) {
    glad_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC) glad_gl_on_demand_loader("glLoadTransposeMatrixd");
    glad_glLoadTransposeMatrixd(m);
}
PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd = glad_on_demand_impl_glLoadTransposeMatrixd;
static void GLAD_API_PTR glad_on_demand_impl_glLoadTransposeMatrixdARB(const GLdouble * m) {
    glad_glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC) glad_gl_on_demand_loader("glLoadTransposeMatrixdARB");
    glad_glLoadTransposeMatrixdARB(m);
}
PFNGLLOADTRANSPOSEMATRIXDARBPROC glad_glLoadTransposeMatrixdARB = glad_on_demand_impl_glLoadTransposeMatrixdARB;
static void GLAD_API_PTR glad_on_demand_impl_glLoadTransposeMatrixf(const GLfloat * m) {
    glad_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC) glad_gl_on_demand_loader("glLoadTransposeMatrixf");
    glad_glLoadTransposeMatrixf(m);
}
PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf = glad_on_demand_impl_glLoadTransposeMatrixf;
static void GLAD_API_PTR glad_on_demand_impl_glLoadTransposeMatrixfARB(const GLfloat * m) {
    glad_glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC) glad_gl_on_demand_loader("glLoadTransposeMatrixfARB");
    glad_glLoadTransposeMatrixfARB(m);
}
PFNGLLOADTRANSPOSEMATRIXFARBPROC glad_glLoadTransposeMatrixfARB = glad_on_demand_impl_glLoadTransposeMatrixfARB;
static void GLAD_API_PTR glad_on_demand_impl_glLogicOp(GLenum opcode) {
    glad_glLogicOp = (PFNGLLOGICOPPROC) glad_gl_on_demand_loader("glLogicOp");
    glad_glLogicOp(opcode);
}
PFNGLLOGICOPPROC glad_glLogicOp = glad_on_demand_impl_glLogicOp;
static void GLAD_API_PTR glad_on_demand_impl_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
    glad_glMap1d = (PFNGLMAP1DPROC) glad_gl_on_demand_loader("glMap1d");
    glad_glMap1d(target, u1, u2, stride, order, points);
}
PFNGLMAP1DPROC glad_glMap1d = glad_on_demand_impl_glMap1d;
static void GLAD_API_PTR glad_on_demand_impl_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
    glad_glMap1f = (PFNGLMAP1FPROC) glad_gl_on_demand_loader("glMap1f");
    glad_glMap1f(target, u1, u2, stride, order, points);
}
PFNGLMAP1FPROC glad_glMap1f = glad_on_demand_impl_glMap1f;
static void GLAD_API_PTR glad_on_demand_impl_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
    glad_glMap2d = (PFNGLMAP2DPROC) glad_gl_on_demand_loader("glMap2d");
    glad_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2DPROC glad_glMap2d = glad_on_demand_impl_glMap2d;
static void GLAD_API_PTR glad_on_demand_impl_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
    glad_glMap2f = (PFNGLMAP2FPROC) glad_gl_on_demand_loader("glMap2f");
    glad_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2FPROC glad_glMap2f = glad_on_demand_impl_glMap2f;
static void * GLAD_API_PTR glad_on_demand_impl_glMapBuffer(GLenum target, GLenum access) {
    glad_glMapBuffer = (PFNGLMAPBUFFERPROC) glad_gl_on_demand_loader("glMapBuffer");
    return glad_glMapBuffer(target, access);
}
PFNGLMAPBUFFERPROC glad_glMapBuffer = glad_on_demand_impl_glMapBuffer;
static void * GLAD_API_PTR glad_on_demand_impl_glMapBufferARB(GLenum target, GLenum access) {
    glad_glMapBufferARB = (PFNGLMAPBUFFERARBPROC) glad_gl_on_demand_loader("glMapBufferARB");
    return glad_glMapBufferARB(target, access);
}
PFNGLMAPBUFFERARBPROC glad_glMapBufferARB = glad_on_demand_impl_glMapBufferARB;
static void * GLAD_API_PTR glad_on_demand_impl_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
    glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC) glad_gl_on_demand_loader("glMapBufferRange");
    return glad_glMapBufferRange(target, offset, length, access);
}
PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange = glad_on_demand_impl_glMapBufferRange;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
    glad_glMapGrid1d = (PFNGLMAPGRID1DPROC) glad_gl_on_demand_loader("glMapGrid1d");
    glad_glMapGrid1d(un, u1, u2);
}
PFNGLMAPGRID1DPROC glad_glMapGrid1d = glad_on_demand_impl_glMapGrid1d;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
    glad_glMapGrid1f = (PFNGLMAPGRID1FPROC) glad_gl_on_demand_loader("glMapGrid1f");
    glad_glMapGrid1f(un, u1, u2);
}
PFNGLMAPGRID1FPROC glad_glMapGrid1f = glad_on_demand_impl_glMapGrid1f;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
    glad_glMapGrid2d = (PFNGLMAPGRID2DPROC) glad_gl_on_demand_loader("glMapGrid2d");
    glad_glMapGrid2d(un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2DPROC glad_glMapGrid2d = glad_on_demand_impl_glMapGrid2d;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
    glad_glMapGrid2f = (PFNGLMAPGRID2FPROC) glad_gl_on_demand_loader("glMapGrid2f");
    glad_glMapGrid2f(un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2FPROC glad_glMapGrid2f = glad_on_demand_impl_glMapGrid2f;
static void * GLAD_API_PTR glad_on_demand_impl_glMapNamedBuffer(GLuint buffer, GLenum access) {
    glad_glMapNamedBuffer = (PFNGLMAPNAMEDBUFFERPROC) glad_gl_on_demand_loader("glMapNamedBuffer");
    return glad_glMapNamedBuffer(buffer, access);
}
PFNGLMAPNAMEDBUFFERPROC glad_glMapNamedBuffer = glad_on_demand_impl_glMapNamedBuffer;
static void * GLAD_API_PTR glad_on_demand_impl_glMapNamedBufferEXT(GLuint buffer, GLenum access) {
    glad_glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC) glad_gl_on_demand_loader("glMapNamedBufferEXT");
    return glad_glMapNamedBufferEXT(buffer, access);
}
PFNGLMAPNAMEDBUFFEREXTPROC glad_glMapNamedBufferEXT = glad_on_demand_impl_glMapNamedBufferEXT;
static void * GLAD_API_PTR glad_on_demand_impl_glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
    glad_glMapNamedBufferRange = (PFNGLMAPNAMEDBUFFERRANGEPROC) glad_gl_on_demand_loader("glMapNamedBufferRange");
    return glad_glMapNamedBufferRange(buffer, offset, length, access);
}
PFNGLMAPNAMEDBUFFERRANGEPROC glad_glMapNamedBufferRange = glad_on_demand_impl_glMapNamedBufferRange;
static void * GLAD_API_PTR glad_on_demand_impl_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
    glad_glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC) glad_gl_on_demand_loader("glMapNamedBufferRangeEXT");
    return glad_glMapNamedBufferRangeEXT(buffer, offset, length, access);
}
PFNGLMAPNAMEDBUFFERRANGEEXTPROC glad_glMapNamedBufferRangeEXT = glad_on_demand_impl_glMapNamedBufferRangeEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
    glad_glMaterialf = (PFNGLMATERIALFPROC) glad_gl_on_demand_loader("glMaterialf");
    glad_glMaterialf(face, pname, param);
}
PFNGLMATERIALFPROC glad_glMaterialf = glad_on_demand_impl_glMaterialf;
static void GLAD_API_PTR glad_on_demand_impl_glMaterialfv(GLenum face, GLenum pname, const GLfloat * params) {
    glad_glMaterialfv = (PFNGLMATERIALFVPROC) glad_gl_on_demand_loader("glMaterialfv");
    glad_glMaterialfv(face, pname, params);
}
PFNGLMATERIALFVPROC glad_glMaterialfv = glad_on_demand_impl_glMaterialfv;
static void GLAD_API_PTR glad_on_demand_impl_glMateriali(GLenum face, GLenum pname, GLint param) {
    glad_glMateriali = (PFNGLMATERIALIPROC) glad_gl_on_demand_loader("glMateriali");
    glad_glMateriali(face, pname, param);
}
PFNGLMATERIALIPROC glad_glMateriali = glad_on_demand_impl_glMateriali;
static void GLAD_API_PTR glad_on_demand_impl_glMaterialiv(GLenum face, GLenum pname, const GLint * params) {
    glad_glMaterialiv = (PFNGLMATERIALIVPROC) glad_gl_on_demand_loader("glMaterialiv");
    glad_glMaterialiv(face, pname, params);
}
PFNGLMATERIALIVPROC glad_glMaterialiv = glad_on_demand_impl_glMaterialiv;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC) glad_gl_on_demand_loader("glMatrixFrustumEXT");
    glad_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
}
PFNGLMATRIXFRUSTUMEXTPROC glad_glMatrixFrustumEXT = glad_on_demand_impl_glMatrixFrustumEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixLoadIdentityEXT(GLenum mode) {
    glad_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC) glad_gl_on_demand_loader("glMatrixLoadIdentityEXT");
    glad_glMatrixLoadIdentityEXT(mode);
}
PFNGLMATRIXLOADIDENTITYEXTPROC glad_glMatrixLoadIdentityEXT = glad_on_demand_impl_glMatrixLoadIdentityEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) {
    glad_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC) glad_gl_on_demand_loader("glMatrixLoadTransposedEXT");
    glad_glMatrixLoadTransposedEXT(mode, m);
}
PFNGLMATRIXLOADTRANSPOSEDEXTPROC glad_glMatrixLoadTransposedEXT = glad_on_demand_impl_glMatrixLoadTransposedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) {
    glad_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC) glad_gl_on_demand_loader("glMatrixLoadTransposefEXT");
    glad_glMatrixLoadTransposefEXT(mode, m);
}
PFNGLMATRIXLOADTRANSPOSEFEXTPROC glad_glMatrixLoadTransposefEXT = glad_on_demand_impl_glMatrixLoadTransposefEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixLoaddEXT(GLenum mode, const GLdouble * m) {
    glad_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC) glad_gl_on_demand_loader("glMatrixLoaddEXT");
    glad_glMatrixLoaddEXT(mode, m);
}
PFNGLMATRIXLOADDEXTPROC glad_glMatrixLoaddEXT = glad_on_demand_impl_glMatrixLoaddEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixLoadfEXT(GLenum mode, const GLfloat * m) {
    glad_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC) glad_gl_on_demand_loader("glMatrixLoadfEXT");
    glad_glMatrixLoadfEXT(mode, m);
}
PFNGLMATRIXLOADFEXTPROC glad_glMatrixLoadfEXT = glad_on_demand_impl_glMatrixLoadfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixMode(GLenum mode) {
    glad_glMatrixMode = (PFNGLMATRIXMODEPROC) glad_gl_on_demand_loader("glMatrixMode");
    glad_glMatrixMode(mode);
}
PFNGLMATRIXMODEPROC glad_glMatrixMode = glad_on_demand_impl_glMatrixMode;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) {
    glad_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC) glad_gl_on_demand_loader("glMatrixMultTransposedEXT");
    glad_glMatrixMultTransposedEXT(mode, m);
}
PFNGLMATRIXMULTTRANSPOSEDEXTPROC glad_glMatrixMultTransposedEXT = glad_on_demand_impl_glMatrixMultTransposedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) {
    glad_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC) glad_gl_on_demand_loader("glMatrixMultTransposefEXT");
    glad_glMatrixMultTransposefEXT(mode, m);
}
PFNGLMATRIXMULTTRANSPOSEFEXTPROC glad_glMatrixMultTransposefEXT = glad_on_demand_impl_glMatrixMultTransposefEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixMultdEXT(GLenum mode, const GLdouble * m) {
    glad_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC) glad_gl_on_demand_loader("glMatrixMultdEXT");
    glad_glMatrixMultdEXT(mode, m);
}
PFNGLMATRIXMULTDEXTPROC glad_glMatrixMultdEXT = glad_on_demand_impl_glMatrixMultdEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixMultfEXT(GLenum mode, const GLfloat * m) {
    glad_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC) glad_gl_on_demand_loader("glMatrixMultfEXT");
    glad_glMatrixMultfEXT(mode, m);
}
PFNGLMATRIXMULTFEXTPROC glad_glMatrixMultfEXT = glad_on_demand_impl_glMatrixMultfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC) glad_gl_on_demand_loader("glMatrixOrthoEXT");
    glad_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
}
PFNGLMATRIXORTHOEXTPROC glad_glMatrixOrthoEXT = glad_on_demand_impl_glMatrixOrthoEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixPopEXT(GLenum mode) {
    glad_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC) glad_gl_on_demand_loader("glMatrixPopEXT");
    glad_glMatrixPopEXT(mode);
}
PFNGLMATRIXPOPEXTPROC glad_glMatrixPopEXT = glad_on_demand_impl_glMatrixPopEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixPushEXT(GLenum mode) {
    glad_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC) glad_gl_on_demand_loader("glMatrixPushEXT");
    glad_glMatrixPushEXT(mode);
}
PFNGLMATRIXPUSHEXTPROC glad_glMatrixPushEXT = glad_on_demand_impl_glMatrixPushEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
    glad_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC) glad_gl_on_demand_loader("glMatrixRotatedEXT");
    glad_glMatrixRotatedEXT(mode, angle, x, y, z);
}
PFNGLMATRIXROTATEDEXTPROC glad_glMatrixRotatedEXT = glad_on_demand_impl_glMatrixRotatedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
    glad_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC) glad_gl_on_demand_loader("glMatrixRotatefEXT");
    glad_glMatrixRotatefEXT(mode, angle, x, y, z);
}
PFNGLMATRIXROTATEFEXTPROC glad_glMatrixRotatefEXT = glad_on_demand_impl_glMatrixRotatefEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
    glad_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC) glad_gl_on_demand_loader("glMatrixScaledEXT");
    glad_glMatrixScaledEXT(mode, x, y, z);
}
PFNGLMATRIXSCALEDEXTPROC glad_glMatrixScaledEXT = glad_on_demand_impl_glMatrixScaledEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
    glad_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC) glad_gl_on_demand_loader("glMatrixScalefEXT");
    glad_glMatrixScalefEXT(mode, x, y, z);
}
PFNGLMATRIXSCALEFEXTPROC glad_glMatrixScalefEXT = glad_on_demand_impl_glMatrixScalefEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
    glad_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC) glad_gl_on_demand_loader("glMatrixTranslatedEXT");
    glad_glMatrixTranslatedEXT(mode, x, y, z);
}
PFNGLMATRIXTRANSLATEDEXTPROC glad_glMatrixTranslatedEXT = glad_on_demand_impl_glMatrixTranslatedEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
    glad_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC) glad_gl_on_demand_loader("glMatrixTranslatefEXT");
    glad_glMatrixTranslatefEXT(mode, x, y, z);
}
PFNGLMATRIXTRANSLATEFEXTPROC glad_glMatrixTranslatefEXT = glad_on_demand_impl_glMatrixTranslatefEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMemoryBarrier(GLbitfield barriers) {
    glad_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC) glad_gl_on_demand_loader("glMemoryBarrier");
    glad_glMemoryBarrier(barriers);
}
PFNGLMEMORYBARRIERPROC glad_glMemoryBarrier = glad_on_demand_impl_glMemoryBarrier;
static void GLAD_API_PTR glad_on_demand_impl_glMemoryBarrierByRegion(GLbitfield barriers) {
    glad_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC) glad_gl_on_demand_loader("glMemoryBarrierByRegion");
    glad_glMemoryBarrierByRegion(barriers);
}
PFNGLMEMORYBARRIERBYREGIONPROC glad_glMemoryBarrierByRegion = glad_on_demand_impl_glMemoryBarrierByRegion;
static void GLAD_API_PTR glad_on_demand_impl_glMemoryBarrierEXT(GLbitfield barriers) {
    glad_glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC) glad_gl_on_demand_loader("glMemoryBarrierEXT");
    glad_glMemoryBarrierEXT(barriers);
}
PFNGLMEMORYBARRIEREXTPROC glad_glMemoryBarrierEXT = glad_on_demand_impl_glMemoryBarrierEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMinSampleShading(GLfloat value) {
    glad_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC) glad_gl_on_demand_loader("glMinSampleShading");
    glad_glMinSampleShading(value);
}
PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading = glad_on_demand_impl_glMinSampleShading;
static void GLAD_API_PTR glad_on_demand_impl_glMinSampleShadingARB(GLfloat value) {
    glad_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC) glad_gl_on_demand_loader("glMinSampleShadingARB");
    glad_glMinSampleShadingARB(value);
}
PFNGLMINSAMPLESHADINGARBPROC glad_glMinSampleShadingARB = glad_on_demand_impl_glMinSampleShadingARB;
static void GLAD_API_PTR glad_on_demand_impl_glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {
    glad_glMinmax = (PFNGLMINMAXPROC) glad_gl_on_demand_loader("glMinmax");
    glad_glMinmax(target, internalformat, sink);
}
PFNGLMINMAXPROC glad_glMinmax = glad_on_demand_impl_glMinmax;
static void GLAD_API_PTR glad_on_demand_impl_glMultMatrixd(const GLdouble * m) {
    glad_glMultMatrixd = (PFNGLMULTMATRIXDPROC) glad_gl_on_demand_loader("glMultMatrixd");
    glad_glMultMatrixd(m);
}
PFNGLMULTMATRIXDPROC glad_glMultMatrixd = glad_on_demand_impl_glMultMatrixd;
static void GLAD_API_PTR glad_on_demand_impl_glMultMatrixf(const GLfloat * m) {
    glad_glMultMatrixf = (PFNGLMULTMATRIXFPROC) glad_gl_on_demand_loader("glMultMatrixf");
    glad_glMultMatrixf(m);
}
PFNGLMULTMATRIXFPROC glad_glMultMatrixf = glad_on_demand_impl_glMultMatrixf;
static void GLAD_API_PTR glad_on_demand_impl_glMultTransposeMatrixd(const GLdouble * m) {
    glad_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC) glad_gl_on_demand_loader("glMultTransposeMatrixd");
    glad_glMultTransposeMatrixd(m);
}
PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd = glad_on_demand_impl_glMultTransposeMatrixd;
static void GLAD_API_PTR glad_on_demand_impl_glMultTransposeMatrixdARB(const GLdouble * m) {
    glad_glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC) glad_gl_on_demand_loader("glMultTransposeMatrixdARB");
    glad_glMultTransposeMatrixdARB(m);
}
PFNGLMULTTRANSPOSEMATRIXDARBPROC glad_glMultTransposeMatrixdARB = glad_on_demand_impl_glMultTransposeMatrixdARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultTransposeMatrixf(const GLfloat * m) {
    glad_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC) glad_gl_on_demand_loader("glMultTransposeMatrixf");
    glad_glMultTransposeMatrixf(m);
}
PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf = glad_on_demand_impl_glMultTransposeMatrixf;
static void GLAD_API_PTR glad_on_demand_impl_glMultTransposeMatrixfARB(const GLfloat * m) {
    glad_glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC) glad_gl_on_demand_loader("glMultTransposeMatrixfARB");
    glad_glMultTransposeMatrixfARB(m);
}
PFNGLMULTTRANSPOSEMATRIXFARBPROC glad_glMultTransposeMatrixfARB = glad_on_demand_impl_glMultTransposeMatrixfARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) {
    glad_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC) glad_gl_on_demand_loader("glMultiDrawArrays");
    glad_glMultiDrawArrays(mode, first, count, drawcount);
}
PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays = glad_on_demand_impl_glMultiDrawArrays;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) {
    glad_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC) glad_gl_on_demand_loader("glMultiDrawArraysEXT");
    glad_glMultiDrawArraysEXT(mode, first, count, primcount);
}
PFNGLMULTIDRAWARRAYSEXTPROC glad_glMultiDrawArraysEXT = glad_on_demand_impl_glMultiDrawArraysEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) {
    glad_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC) glad_gl_on_demand_loader("glMultiDrawArraysIndirect");
    glad_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}
PFNGLMULTIDRAWARRAYSINDIRECTPROC glad_glMultiDrawArraysIndirect = glad_on_demand_impl_glMultiDrawArraysIndirect;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) {
    glad_glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) glad_gl_on_demand_loader("glMultiDrawArraysIndirectAMD");
    glad_glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
}
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glad_glMultiDrawArraysIndirectAMD = glad_on_demand_impl_glMultiDrawArraysIndirectAMD;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
    glad_glMultiDrawArraysIndirectCount = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC) glad_gl_on_demand_loader("glMultiDrawArraysIndirectCount");
    glad_glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
}
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC glad_glMultiDrawArraysIndirectCount = glad_on_demand_impl_glMultiDrawArraysIndirectCount;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawArraysIndirectCountARB(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
    glad_glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) glad_gl_on_demand_loader("glMultiDrawArraysIndirectCountARB");
    glad_glMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride);
}
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC glad_glMultiDrawArraysIndirectCountARB = glad_on_demand_impl_glMultiDrawArraysIndirectCountARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) {
    glad_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC) glad_gl_on_demand_loader("glMultiDrawElements");
    glad_glMultiDrawElements(mode, count, type, indices, drawcount);
}
PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements = glad_on_demand_impl_glMultiDrawElements;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) {
    glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) glad_gl_on_demand_loader("glMultiDrawElementsBaseVertex");
    glad_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
}
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex = glad_on_demand_impl_glMultiDrawElementsBaseVertex;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) {
    glad_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC) glad_gl_on_demand_loader("glMultiDrawElementsEXT");
    glad_glMultiDrawElementsEXT(mode, count, type, indices, primcount);
}
PFNGLMULTIDRAWELEMENTSEXTPROC glad_glMultiDrawElementsEXT = glad_on_demand_impl_glMultiDrawElementsEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) {
    glad_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC) glad_gl_on_demand_loader("glMultiDrawElementsIndirect");
    glad_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
}
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glad_glMultiDrawElementsIndirect = glad_on_demand_impl_glMultiDrawElementsIndirect;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) {
    glad_glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) glad_gl_on_demand_loader("glMultiDrawElementsIndirectAMD");
    glad_glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
}
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glad_glMultiDrawElementsIndirectAMD = glad_on_demand_impl_glMultiDrawElementsIndirectAMD;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
    glad_glMultiDrawElementsIndirectCount = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC) glad_gl_on_demand_loader("glMultiDrawElementsIndirectCount");
    glad_glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
}
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC glad_glMultiDrawElementsIndirectCount = glad_on_demand_impl_glMultiDrawElementsIndirectCount;
static void GLAD_API_PTR glad_on_demand_impl_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) {
    glad_glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) glad_gl_on_demand_loader("glMultiDrawElementsIndirectCountARB");
    glad_glMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride);
}
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC glad_glMultiDrawElementsIndirectCountARB = glad_on_demand_impl_glMultiDrawElementsIndirectCountARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC) glad_gl_on_demand_loader("glMultiTexBufferEXT");
    glad_glMultiTexBufferEXT(texunit, target, internalformat, buffer);
}
PFNGLMULTITEXBUFFEREXTPROC glad_glMultiTexBufferEXT = glad_on_demand_impl_glMultiTexBufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1d(GLenum target, GLdouble s) {
    glad_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC) glad_gl_on_demand_loader("glMultiTexCoord1d");
    glad_glMultiTexCoord1d(target, s);
}
PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d = glad_on_demand_impl_glMultiTexCoord1d;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1dARB(GLenum target, GLdouble s) {
    glad_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1dARB");
    glad_glMultiTexCoord1dARB(target, s);
}
PFNGLMULTITEXCOORD1DARBPROC glad_glMultiTexCoord1dARB = glad_on_demand_impl_glMultiTexCoord1dARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1dv(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC) glad_gl_on_demand_loader("glMultiTexCoord1dv");
    glad_glMultiTexCoord1dv(target, v);
}
PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv = glad_on_demand_impl_glMultiTexCoord1dv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1dvARB(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1dvARB");
    glad_glMultiTexCoord1dvARB(target, v);
}
PFNGLMULTITEXCOORD1DVARBPROC glad_glMultiTexCoord1dvARB = glad_on_demand_impl_glMultiTexCoord1dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1f(GLenum target, GLfloat s) {
    glad_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC) glad_gl_on_demand_loader("glMultiTexCoord1f");
    glad_glMultiTexCoord1f(target, s);
}
PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f = glad_on_demand_impl_glMultiTexCoord1f;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1fARB(GLenum target, GLfloat s) {
    glad_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1fARB");
    glad_glMultiTexCoord1fARB(target, s);
}
PFNGLMULTITEXCOORD1FARBPROC glad_glMultiTexCoord1fARB = glad_on_demand_impl_glMultiTexCoord1fARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1fv(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC) glad_gl_on_demand_loader("glMultiTexCoord1fv");
    glad_glMultiTexCoord1fv(target, v);
}
PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv = glad_on_demand_impl_glMultiTexCoord1fv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1fvARB(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1fvARB");
    glad_glMultiTexCoord1fvARB(target, v);
}
PFNGLMULTITEXCOORD1FVARBPROC glad_glMultiTexCoord1fvARB = glad_on_demand_impl_glMultiTexCoord1fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1i(GLenum target, GLint s) {
    glad_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC) glad_gl_on_demand_loader("glMultiTexCoord1i");
    glad_glMultiTexCoord1i(target, s);
}
PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i = glad_on_demand_impl_glMultiTexCoord1i;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1iARB(GLenum target, GLint s) {
    glad_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1iARB");
    glad_glMultiTexCoord1iARB(target, s);
}
PFNGLMULTITEXCOORD1IARBPROC glad_glMultiTexCoord1iARB = glad_on_demand_impl_glMultiTexCoord1iARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1iv(GLenum target, const GLint * v) {
    glad_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC) glad_gl_on_demand_loader("glMultiTexCoord1iv");
    glad_glMultiTexCoord1iv(target, v);
}
PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv = glad_on_demand_impl_glMultiTexCoord1iv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1ivARB(GLenum target, const GLint * v) {
    glad_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1ivARB");
    glad_glMultiTexCoord1ivARB(target, v);
}
PFNGLMULTITEXCOORD1IVARBPROC glad_glMultiTexCoord1ivARB = glad_on_demand_impl_glMultiTexCoord1ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1s(GLenum target, GLshort s) {
    glad_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC) glad_gl_on_demand_loader("glMultiTexCoord1s");
    glad_glMultiTexCoord1s(target, s);
}
PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s = glad_on_demand_impl_glMultiTexCoord1s;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1sARB(GLenum target, GLshort s) {
    glad_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1sARB");
    glad_glMultiTexCoord1sARB(target, s);
}
PFNGLMULTITEXCOORD1SARBPROC glad_glMultiTexCoord1sARB = glad_on_demand_impl_glMultiTexCoord1sARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1sv(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC) glad_gl_on_demand_loader("glMultiTexCoord1sv");
    glad_glMultiTexCoord1sv(target, v);
}
PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv = glad_on_demand_impl_glMultiTexCoord1sv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord1svARB(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord1svARB");
    glad_glMultiTexCoord1svARB(target, v);
}
PFNGLMULTITEXCOORD1SVARBPROC glad_glMultiTexCoord1svARB = glad_on_demand_impl_glMultiTexCoord1svARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
    glad_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC) glad_gl_on_demand_loader("glMultiTexCoord2d");
    glad_glMultiTexCoord2d(target, s, t);
}
PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d = glad_on_demand_impl_glMultiTexCoord2d;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) {
    glad_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2dARB");
    glad_glMultiTexCoord2dARB(target, s, t);
}
PFNGLMULTITEXCOORD2DARBPROC glad_glMultiTexCoord2dARB = glad_on_demand_impl_glMultiTexCoord2dARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2dv(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC) glad_gl_on_demand_loader("glMultiTexCoord2dv");
    glad_glMultiTexCoord2dv(target, v);
}
PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv = glad_on_demand_impl_glMultiTexCoord2dv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2dvARB(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2dvARB");
    glad_glMultiTexCoord2dvARB(target, v);
}
PFNGLMULTITEXCOORD2DVARBPROC glad_glMultiTexCoord2dvARB = glad_on_demand_impl_glMultiTexCoord2dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
    glad_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC) glad_gl_on_demand_loader("glMultiTexCoord2f");
    glad_glMultiTexCoord2f(target, s, t);
}
PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f = glad_on_demand_impl_glMultiTexCoord2f;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) {
    glad_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2fARB");
    glad_glMultiTexCoord2fARB(target, s, t);
}
PFNGLMULTITEXCOORD2FARBPROC glad_glMultiTexCoord2fARB = glad_on_demand_impl_glMultiTexCoord2fARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2fv(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC) glad_gl_on_demand_loader("glMultiTexCoord2fv");
    glad_glMultiTexCoord2fv(target, v);
}
PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv = glad_on_demand_impl_glMultiTexCoord2fv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2fvARB(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2fvARB");
    glad_glMultiTexCoord2fvARB(target, v);
}
PFNGLMULTITEXCOORD2FVARBPROC glad_glMultiTexCoord2fvARB = glad_on_demand_impl_glMultiTexCoord2fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
    glad_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC) glad_gl_on_demand_loader("glMultiTexCoord2i");
    glad_glMultiTexCoord2i(target, s, t);
}
PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i = glad_on_demand_impl_glMultiTexCoord2i;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t) {
    glad_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2iARB");
    glad_glMultiTexCoord2iARB(target, s, t);
}
PFNGLMULTITEXCOORD2IARBPROC glad_glMultiTexCoord2iARB = glad_on_demand_impl_glMultiTexCoord2iARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2iv(GLenum target, const GLint * v) {
    glad_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC) glad_gl_on_demand_loader("glMultiTexCoord2iv");
    glad_glMultiTexCoord2iv(target, v);
}
PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv = glad_on_demand_impl_glMultiTexCoord2iv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2ivARB(GLenum target, const GLint * v) {
    glad_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2ivARB");
    glad_glMultiTexCoord2ivARB(target, v);
}
PFNGLMULTITEXCOORD2IVARBPROC glad_glMultiTexCoord2ivARB = glad_on_demand_impl_glMultiTexCoord2ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
    glad_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC) glad_gl_on_demand_loader("glMultiTexCoord2s");
    glad_glMultiTexCoord2s(target, s, t);
}
PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s = glad_on_demand_impl_glMultiTexCoord2s;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) {
    glad_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2sARB");
    glad_glMultiTexCoord2sARB(target, s, t);
}
PFNGLMULTITEXCOORD2SARBPROC glad_glMultiTexCoord2sARB = glad_on_demand_impl_glMultiTexCoord2sARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2sv(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC) glad_gl_on_demand_loader("glMultiTexCoord2sv");
    glad_glMultiTexCoord2sv(target, v);
}
PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv = glad_on_demand_impl_glMultiTexCoord2sv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord2svARB(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord2svARB");
    glad_glMultiTexCoord2svARB(target, v);
}
PFNGLMULTITEXCOORD2SVARBPROC glad_glMultiTexCoord2svARB = glad_on_demand_impl_glMultiTexCoord2svARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
    glad_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC) glad_gl_on_demand_loader("glMultiTexCoord3d");
    glad_glMultiTexCoord3d(target, s, t, r);
}
PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d = glad_on_demand_impl_glMultiTexCoord3d;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
    glad_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3dARB");
    glad_glMultiTexCoord3dARB(target, s, t, r);
}
PFNGLMULTITEXCOORD3DARBPROC glad_glMultiTexCoord3dARB = glad_on_demand_impl_glMultiTexCoord3dARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3dv(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC) glad_gl_on_demand_loader("glMultiTexCoord3dv");
    glad_glMultiTexCoord3dv(target, v);
}
PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv = glad_on_demand_impl_glMultiTexCoord3dv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3dvARB(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3dvARB");
    glad_glMultiTexCoord3dvARB(target, v);
}
PFNGLMULTITEXCOORD3DVARBPROC glad_glMultiTexCoord3dvARB = glad_on_demand_impl_glMultiTexCoord3dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
    glad_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC) glad_gl_on_demand_loader("glMultiTexCoord3f");
    glad_glMultiTexCoord3f(target, s, t, r);
}
PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f = glad_on_demand_impl_glMultiTexCoord3f;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
    glad_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3fARB");
    glad_glMultiTexCoord3fARB(target, s, t, r);
}
PFNGLMULTITEXCOORD3FARBPROC glad_glMultiTexCoord3fARB = glad_on_demand_impl_glMultiTexCoord3fARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3fv(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC) glad_gl_on_demand_loader("glMultiTexCoord3fv");
    glad_glMultiTexCoord3fv(target, v);
}
PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv = glad_on_demand_impl_glMultiTexCoord3fv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3fvARB(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3fvARB");
    glad_glMultiTexCoord3fvARB(target, v);
}
PFNGLMULTITEXCOORD3FVARBPROC glad_glMultiTexCoord3fvARB = glad_on_demand_impl_glMultiTexCoord3fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
    glad_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC) glad_gl_on_demand_loader("glMultiTexCoord3i");
    glad_glMultiTexCoord3i(target, s, t, r);
}
PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i = glad_on_demand_impl_glMultiTexCoord3i;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) {
    glad_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3iARB");
    glad_glMultiTexCoord3iARB(target, s, t, r);
}
PFNGLMULTITEXCOORD3IARBPROC glad_glMultiTexCoord3iARB = glad_on_demand_impl_glMultiTexCoord3iARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3iv(GLenum target, const GLint * v) {
    glad_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC) glad_gl_on_demand_loader("glMultiTexCoord3iv");
    glad_glMultiTexCoord3iv(target, v);
}
PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv = glad_on_demand_impl_glMultiTexCoord3iv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3ivARB(GLenum target, const GLint * v) {
    glad_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3ivARB");
    glad_glMultiTexCoord3ivARB(target, v);
}
PFNGLMULTITEXCOORD3IVARBPROC glad_glMultiTexCoord3ivARB = glad_on_demand_impl_glMultiTexCoord3ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
    glad_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC) glad_gl_on_demand_loader("glMultiTexCoord3s");
    glad_glMultiTexCoord3s(target, s, t, r);
}
PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s = glad_on_demand_impl_glMultiTexCoord3s;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) {
    glad_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3sARB");
    glad_glMultiTexCoord3sARB(target, s, t, r);
}
PFNGLMULTITEXCOORD3SARBPROC glad_glMultiTexCoord3sARB = glad_on_demand_impl_glMultiTexCoord3sARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3sv(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC) glad_gl_on_demand_loader("glMultiTexCoord3sv");
    glad_glMultiTexCoord3sv(target, v);
}
PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv = glad_on_demand_impl_glMultiTexCoord3sv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord3svARB(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord3svARB");
    glad_glMultiTexCoord3svARB(target, v);
}
PFNGLMULTITEXCOORD3SVARBPROC glad_glMultiTexCoord3svARB = glad_on_demand_impl_glMultiTexCoord3svARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glad_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC) glad_gl_on_demand_loader("glMultiTexCoord4d");
    glad_glMultiTexCoord4d(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d = glad_on_demand_impl_glMultiTexCoord4d;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glad_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4dARB");
    glad_glMultiTexCoord4dARB(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4DARBPROC glad_glMultiTexCoord4dARB = glad_on_demand_impl_glMultiTexCoord4dARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4dv(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC) glad_gl_on_demand_loader("glMultiTexCoord4dv");
    glad_glMultiTexCoord4dv(target, v);
}
PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv = glad_on_demand_impl_glMultiTexCoord4dv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4dvARB(GLenum target, const GLdouble * v) {
    glad_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4dvARB");
    glad_glMultiTexCoord4dvARB(target, v);
}
PFNGLMULTITEXCOORD4DVARBPROC glad_glMultiTexCoord4dvARB = glad_on_demand_impl_glMultiTexCoord4dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC) glad_gl_on_demand_loader("glMultiTexCoord4f");
    glad_glMultiTexCoord4f(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f = glad_on_demand_impl_glMultiTexCoord4f;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glad_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4fARB");
    glad_glMultiTexCoord4fARB(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4FARBPROC glad_glMultiTexCoord4fARB = glad_on_demand_impl_glMultiTexCoord4fARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4fv(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC) glad_gl_on_demand_loader("glMultiTexCoord4fv");
    glad_glMultiTexCoord4fv(target, v);
}
PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv = glad_on_demand_impl_glMultiTexCoord4fv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4fvARB(GLenum target, const GLfloat * v) {
    glad_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4fvARB");
    glad_glMultiTexCoord4fvARB(target, v);
}
PFNGLMULTITEXCOORD4FVARBPROC glad_glMultiTexCoord4fvARB = glad_on_demand_impl_glMultiTexCoord4fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
    glad_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC) glad_gl_on_demand_loader("glMultiTexCoord4i");
    glad_glMultiTexCoord4i(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i = glad_on_demand_impl_glMultiTexCoord4i;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) {
    glad_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4iARB");
    glad_glMultiTexCoord4iARB(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4IARBPROC glad_glMultiTexCoord4iARB = glad_on_demand_impl_glMultiTexCoord4iARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4iv(GLenum target, const GLint * v) {
    glad_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC) glad_gl_on_demand_loader("glMultiTexCoord4iv");
    glad_glMultiTexCoord4iv(target, v);
}
PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv = glad_on_demand_impl_glMultiTexCoord4iv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4ivARB(GLenum target, const GLint * v) {
    glad_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4ivARB");
    glad_glMultiTexCoord4ivARB(target, v);
}
PFNGLMULTITEXCOORD4IVARBPROC glad_glMultiTexCoord4ivARB = glad_on_demand_impl_glMultiTexCoord4ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
    glad_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC) glad_gl_on_demand_loader("glMultiTexCoord4s");
    glad_glMultiTexCoord4s(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s = glad_on_demand_impl_glMultiTexCoord4s;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
    glad_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4sARB");
    glad_glMultiTexCoord4sARB(target, s, t, r, q);
}
PFNGLMULTITEXCOORD4SARBPROC glad_glMultiTexCoord4sARB = glad_on_demand_impl_glMultiTexCoord4sARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4sv(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC) glad_gl_on_demand_loader("glMultiTexCoord4sv");
    glad_glMultiTexCoord4sv(target, v);
}
PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv = glad_on_demand_impl_glMultiTexCoord4sv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoord4svARB(GLenum target, const GLshort * v) {
    glad_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC) glad_gl_on_demand_loader("glMultiTexCoord4svARB");
    glad_glMultiTexCoord4svARB(target, v);
}
PFNGLMULTITEXCOORD4SVARBPROC glad_glMultiTexCoord4svARB = glad_on_demand_impl_glMultiTexCoord4svARB;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC) glad_gl_on_demand_loader("glMultiTexCoordP1ui");
    glad_glMultiTexCoordP1ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui = glad_on_demand_impl_glMultiTexCoordP1ui;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) {
    glad_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC) glad_gl_on_demand_loader("glMultiTexCoordP1uiv");
    glad_glMultiTexCoordP1uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv = glad_on_demand_impl_glMultiTexCoordP1uiv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC) glad_gl_on_demand_loader("glMultiTexCoordP2ui");
    glad_glMultiTexCoordP2ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui = glad_on_demand_impl_glMultiTexCoordP2ui;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) {
    glad_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC) glad_gl_on_demand_loader("glMultiTexCoordP2uiv");
    glad_glMultiTexCoordP2uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv = glad_on_demand_impl_glMultiTexCoordP2uiv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC) glad_gl_on_demand_loader("glMultiTexCoordP3ui");
    glad_glMultiTexCoordP3ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui = glad_on_demand_impl_glMultiTexCoordP3ui;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) {
    glad_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC) glad_gl_on_demand_loader("glMultiTexCoordP3uiv");
    glad_glMultiTexCoordP3uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv = glad_on_demand_impl_glMultiTexCoordP3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
    glad_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC) glad_gl_on_demand_loader("glMultiTexCoordP4ui");
    glad_glMultiTexCoordP4ui(texture, type, coords);
}
PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui = glad_on_demand_impl_glMultiTexCoordP4ui;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) {
    glad_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC) glad_gl_on_demand_loader("glMultiTexCoordP4uiv");
    glad_glMultiTexCoordP4uiv(texture, type, coords);
}
PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv = glad_on_demand_impl_glMultiTexCoordP4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC) glad_gl_on_demand_loader("glMultiTexCoordPointerEXT");
    glad_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
}
PFNGLMULTITEXCOORDPOINTEREXTPROC glad_glMultiTexCoordPointerEXT = glad_on_demand_impl_glMultiTexCoordPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
    glad_glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC) glad_gl_on_demand_loader("glMultiTexEnvfEXT");
    glad_glMultiTexEnvfEXT(texunit, target, pname, param);
}
PFNGLMULTITEXENVFEXTPROC glad_glMultiTexEnvfEXT = glad_on_demand_impl_glMultiTexEnvfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) {
    glad_glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC) glad_gl_on_demand_loader("glMultiTexEnvfvEXT");
    glad_glMultiTexEnvfvEXT(texunit, target, pname, params);
}
PFNGLMULTITEXENVFVEXTPROC glad_glMultiTexEnvfvEXT = glad_on_demand_impl_glMultiTexEnvfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
    glad_glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC) glad_gl_on_demand_loader("glMultiTexEnviEXT");
    glad_glMultiTexEnviEXT(texunit, target, pname, param);
}
PFNGLMULTITEXENVIEXTPROC glad_glMultiTexEnviEXT = glad_on_demand_impl_glMultiTexEnviEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
    glad_glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC) glad_gl_on_demand_loader("glMultiTexEnvivEXT");
    glad_glMultiTexEnvivEXT(texunit, target, pname, params);
}
PFNGLMULTITEXENVIVEXTPROC glad_glMultiTexEnvivEXT = glad_on_demand_impl_glMultiTexEnvivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
    glad_glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC) glad_gl_on_demand_loader("glMultiTexGendEXT");
    glad_glMultiTexGendEXT(texunit, coord, pname, param);
}
PFNGLMULTITEXGENDEXTPROC glad_glMultiTexGendEXT = glad_on_demand_impl_glMultiTexGendEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) {
    glad_glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC) glad_gl_on_demand_loader("glMultiTexGendvEXT");
    glad_glMultiTexGendvEXT(texunit, coord, pname, params);
}
PFNGLMULTITEXGENDVEXTPROC glad_glMultiTexGendvEXT = glad_on_demand_impl_glMultiTexGendvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
    glad_glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC) glad_gl_on_demand_loader("glMultiTexGenfEXT");
    glad_glMultiTexGenfEXT(texunit, coord, pname, param);
}
PFNGLMULTITEXGENFEXTPROC glad_glMultiTexGenfEXT = glad_on_demand_impl_glMultiTexGenfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) {
    glad_glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC) glad_gl_on_demand_loader("glMultiTexGenfvEXT");
    glad_glMultiTexGenfvEXT(texunit, coord, pname, params);
}
PFNGLMULTITEXGENFVEXTPROC glad_glMultiTexGenfvEXT = glad_on_demand_impl_glMultiTexGenfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) {
    glad_glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC) glad_gl_on_demand_loader("glMultiTexGeniEXT");
    glad_glMultiTexGeniEXT(texunit, coord, pname, param);
}
PFNGLMULTITEXGENIEXTPROC glad_glMultiTexGeniEXT = glad_on_demand_impl_glMultiTexGeniEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) {
    glad_glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC) glad_gl_on_demand_loader("glMultiTexGenivEXT");
    glad_glMultiTexGenivEXT(texunit, coord, pname, params);
}
PFNGLMULTITEXGENIVEXTPROC glad_glMultiTexGenivEXT = glad_on_demand_impl_glMultiTexGenivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC) glad_gl_on_demand_loader("glMultiTexImage1DEXT");
    glad_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
}
PFNGLMULTITEXIMAGE1DEXTPROC glad_glMultiTexImage1DEXT = glad_on_demand_impl_glMultiTexImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC) glad_gl_on_demand_loader("glMultiTexImage2DEXT");
    glad_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}
PFNGLMULTITEXIMAGE2DEXTPROC glad_glMultiTexImage2DEXT = glad_on_demand_impl_glMultiTexImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC) glad_gl_on_demand_loader("glMultiTexImage3DEXT");
    glad_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
PFNGLMULTITEXIMAGE3DEXTPROC glad_glMultiTexImage3DEXT = glad_on_demand_impl_glMultiTexImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
    glad_glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC) glad_gl_on_demand_loader("glMultiTexParameterIivEXT");
    glad_glMultiTexParameterIivEXT(texunit, target, pname, params);
}
PFNGLMULTITEXPARAMETERIIVEXTPROC glad_glMultiTexParameterIivEXT = glad_on_demand_impl_glMultiTexParameterIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) {
    glad_glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC) glad_gl_on_demand_loader("glMultiTexParameterIuivEXT");
    glad_glMultiTexParameterIuivEXT(texunit, target, pname, params);
}
PFNGLMULTITEXPARAMETERIUIVEXTPROC glad_glMultiTexParameterIuivEXT = glad_on_demand_impl_glMultiTexParameterIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
    glad_glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC) glad_gl_on_demand_loader("glMultiTexParameterfEXT");
    glad_glMultiTexParameterfEXT(texunit, target, pname, param);
}
PFNGLMULTITEXPARAMETERFEXTPROC glad_glMultiTexParameterfEXT = glad_on_demand_impl_glMultiTexParameterfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) {
    glad_glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glMultiTexParameterfvEXT");
    glad_glMultiTexParameterfvEXT(texunit, target, pname, params);
}
PFNGLMULTITEXPARAMETERFVEXTPROC glad_glMultiTexParameterfvEXT = glad_on_demand_impl_glMultiTexParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
    glad_glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC) glad_gl_on_demand_loader("glMultiTexParameteriEXT");
    glad_glMultiTexParameteriEXT(texunit, target, pname, param);
}
PFNGLMULTITEXPARAMETERIEXTPROC glad_glMultiTexParameteriEXT = glad_on_demand_impl_glMultiTexParameteriEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) {
    glad_glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glMultiTexParameterivEXT");
    glad_glMultiTexParameterivEXT(texunit, target, pname, params);
}
PFNGLMULTITEXPARAMETERIVEXTPROC glad_glMultiTexParameterivEXT = glad_on_demand_impl_glMultiTexParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) {
    glad_glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC) glad_gl_on_demand_loader("glMultiTexRenderbufferEXT");
    glad_glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
}
PFNGLMULTITEXRENDERBUFFEREXTPROC glad_glMultiTexRenderbufferEXT = glad_on_demand_impl_glMultiTexRenderbufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
    glad_glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glMultiTexSubImage1DEXT");
    glad_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
}
PFNGLMULTITEXSUBIMAGE1DEXTPROC glad_glMultiTexSubImage1DEXT = glad_on_demand_impl_glMultiTexSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glMultiTexSubImage2DEXT");
    glad_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLMULTITEXSUBIMAGE2DEXTPROC glad_glMultiTexSubImage2DEXT = glad_on_demand_impl_glMultiTexSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
    glad_glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glMultiTexSubImage3DEXT");
    glad_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
PFNGLMULTITEXSUBIMAGE3DEXTPROC glad_glMultiTexSubImage3DEXT = glad_on_demand_impl_glMultiTexSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) {
    glad_glNamedBufferData = (PFNGLNAMEDBUFFERDATAPROC) glad_gl_on_demand_loader("glNamedBufferData");
    glad_glNamedBufferData(buffer, size, data, usage);
}
PFNGLNAMEDBUFFERDATAPROC glad_glNamedBufferData = glad_on_demand_impl_glNamedBufferData;
static void GLAD_API_PTR glad_on_demand_impl_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) {
    glad_glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC) glad_gl_on_demand_loader("glNamedBufferDataEXT");
    glad_glNamedBufferDataEXT(buffer, size, data, usage);
}
PFNGLNAMEDBUFFERDATAEXTPROC glad_glNamedBufferDataEXT = glad_on_demand_impl_glNamedBufferDataEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) {
    glad_glNamedBufferStorage = (PFNGLNAMEDBUFFERSTORAGEPROC) glad_gl_on_demand_loader("glNamedBufferStorage");
    glad_glNamedBufferStorage(buffer, size, data, flags);
}
PFNGLNAMEDBUFFERSTORAGEPROC glad_glNamedBufferStorage = glad_on_demand_impl_glNamedBufferStorage;
static void GLAD_API_PTR glad_on_demand_impl_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) {
    glad_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC) glad_gl_on_demand_loader("glNamedBufferStorageEXT");
    glad_glNamedBufferStorageEXT(buffer, size, data, flags);
}
PFNGLNAMEDBUFFERSTORAGEEXTPROC glad_glNamedBufferStorageEXT = glad_on_demand_impl_glNamedBufferStorageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
    glad_glNamedBufferSubData = (PFNGLNAMEDBUFFERSUBDATAPROC) glad_gl_on_demand_loader("glNamedBufferSubData");
    glad_glNamedBufferSubData(buffer, offset, size, data);
}
PFNGLNAMEDBUFFERSUBDATAPROC glad_glNamedBufferSubData = glad_on_demand_impl_glNamedBufferSubData;
static void GLAD_API_PTR glad_on_demand_impl_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) {
    glad_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC) glad_gl_on_demand_loader("glNamedBufferSubDataEXT");
    glad_glNamedBufferSubDataEXT(buffer, offset, size, data);
}
PFNGLNAMEDBUFFERSUBDATAEXTPROC glad_glNamedBufferSubDataEXT = glad_on_demand_impl_glNamedBufferSubDataEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    glad_glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) glad_gl_on_demand_loader("glNamedCopyBufferSubDataEXT");
    glad_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glad_glNamedCopyBufferSubDataEXT = glad_on_demand_impl_glNamedCopyBufferSubDataEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) {
    glad_glNamedFramebufferDrawBuffer = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) glad_gl_on_demand_loader("glNamedFramebufferDrawBuffer");
    glad_glNamedFramebufferDrawBuffer(framebuffer, buf);
}
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC glad_glNamedFramebufferDrawBuffer = glad_on_demand_impl_glNamedFramebufferDrawBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) {
    glad_glNamedFramebufferDrawBuffers = (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) glad_gl_on_demand_loader("glNamedFramebufferDrawBuffers");
    glad_glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
}
PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC glad_glNamedFramebufferDrawBuffers = glad_on_demand_impl_glNamedFramebufferDrawBuffers;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) {
    glad_glNamedFramebufferParameteri = (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) glad_gl_on_demand_loader("glNamedFramebufferParameteri");
    glad_glNamedFramebufferParameteri(framebuffer, pname, param);
}
PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC glad_glNamedFramebufferParameteri = glad_on_demand_impl_glNamedFramebufferParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) {
    glad_glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) glad_gl_on_demand_loader("glNamedFramebufferParameteriEXT");
    glad_glNamedFramebufferParameteriEXT(framebuffer, pname, param);
}
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glad_glNamedFramebufferParameteriEXT = glad_on_demand_impl_glNamedFramebufferParameteriEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) {
    glad_glNamedFramebufferReadBuffer = (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) glad_gl_on_demand_loader("glNamedFramebufferReadBuffer");
    glad_glNamedFramebufferReadBuffer(framebuffer, src);
}
PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC glad_glNamedFramebufferReadBuffer = glad_on_demand_impl_glNamedFramebufferReadBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glNamedFramebufferRenderbuffer = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) glad_gl_on_demand_loader("glNamedFramebufferRenderbuffer");
    glad_glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC glad_glNamedFramebufferRenderbuffer = glad_on_demand_impl_glNamedFramebufferRenderbuffer;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
    glad_glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) glad_gl_on_demand_loader("glNamedFramebufferRenderbufferEXT");
    glad_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glad_glNamedFramebufferRenderbufferEXT = glad_on_demand_impl_glNamedFramebufferRenderbufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
    glad_glNamedFramebufferTexture = (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) glad_gl_on_demand_loader("glNamedFramebufferTexture");
    glad_glNamedFramebufferTexture(framebuffer, attachment, texture, level);
}
PFNGLNAMEDFRAMEBUFFERTEXTUREPROC glad_glNamedFramebufferTexture = glad_on_demand_impl_glNamedFramebufferTexture;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) glad_gl_on_demand_loader("glNamedFramebufferTexture1DEXT");
    glad_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
}
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glad_glNamedFramebufferTexture1DEXT = glad_on_demand_impl_glNamedFramebufferTexture1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
    glad_glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) glad_gl_on_demand_loader("glNamedFramebufferTexture2DEXT");
    glad_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
}
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glad_glNamedFramebufferTexture2DEXT = glad_on_demand_impl_glNamedFramebufferTexture2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
    glad_glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) glad_gl_on_demand_loader("glNamedFramebufferTexture3DEXT");
    glad_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
}
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glad_glNamedFramebufferTexture3DEXT = glad_on_demand_impl_glNamedFramebufferTexture3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
    glad_glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) glad_gl_on_demand_loader("glNamedFramebufferTextureEXT");
    glad_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
}
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glad_glNamedFramebufferTextureEXT = glad_on_demand_impl_glNamedFramebufferTextureEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
    glad_glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) glad_gl_on_demand_loader("glNamedFramebufferTextureFaceEXT");
    glad_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
}
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glad_glNamedFramebufferTextureFaceEXT = glad_on_demand_impl_glNamedFramebufferTextureFaceEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glNamedFramebufferTextureLayer = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) glad_gl_on_demand_loader("glNamedFramebufferTextureLayer");
    glad_glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
}
PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC glad_glNamedFramebufferTextureLayer = glad_on_demand_impl_glNamedFramebufferTextureLayer;
static void GLAD_API_PTR glad_on_demand_impl_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
    glad_glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) glad_gl_on_demand_loader("glNamedFramebufferTextureLayerEXT");
    glad_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
}
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glad_glNamedFramebufferTextureLayerEXT = glad_on_demand_impl_glNamedFramebufferTextureLayerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameter4dEXT");
    glad_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
}
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glad_glNamedProgramLocalParameter4dEXT = glad_on_demand_impl_glNamedProgramLocalParameter4dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) {
    glad_glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameter4dvEXT");
    glad_glNamedProgramLocalParameter4dvEXT(program, target, index, params);
}
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glad_glNamedProgramLocalParameter4dvEXT = glad_on_demand_impl_glNamedProgramLocalParameter4dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameter4fEXT");
    glad_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
}
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glad_glNamedProgramLocalParameter4fEXT = glad_on_demand_impl_glNamedProgramLocalParameter4fEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) {
    glad_glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameter4fvEXT");
    glad_glNamedProgramLocalParameter4fvEXT(program, target, index, params);
}
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glad_glNamedProgramLocalParameter4fvEXT = glad_on_demand_impl_glNamedProgramLocalParameter4fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameterI4iEXT");
    glad_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glad_glNamedProgramLocalParameterI4iEXT = glad_on_demand_impl_glNamedProgramLocalParameterI4iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) {
    glad_glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameterI4ivEXT");
    glad_glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glad_glNamedProgramLocalParameterI4ivEXT = glad_on_demand_impl_glNamedProgramLocalParameterI4ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameterI4uiEXT");
    glad_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glad_glNamedProgramLocalParameterI4uiEXT = glad_on_demand_impl_glNamedProgramLocalParameterI4uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) {
    glad_glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameterI4uivEXT");
    glad_glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
}
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glad_glNamedProgramLocalParameterI4uivEXT = glad_on_demand_impl_glNamedProgramLocalParameterI4uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) {
    glad_glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParameters4fvEXT");
    glad_glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
}
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glad_glNamedProgramLocalParameters4fvEXT = glad_on_demand_impl_glNamedProgramLocalParameters4fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) {
    glad_glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParametersI4ivEXT");
    glad_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
}
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glad_glNamedProgramLocalParametersI4ivEXT = glad_on_demand_impl_glNamedProgramLocalParametersI4ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) {
    glad_glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) glad_gl_on_demand_loader("glNamedProgramLocalParametersI4uivEXT");
    glad_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
}
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glad_glNamedProgramLocalParametersI4uivEXT = glad_on_demand_impl_glNamedProgramLocalParametersI4uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) {
    glad_glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC) glad_gl_on_demand_loader("glNamedProgramStringEXT");
    glad_glNamedProgramStringEXT(program, target, format, len, string);
}
PFNGLNAMEDPROGRAMSTRINGEXTPROC glad_glNamedProgramStringEXT = glad_on_demand_impl_glNamedProgramStringEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorage = (PFNGLNAMEDRENDERBUFFERSTORAGEPROC) glad_gl_on_demand_loader("glNamedRenderbufferStorage");
    glad_glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
}
PFNGLNAMEDRENDERBUFFERSTORAGEPROC glad_glNamedRenderbufferStorage = glad_on_demand_impl_glNamedRenderbufferStorage;
static void GLAD_API_PTR glad_on_demand_impl_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) glad_gl_on_demand_loader("glNamedRenderbufferStorageEXT");
    glad_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
}
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glad_glNamedRenderbufferStorageEXT = glad_on_demand_impl_glNamedRenderbufferStorageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageMultisample = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) glad_gl_on_demand_loader("glNamedRenderbufferStorageMultisample");
    glad_glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
}
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glNamedRenderbufferStorageMultisample = glad_on_demand_impl_glNamedRenderbufferStorageMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) glad_gl_on_demand_loader("glNamedRenderbufferStorageMultisampleCoverageEXT");
    glad_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glad_glNamedRenderbufferStorageMultisampleCoverageEXT = glad_on_demand_impl_glNamedRenderbufferStorageMultisampleCoverageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) glad_gl_on_demand_loader("glNamedRenderbufferStorageMultisampleEXT");
    glad_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
}
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glNamedRenderbufferStorageMultisampleEXT = glad_on_demand_impl_glNamedRenderbufferStorageMultisampleEXT;
static void GLAD_API_PTR glad_on_demand_impl_glNewList(GLuint list, GLenum mode) {
    glad_glNewList = (PFNGLNEWLISTPROC) glad_gl_on_demand_loader("glNewList");
    glad_glNewList(list, mode);
}
PFNGLNEWLISTPROC glad_glNewList = glad_on_demand_impl_glNewList;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
    glad_glNormal3b = (PFNGLNORMAL3BPROC) glad_gl_on_demand_loader("glNormal3b");
    glad_glNormal3b(nx, ny, nz);
}
PFNGLNORMAL3BPROC glad_glNormal3b = glad_on_demand_impl_glNormal3b;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3bv(const GLbyte * v) {
    glad_glNormal3bv = (PFNGLNORMAL3BVPROC) glad_gl_on_demand_loader("glNormal3bv");
    glad_glNormal3bv(v);
}
PFNGLNORMAL3BVPROC glad_glNormal3bv = glad_on_demand_impl_glNormal3bv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
    glad_glNormal3d = (PFNGLNORMAL3DPROC) glad_gl_on_demand_loader("glNormal3d");
    glad_glNormal3d(nx, ny, nz);
}
PFNGLNORMAL3DPROC glad_glNormal3d = glad_on_demand_impl_glNormal3d;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3dv(const GLdouble * v) {
    glad_glNormal3dv = (PFNGLNORMAL3DVPROC) glad_gl_on_demand_loader("glNormal3dv");
    glad_glNormal3dv(v);
}
PFNGLNORMAL3DVPROC glad_glNormal3dv = glad_on_demand_impl_glNormal3dv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
    glad_glNormal3f = (PFNGLNORMAL3FPROC) glad_gl_on_demand_loader("glNormal3f");
    glad_glNormal3f(nx, ny, nz);
}
PFNGLNORMAL3FPROC glad_glNormal3f = glad_on_demand_impl_glNormal3f;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3fv(const GLfloat * v) {
    glad_glNormal3fv = (PFNGLNORMAL3FVPROC) glad_gl_on_demand_loader("glNormal3fv");
    glad_glNormal3fv(v);
}
PFNGLNORMAL3FVPROC glad_glNormal3fv = glad_on_demand_impl_glNormal3fv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3i(GLint nx, GLint ny, GLint nz) {
    glad_glNormal3i = (PFNGLNORMAL3IPROC) glad_gl_on_demand_loader("glNormal3i");
    glad_glNormal3i(nx, ny, nz);
}
PFNGLNORMAL3IPROC glad_glNormal3i = glad_on_demand_impl_glNormal3i;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3iv(const GLint * v) {
    glad_glNormal3iv = (PFNGLNORMAL3IVPROC) glad_gl_on_demand_loader("glNormal3iv");
    glad_glNormal3iv(v);
}
PFNGLNORMAL3IVPROC glad_glNormal3iv = glad_on_demand_impl_glNormal3iv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
    glad_glNormal3s = (PFNGLNORMAL3SPROC) glad_gl_on_demand_loader("glNormal3s");
    glad_glNormal3s(nx, ny, nz);
}
PFNGLNORMAL3SPROC glad_glNormal3s = glad_on_demand_impl_glNormal3s;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3sv(const GLshort * v) {
    glad_glNormal3sv = (PFNGLNORMAL3SVPROC) glad_gl_on_demand_loader("glNormal3sv");
    glad_glNormal3sv(v);
}
PFNGLNORMAL3SVPROC glad_glNormal3sv = glad_on_demand_impl_glNormal3sv;
static void GLAD_API_PTR glad_on_demand_impl_glNormalP3ui(GLenum type, GLuint coords) {
    glad_glNormalP3ui = (PFNGLNORMALP3UIPROC) glad_gl_on_demand_loader("glNormalP3ui");
    glad_glNormalP3ui(type, coords);
}
PFNGLNORMALP3UIPROC glad_glNormalP3ui = glad_on_demand_impl_glNormalP3ui;
static void GLAD_API_PTR glad_on_demand_impl_glNormalP3uiv(GLenum type, const GLuint * coords) {
    glad_glNormalP3uiv = (PFNGLNORMALP3UIVPROC) glad_gl_on_demand_loader("glNormalP3uiv");
    glad_glNormalP3uiv(type, coords);
}
PFNGLNORMALP3UIVPROC glad_glNormalP3uiv = glad_on_demand_impl_glNormalP3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glNormalPointer(GLenum type, GLsizei stride, const void * pointer) {
    glad_glNormalPointer = (PFNGLNORMALPOINTERPROC) glad_gl_on_demand_loader("glNormalPointer");
    glad_glNormalPointer(type, stride, pointer);
}
PFNGLNORMALPOINTERPROC glad_glNormalPointer = glad_on_demand_impl_glNormalPointer;
static void GLAD_API_PTR glad_on_demand_impl_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
    glad_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC) glad_gl_on_demand_loader("glNormalPointerEXT");
    glad_glNormalPointerEXT(type, stride, count, pointer);
}
PFNGLNORMALPOINTEREXTPROC glad_glNormalPointerEXT = glad_on_demand_impl_glNormalPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) {
    glad_glObjectLabel = (PFNGLOBJECTLABELPROC) glad_gl_on_demand_loader("glObjectLabel");
    glad_glObjectLabel(identifier, name, length, label);
}
PFNGLOBJECTLABELPROC glad_glObjectLabel = glad_on_demand_impl_glObjectLabel;
static void GLAD_API_PTR glad_on_demand_impl_glObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) {
    glad_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC) glad_gl_on_demand_loader("glObjectPtrLabel");
    glad_glObjectPtrLabel(ptr, length, label);
}
PFNGLOBJECTPTRLABELPROC glad_glObjectPtrLabel = glad_on_demand_impl_glObjectPtrLabel;
static void GLAD_API_PTR glad_on_demand_impl_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glOrtho = (PFNGLORTHOPROC) glad_gl_on_demand_loader("glOrtho");
    glad_glOrtho(left, right, bottom, top, zNear, zFar);
}
PFNGLORTHOPROC glad_glOrtho = glad_on_demand_impl_glOrtho;
static void GLAD_API_PTR glad_on_demand_impl_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
    glad_glOrthofOES = (PFNGLORTHOFOESPROC) glad_gl_on_demand_loader("glOrthofOES");
    glad_glOrthofOES(l, r, b, t, n, f);
}
PFNGLORTHOFOESPROC glad_glOrthofOES = glad_on_demand_impl_glOrthofOES;
static void GLAD_API_PTR glad_on_demand_impl_glPassThrough(GLfloat token) {
    glad_glPassThrough = (PFNGLPASSTHROUGHPROC) glad_gl_on_demand_loader("glPassThrough");
    glad_glPassThrough(token);
}
PFNGLPASSTHROUGHPROC glad_glPassThrough = glad_on_demand_impl_glPassThrough;
static void GLAD_API_PTR glad_on_demand_impl_glPatchParameterfv(GLenum pname, const GLfloat * values) {
    glad_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC) glad_gl_on_demand_loader("glPatchParameterfv");
    glad_glPatchParameterfv(pname, values);
}
PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv = glad_on_demand_impl_glPatchParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glPatchParameteri(GLenum pname, GLint value) {
    glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC) glad_gl_on_demand_loader("glPatchParameteri");
    glad_glPatchParameteri(pname, value);
}
PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri = glad_on_demand_impl_glPatchParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glPauseTransformFeedback(void) {
    glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC) glad_gl_on_demand_loader("glPauseTransformFeedback");
    glad_glPauseTransformFeedback();
}
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback = glad_on_demand_impl_glPauseTransformFeedback;
static void GLAD_API_PTR glad_on_demand_impl_glPauseTransformFeedbackNV(void) {
    glad_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC) glad_gl_on_demand_loader("glPauseTransformFeedbackNV");
    glad_glPauseTransformFeedbackNV();
}
PFNGLPAUSETRANSFORMFEEDBACKNVPROC glad_glPauseTransformFeedbackNV = glad_on_demand_impl_glPauseTransformFeedbackNV;
static void GLAD_API_PTR glad_on_demand_impl_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) {
    glad_glPixelMapfv = (PFNGLPIXELMAPFVPROC) glad_gl_on_demand_loader("glPixelMapfv");
    glad_glPixelMapfv(map, mapsize, values);
}
PFNGLPIXELMAPFVPROC glad_glPixelMapfv = glad_on_demand_impl_glPixelMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) {
    glad_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC) glad_gl_on_demand_loader("glPixelMapuiv");
    glad_glPixelMapuiv(map, mapsize, values);
}
PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv = glad_on_demand_impl_glPixelMapuiv;
static void GLAD_API_PTR glad_on_demand_impl_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) {
    glad_glPixelMapusv = (PFNGLPIXELMAPUSVPROC) glad_gl_on_demand_loader("glPixelMapusv");
    glad_glPixelMapusv(map, mapsize, values);
}
PFNGLPIXELMAPUSVPROC glad_glPixelMapusv = glad_on_demand_impl_glPixelMapusv;
static void GLAD_API_PTR glad_on_demand_impl_glPixelStoref(GLenum pname, GLfloat param) {
    glad_glPixelStoref = (PFNGLPIXELSTOREFPROC) glad_gl_on_demand_loader("glPixelStoref");
    glad_glPixelStoref(pname, param);
}
PFNGLPIXELSTOREFPROC glad_glPixelStoref = glad_on_demand_impl_glPixelStoref;
static void GLAD_API_PTR glad_on_demand_impl_glPixelStorei(GLenum pname, GLint param) {
    glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) glad_gl_on_demand_loader("glPixelStorei");
    glad_glPixelStorei(pname, param);
}
PFNGLPIXELSTOREIPROC glad_glPixelStorei = glad_on_demand_impl_glPixelStorei;
static void GLAD_API_PTR glad_on_demand_impl_glPixelTransferf(GLenum pname, GLfloat param) {
    glad_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC) glad_gl_on_demand_loader("glPixelTransferf");
    glad_glPixelTransferf(pname, param);
}
PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf = glad_on_demand_impl_glPixelTransferf;
static void GLAD_API_PTR glad_on_demand_impl_glPixelTransferi(GLenum pname, GLint param) {
    glad_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC) glad_gl_on_demand_loader("glPixelTransferi");
    glad_glPixelTransferi(pname, param);
}
PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi = glad_on_demand_impl_glPixelTransferi;
static void GLAD_API_PTR glad_on_demand_impl_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
    glad_glPixelZoom = (PFNGLPIXELZOOMPROC) glad_gl_on_demand_loader("glPixelZoom");
    glad_glPixelZoom(xfactor, yfactor);
}
PFNGLPIXELZOOMPROC glad_glPixelZoom = glad_on_demand_impl_glPixelZoom;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterf(GLenum pname, GLfloat param) {
    glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC) glad_gl_on_demand_loader("glPointParameterf");
    glad_glPointParameterf(pname, param);
}
PFNGLPOINTPARAMETERFPROC glad_glPointParameterf = glad_on_demand_impl_glPointParameterf;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterfARB(GLenum pname, GLfloat param) {
    glad_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC) glad_gl_on_demand_loader("glPointParameterfARB");
    glad_glPointParameterfARB(pname, param);
}
PFNGLPOINTPARAMETERFARBPROC glad_glPointParameterfARB = glad_on_demand_impl_glPointParameterfARB;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterfEXT(GLenum pname, GLfloat param) {
    glad_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC) glad_gl_on_demand_loader("glPointParameterfEXT");
    glad_glPointParameterfEXT(pname, param);
}
PFNGLPOINTPARAMETERFEXTPROC glad_glPointParameterfEXT = glad_on_demand_impl_glPointParameterfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterfSGIS(GLenum pname, GLfloat param) {
    glad_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC) glad_gl_on_demand_loader("glPointParameterfSGIS");
    glad_glPointParameterfSGIS(pname, param);
}
PFNGLPOINTPARAMETERFSGISPROC glad_glPointParameterfSGIS = glad_on_demand_impl_glPointParameterfSGIS;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterfv(GLenum pname, const GLfloat * params) {
    glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC) glad_gl_on_demand_loader("glPointParameterfv");
    glad_glPointParameterfv(pname, params);
}
PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv = glad_on_demand_impl_glPointParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterfvARB(GLenum pname, const GLfloat * params) {
    glad_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC) glad_gl_on_demand_loader("glPointParameterfvARB");
    glad_glPointParameterfvARB(pname, params);
}
PFNGLPOINTPARAMETERFVARBPROC glad_glPointParameterfvARB = glad_on_demand_impl_glPointParameterfvARB;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterfvEXT(GLenum pname, const GLfloat * params) {
    glad_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glPointParameterfvEXT");
    glad_glPointParameterfvEXT(pname, params);
}
PFNGLPOINTPARAMETERFVEXTPROC glad_glPointParameterfvEXT = glad_on_demand_impl_glPointParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterfvSGIS(GLenum pname, const GLfloat * params) {
    glad_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC) glad_gl_on_demand_loader("glPointParameterfvSGIS");
    glad_glPointParameterfvSGIS(pname, params);
}
PFNGLPOINTPARAMETERFVSGISPROC glad_glPointParameterfvSGIS = glad_on_demand_impl_glPointParameterfvSGIS;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameteri(GLenum pname, GLint param) {
    glad_glPointParameteri = (PFNGLPOINTPARAMETERIPROC) glad_gl_on_demand_loader("glPointParameteri");
    glad_glPointParameteri(pname, param);
}
PFNGLPOINTPARAMETERIPROC glad_glPointParameteri = glad_on_demand_impl_glPointParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameteriNV(GLenum pname, GLint param) {
    glad_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC) glad_gl_on_demand_loader("glPointParameteriNV");
    glad_glPointParameteriNV(pname, param);
}
PFNGLPOINTPARAMETERINVPROC glad_glPointParameteriNV = glad_on_demand_impl_glPointParameteriNV;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameteriv(GLenum pname, const GLint * params) {
    glad_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC) glad_gl_on_demand_loader("glPointParameteriv");
    glad_glPointParameteriv(pname, params);
}
PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv = glad_on_demand_impl_glPointParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glPointParameterivNV(GLenum pname, const GLint * params) {
    glad_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC) glad_gl_on_demand_loader("glPointParameterivNV");
    glad_glPointParameterivNV(pname, params);
}
PFNGLPOINTPARAMETERIVNVPROC glad_glPointParameterivNV = glad_on_demand_impl_glPointParameterivNV;
static void GLAD_API_PTR glad_on_demand_impl_glPointSize(GLfloat size) {
    glad_glPointSize = (PFNGLPOINTSIZEPROC) glad_gl_on_demand_loader("glPointSize");
    glad_glPointSize(size);
}
PFNGLPOINTSIZEPROC glad_glPointSize = glad_on_demand_impl_glPointSize;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonMode(GLenum face, GLenum mode) {
    glad_glPolygonMode = (PFNGLPOLYGONMODEPROC) glad_gl_on_demand_loader("glPolygonMode");
    glad_glPolygonMode(face, mode);
}
PFNGLPOLYGONMODEPROC glad_glPolygonMode = glad_on_demand_impl_glPolygonMode;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonOffset(GLfloat factor, GLfloat units) {
    glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) glad_gl_on_demand_loader("glPolygonOffset");
    glad_glPolygonOffset(factor, units);
}
PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset = glad_on_demand_impl_glPolygonOffset;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) {
    glad_glPolygonOffsetClamp = (PFNGLPOLYGONOFFSETCLAMPPROC) glad_gl_on_demand_loader("glPolygonOffsetClamp");
    glad_glPolygonOffsetClamp(factor, units, clamp);
}
PFNGLPOLYGONOFFSETCLAMPPROC glad_glPolygonOffsetClamp = glad_on_demand_impl_glPolygonOffsetClamp;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) {
    glad_glPolygonOffsetClampEXT = (PFNGLPOLYGONOFFSETCLAMPEXTPROC) glad_gl_on_demand_loader("glPolygonOffsetClampEXT");
    glad_glPolygonOffsetClampEXT(factor, units, clamp);
}
PFNGLPOLYGONOFFSETCLAMPEXTPROC glad_glPolygonOffsetClampEXT = glad_on_demand_impl_glPolygonOffsetClampEXT;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonStipple(const GLubyte * mask) {
    glad_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC) glad_gl_on_demand_loader("glPolygonStipple");
    glad_glPolygonStipple(mask);
}
PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple = glad_on_demand_impl_glPolygonStipple;
static void GLAD_API_PTR glad_on_demand_impl_glPopAttrib(void) {
    glad_glPopAttrib = (PFNGLPOPATTRIBPROC) glad_gl_on_demand_loader("glPopAttrib");
    glad_glPopAttrib();
}
PFNGLPOPATTRIBPROC glad_glPopAttrib = glad_on_demand_impl_glPopAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPopClientAttrib(void) {
    glad_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC) glad_gl_on_demand_loader("glPopClientAttrib");
    glad_glPopClientAttrib();
}
PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib = glad_on_demand_impl_glPopClientAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPopDebugGroup(void) {
    glad_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC) glad_gl_on_demand_loader("glPopDebugGroup");
    glad_glPopDebugGroup();
}
PFNGLPOPDEBUGGROUPPROC glad_glPopDebugGroup = glad_on_demand_impl_glPopDebugGroup;
static void GLAD_API_PTR glad_on_demand_impl_glPopMatrix(void) {
    glad_glPopMatrix = (PFNGLPOPMATRIXPROC) glad_gl_on_demand_loader("glPopMatrix");
    glad_glPopMatrix();
}
PFNGLPOPMATRIXPROC glad_glPopMatrix = glad_on_demand_impl_glPopMatrix;
static void GLAD_API_PTR glad_on_demand_impl_glPopName(void) {
    glad_glPopName = (PFNGLPOPNAMEPROC) glad_gl_on_demand_loader("glPopName");
    glad_glPopName();
}
PFNGLPOPNAMEPROC glad_glPopName = glad_on_demand_impl_glPopName;
static void GLAD_API_PTR glad_on_demand_impl_glPrimitiveRestartIndex(GLuint index) {
    glad_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC) glad_gl_on_demand_loader("glPrimitiveRestartIndex");
    glad_glPrimitiveRestartIndex(index);
}
PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex = glad_on_demand_impl_glPrimitiveRestartIndex;
static void GLAD_API_PTR glad_on_demand_impl_glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) {
    glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC) glad_gl_on_demand_loader("glPrioritizeTextures");
    glad_glPrioritizeTextures(n, textures, priorities);
}
PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures = glad_on_demand_impl_glPrioritizeTextures;
static void GLAD_API_PTR glad_on_demand_impl_glPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) {
    glad_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC) glad_gl_on_demand_loader("glPrioritizeTexturesEXT");
    glad_glPrioritizeTexturesEXT(n, textures, priorities);
}
PFNGLPRIORITIZETEXTURESEXTPROC glad_glPrioritizeTexturesEXT = glad_on_demand_impl_glPrioritizeTexturesEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) {
    glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC) glad_gl_on_demand_loader("glProgramBinary");
    glad_glProgramBinary(program, binaryFormat, binary, length);
}
PFNGLPROGRAMBINARYPROC glad_glProgramBinary = glad_on_demand_impl_glProgramBinary;
static void GLAD_API_PTR glad_on_demand_impl_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC) glad_gl_on_demand_loader("glProgramEnvParameter4dARB");
    glad_glProgramEnvParameter4dARB(target, index, x, y, z, w);
}
PFNGLPROGRAMENVPARAMETER4DARBPROC glad_glProgramEnvParameter4dARB = glad_on_demand_impl_glProgramEnvParameter4dARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) {
    glad_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC) glad_gl_on_demand_loader("glProgramEnvParameter4dvARB");
    glad_glProgramEnvParameter4dvARB(target, index, params);
}
PFNGLPROGRAMENVPARAMETER4DVARBPROC glad_glProgramEnvParameter4dvARB = glad_on_demand_impl_glProgramEnvParameter4dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC) glad_gl_on_demand_loader("glProgramEnvParameter4fARB");
    glad_glProgramEnvParameter4fARB(target, index, x, y, z, w);
}
PFNGLPROGRAMENVPARAMETER4FARBPROC glad_glProgramEnvParameter4fARB = glad_on_demand_impl_glProgramEnvParameter4fARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) {
    glad_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC) glad_gl_on_demand_loader("glProgramEnvParameter4fvARB");
    glad_glProgramEnvParameter4fvARB(target, index, params);
}
PFNGLPROGRAMENVPARAMETER4FVARBPROC glad_glProgramEnvParameter4fvARB = glad_on_demand_impl_glProgramEnvParameter4fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC) glad_gl_on_demand_loader("glProgramLocalParameter4dARB");
    glad_glProgramLocalParameter4dARB(target, index, x, y, z, w);
}
PFNGLPROGRAMLOCALPARAMETER4DARBPROC glad_glProgramLocalParameter4dARB = glad_on_demand_impl_glProgramLocalParameter4dARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) {
    glad_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) glad_gl_on_demand_loader("glProgramLocalParameter4dvARB");
    glad_glProgramLocalParameter4dvARB(target, index, params);
}
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glad_glProgramLocalParameter4dvARB = glad_on_demand_impl_glProgramLocalParameter4dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC) glad_gl_on_demand_loader("glProgramLocalParameter4fARB");
    glad_glProgramLocalParameter4fARB(target, index, x, y, z, w);
}
PFNGLPROGRAMLOCALPARAMETER4FARBPROC glad_glProgramLocalParameter4fARB = glad_on_demand_impl_glProgramLocalParameter4fARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) {
    glad_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) glad_gl_on_demand_loader("glProgramLocalParameter4fvARB");
    glad_glProgramLocalParameter4fvARB(target, index, params);
}
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glad_glProgramLocalParameter4fvARB = glad_on_demand_impl_glProgramLocalParameter4fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC) glad_gl_on_demand_loader("glProgramParameter4dNV");
    glad_glProgramParameter4dNV(target, index, x, y, z, w);
}
PFNGLPROGRAMPARAMETER4DNVPROC glad_glProgramParameter4dNV = glad_on_demand_impl_glProgramParameter4dNV;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) {
    glad_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC) glad_gl_on_demand_loader("glProgramParameter4dvNV");
    glad_glProgramParameter4dvNV(target, index, v);
}
PFNGLPROGRAMPARAMETER4DVNVPROC glad_glProgramParameter4dvNV = glad_on_demand_impl_glProgramParameter4dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC) glad_gl_on_demand_loader("glProgramParameter4fNV");
    glad_glProgramParameter4fNV(target, index, x, y, z, w);
}
PFNGLPROGRAMPARAMETER4FNVPROC glad_glProgramParameter4fNV = glad_on_demand_impl_glProgramParameter4fNV;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) {
    glad_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC) glad_gl_on_demand_loader("glProgramParameter4fvNV");
    glad_glProgramParameter4fvNV(target, index, v);
}
PFNGLPROGRAMPARAMETER4FVNVPROC glad_glProgramParameter4fvNV = glad_on_demand_impl_glProgramParameter4fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameteri(GLuint program, GLenum pname, GLint value) {
    glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC) glad_gl_on_demand_loader("glProgramParameteri");
    glad_glProgramParameteri(program, pname, value);
}
PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri = glad_on_demand_impl_glProgramParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameteriARB(GLuint program, GLenum pname, GLint value) {
    glad_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC) glad_gl_on_demand_loader("glProgramParameteriARB");
    glad_glProgramParameteriARB(program, pname, value);
}
PFNGLPROGRAMPARAMETERIARBPROC glad_glProgramParameteriARB = glad_on_demand_impl_glProgramParameteriARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) {
    glad_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC) glad_gl_on_demand_loader("glProgramParameteriEXT");
    glad_glProgramParameteriEXT(program, pname, value);
}
PFNGLPROGRAMPARAMETERIEXTPROC glad_glProgramParameteriEXT = glad_on_demand_impl_glProgramParameteriEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) {
    glad_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC) glad_gl_on_demand_loader("glProgramParameters4dvNV");
    glad_glProgramParameters4dvNV(target, index, count, v);
}
PFNGLPROGRAMPARAMETERS4DVNVPROC glad_glProgramParameters4dvNV = glad_on_demand_impl_glProgramParameters4dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) {
    glad_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC) glad_gl_on_demand_loader("glProgramParameters4fvNV");
    glad_glProgramParameters4fvNV(target, index, count, v);
}
PFNGLPROGRAMPARAMETERS4FVNVPROC glad_glProgramParameters4fvNV = glad_on_demand_impl_glProgramParameters4fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) {
    glad_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC) glad_gl_on_demand_loader("glProgramStringARB");
    glad_glProgramStringARB(target, format, len, string);
}
PFNGLPROGRAMSTRINGARBPROC glad_glProgramStringARB = glad_on_demand_impl_glProgramStringARB;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1d(GLuint program, GLint location, GLdouble v0) {
    glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC) glad_gl_on_demand_loader("glProgramUniform1d");
    glad_glProgramUniform1d(program, location, v0);
}
PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d = glad_on_demand_impl_glProgramUniform1d;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) {
    glad_glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC) glad_gl_on_demand_loader("glProgramUniform1dEXT");
    glad_glProgramUniform1dEXT(program, location, x);
}
PFNGLPROGRAMUNIFORM1DEXTPROC glad_glProgramUniform1dEXT = glad_on_demand_impl_glProgramUniform1dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC) glad_gl_on_demand_loader("glProgramUniform1dv");
    glad_glProgramUniform1dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv = glad_on_demand_impl_glProgramUniform1dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC) glad_gl_on_demand_loader("glProgramUniform1dvEXT");
    glad_glProgramUniform1dvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1DVEXTPROC glad_glProgramUniform1dvEXT = glad_on_demand_impl_glProgramUniform1dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1f(GLuint program, GLint location, GLfloat v0) {
    glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC) glad_gl_on_demand_loader("glProgramUniform1f");
    glad_glProgramUniform1f(program, location, v0);
}
PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f = glad_on_demand_impl_glProgramUniform1f;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
    glad_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC) glad_gl_on_demand_loader("glProgramUniform1fEXT");
    glad_glProgramUniform1fEXT(program, location, v0);
}
PFNGLPROGRAMUNIFORM1FEXTPROC glad_glProgramUniform1fEXT = glad_on_demand_impl_glProgramUniform1fEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC) glad_gl_on_demand_loader("glProgramUniform1fv");
    glad_glProgramUniform1fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv = glad_on_demand_impl_glProgramUniform1fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC) glad_gl_on_demand_loader("glProgramUniform1fvEXT");
    glad_glProgramUniform1fvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1FVEXTPROC glad_glProgramUniform1fvEXT = glad_on_demand_impl_glProgramUniform1fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1i(GLuint program, GLint location, GLint v0) {
    glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC) glad_gl_on_demand_loader("glProgramUniform1i");
    glad_glProgramUniform1i(program, location, v0);
}
PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i = glad_on_demand_impl_glProgramUniform1i;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
    glad_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC) glad_gl_on_demand_loader("glProgramUniform1iEXT");
    glad_glProgramUniform1iEXT(program, location, v0);
}
PFNGLPROGRAMUNIFORM1IEXTPROC glad_glProgramUniform1iEXT = glad_on_demand_impl_glProgramUniform1iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC) glad_gl_on_demand_loader("glProgramUniform1iv");
    glad_glProgramUniform1iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv = glad_on_demand_impl_glProgramUniform1iv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC) glad_gl_on_demand_loader("glProgramUniform1ivEXT");
    glad_glProgramUniform1ivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1IVEXTPROC glad_glProgramUniform1ivEXT = glad_on_demand_impl_glProgramUniform1ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
    glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC) glad_gl_on_demand_loader("glProgramUniform1ui");
    glad_glProgramUniform1ui(program, location, v0);
}
PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui = glad_on_demand_impl_glProgramUniform1ui;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
    glad_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC) glad_gl_on_demand_loader("glProgramUniform1uiEXT");
    glad_glProgramUniform1uiEXT(program, location, v0);
}
PFNGLPROGRAMUNIFORM1UIEXTPROC glad_glProgramUniform1uiEXT = glad_on_demand_impl_glProgramUniform1uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC) glad_gl_on_demand_loader("glProgramUniform1uiv");
    glad_glProgramUniform1uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv = glad_on_demand_impl_glProgramUniform1uiv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC) glad_gl_on_demand_loader("glProgramUniform1uivEXT");
    glad_glProgramUniform1uivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM1UIVEXTPROC glad_glProgramUniform1uivEXT = glad_on_demand_impl_glProgramUniform1uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) {
    glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC) glad_gl_on_demand_loader("glProgramUniform2d");
    glad_glProgramUniform2d(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d = glad_on_demand_impl_glProgramUniform2d;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) {
    glad_glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC) glad_gl_on_demand_loader("glProgramUniform2dEXT");
    glad_glProgramUniform2dEXT(program, location, x, y);
}
PFNGLPROGRAMUNIFORM2DEXTPROC glad_glProgramUniform2dEXT = glad_on_demand_impl_glProgramUniform2dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC) glad_gl_on_demand_loader("glProgramUniform2dv");
    glad_glProgramUniform2dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv = glad_on_demand_impl_glProgramUniform2dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC) glad_gl_on_demand_loader("glProgramUniform2dvEXT");
    glad_glProgramUniform2dvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2DVEXTPROC glad_glProgramUniform2dvEXT = glad_on_demand_impl_glProgramUniform2dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
    glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC) glad_gl_on_demand_loader("glProgramUniform2f");
    glad_glProgramUniform2f(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f = glad_on_demand_impl_glProgramUniform2f;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
    glad_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC) glad_gl_on_demand_loader("glProgramUniform2fEXT");
    glad_glProgramUniform2fEXT(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2FEXTPROC glad_glProgramUniform2fEXT = glad_on_demand_impl_glProgramUniform2fEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC) glad_gl_on_demand_loader("glProgramUniform2fv");
    glad_glProgramUniform2fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv = glad_on_demand_impl_glProgramUniform2fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC) glad_gl_on_demand_loader("glProgramUniform2fvEXT");
    glad_glProgramUniform2fvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2FVEXTPROC glad_glProgramUniform2fvEXT = glad_on_demand_impl_glProgramUniform2fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) {
    glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC) glad_gl_on_demand_loader("glProgramUniform2i");
    glad_glProgramUniform2i(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i = glad_on_demand_impl_glProgramUniform2i;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
    glad_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC) glad_gl_on_demand_loader("glProgramUniform2iEXT");
    glad_glProgramUniform2iEXT(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2IEXTPROC glad_glProgramUniform2iEXT = glad_on_demand_impl_glProgramUniform2iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC) glad_gl_on_demand_loader("glProgramUniform2iv");
    glad_glProgramUniform2iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv = glad_on_demand_impl_glProgramUniform2iv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC) glad_gl_on_demand_loader("glProgramUniform2ivEXT");
    glad_glProgramUniform2ivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2IVEXTPROC glad_glProgramUniform2ivEXT = glad_on_demand_impl_glProgramUniform2ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) {
    glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC) glad_gl_on_demand_loader("glProgramUniform2ui");
    glad_glProgramUniform2ui(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui = glad_on_demand_impl_glProgramUniform2ui;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
    glad_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC) glad_gl_on_demand_loader("glProgramUniform2uiEXT");
    glad_glProgramUniform2uiEXT(program, location, v0, v1);
}
PFNGLPROGRAMUNIFORM2UIEXTPROC glad_glProgramUniform2uiEXT = glad_on_demand_impl_glProgramUniform2uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC) glad_gl_on_demand_loader("glProgramUniform2uiv");
    glad_glProgramUniform2uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv = glad_on_demand_impl_glProgramUniform2uiv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC) glad_gl_on_demand_loader("glProgramUniform2uivEXT");
    glad_glProgramUniform2uivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM2UIVEXTPROC glad_glProgramUniform2uivEXT = glad_on_demand_impl_glProgramUniform2uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) {
    glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC) glad_gl_on_demand_loader("glProgramUniform3d");
    glad_glProgramUniform3d(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d = glad_on_demand_impl_glProgramUniform3d;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
    glad_glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC) glad_gl_on_demand_loader("glProgramUniform3dEXT");
    glad_glProgramUniform3dEXT(program, location, x, y, z);
}
PFNGLPROGRAMUNIFORM3DEXTPROC glad_glProgramUniform3dEXT = glad_on_demand_impl_glProgramUniform3dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC) glad_gl_on_demand_loader("glProgramUniform3dv");
    glad_glProgramUniform3dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv = glad_on_demand_impl_glProgramUniform3dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC) glad_gl_on_demand_loader("glProgramUniform3dvEXT");
    glad_glProgramUniform3dvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3DVEXTPROC glad_glProgramUniform3dvEXT = glad_on_demand_impl_glProgramUniform3dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC) glad_gl_on_demand_loader("glProgramUniform3f");
    glad_glProgramUniform3f(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f = glad_on_demand_impl_glProgramUniform3f;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC) glad_gl_on_demand_loader("glProgramUniform3fEXT");
    glad_glProgramUniform3fEXT(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3FEXTPROC glad_glProgramUniform3fEXT = glad_on_demand_impl_glProgramUniform3fEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC) glad_gl_on_demand_loader("glProgramUniform3fv");
    glad_glProgramUniform3fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv = glad_on_demand_impl_glProgramUniform3fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC) glad_gl_on_demand_loader("glProgramUniform3fvEXT");
    glad_glProgramUniform3fvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3FVEXTPROC glad_glProgramUniform3fvEXT = glad_on_demand_impl_glProgramUniform3fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC) glad_gl_on_demand_loader("glProgramUniform3i");
    glad_glProgramUniform3i(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i = glad_on_demand_impl_glProgramUniform3i;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC) glad_gl_on_demand_loader("glProgramUniform3iEXT");
    glad_glProgramUniform3iEXT(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3IEXTPROC glad_glProgramUniform3iEXT = glad_on_demand_impl_glProgramUniform3iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC) glad_gl_on_demand_loader("glProgramUniform3iv");
    glad_glProgramUniform3iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv = glad_on_demand_impl_glProgramUniform3iv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC) glad_gl_on_demand_loader("glProgramUniform3ivEXT");
    glad_glProgramUniform3ivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3IVEXTPROC glad_glProgramUniform3ivEXT = glad_on_demand_impl_glProgramUniform3ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC) glad_gl_on_demand_loader("glProgramUniform3ui");
    glad_glProgramUniform3ui(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui = glad_on_demand_impl_glProgramUniform3ui;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC) glad_gl_on_demand_loader("glProgramUniform3uiEXT");
    glad_glProgramUniform3uiEXT(program, location, v0, v1, v2);
}
PFNGLPROGRAMUNIFORM3UIEXTPROC glad_glProgramUniform3uiEXT = glad_on_demand_impl_glProgramUniform3uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC) glad_gl_on_demand_loader("glProgramUniform3uiv");
    glad_glProgramUniform3uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv = glad_on_demand_impl_glProgramUniform3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC) glad_gl_on_demand_loader("glProgramUniform3uivEXT");
    glad_glProgramUniform3uivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM3UIVEXTPROC glad_glProgramUniform3uivEXT = glad_on_demand_impl_glProgramUniform3uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) {
    glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC) glad_gl_on_demand_loader("glProgramUniform4d");
    glad_glProgramUniform4d(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d = glad_on_demand_impl_glProgramUniform4d;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC) glad_gl_on_demand_loader("glProgramUniform4dEXT");
    glad_glProgramUniform4dEXT(program, location, x, y, z, w);
}
PFNGLPROGRAMUNIFORM4DEXTPROC glad_glProgramUniform4dEXT = glad_on_demand_impl_glProgramUniform4dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC) glad_gl_on_demand_loader("glProgramUniform4dv");
    glad_glProgramUniform4dv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv = glad_on_demand_impl_glProgramUniform4dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) {
    glad_glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC) glad_gl_on_demand_loader("glProgramUniform4dvEXT");
    glad_glProgramUniform4dvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4DVEXTPROC glad_glProgramUniform4dvEXT = glad_on_demand_impl_glProgramUniform4dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC) glad_gl_on_demand_loader("glProgramUniform4f");
    glad_glProgramUniform4f(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f = glad_on_demand_impl_glProgramUniform4f;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC) glad_gl_on_demand_loader("glProgramUniform4fEXT");
    glad_glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4FEXTPROC glad_glProgramUniform4fEXT = glad_on_demand_impl_glProgramUniform4fEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC) glad_gl_on_demand_loader("glProgramUniform4fv");
    glad_glProgramUniform4fv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv = glad_on_demand_impl_glProgramUniform4fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
    glad_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC) glad_gl_on_demand_loader("glProgramUniform4fvEXT");
    glad_glProgramUniform4fvEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4FVEXTPROC glad_glProgramUniform4fvEXT = glad_on_demand_impl_glProgramUniform4fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC) glad_gl_on_demand_loader("glProgramUniform4i");
    glad_glProgramUniform4i(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i = glad_on_demand_impl_glProgramUniform4i;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC) glad_gl_on_demand_loader("glProgramUniform4iEXT");
    glad_glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4IEXTPROC glad_glProgramUniform4iEXT = glad_on_demand_impl_glProgramUniform4iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC) glad_gl_on_demand_loader("glProgramUniform4iv");
    glad_glProgramUniform4iv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv = glad_on_demand_impl_glProgramUniform4iv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) {
    glad_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC) glad_gl_on_demand_loader("glProgramUniform4ivEXT");
    glad_glProgramUniform4ivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4IVEXTPROC glad_glProgramUniform4ivEXT = glad_on_demand_impl_glProgramUniform4ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC) glad_gl_on_demand_loader("glProgramUniform4ui");
    glad_glProgramUniform4ui(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui = glad_on_demand_impl_glProgramUniform4ui;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC) glad_gl_on_demand_loader("glProgramUniform4uiEXT");
    glad_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
}
PFNGLPROGRAMUNIFORM4UIEXTPROC glad_glProgramUniform4uiEXT = glad_on_demand_impl_glProgramUniform4uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC) glad_gl_on_demand_loader("glProgramUniform4uiv");
    glad_glProgramUniform4uiv(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv = glad_on_demand_impl_glProgramUniform4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) {
    glad_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC) glad_gl_on_demand_loader("glProgramUniform4uivEXT");
    glad_glProgramUniform4uivEXT(program, location, count, value);
}
PFNGLPROGRAMUNIFORM4UIVEXTPROC glad_glProgramUniform4uivEXT = glad_on_demand_impl_glProgramUniform4uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2dv");
    glad_glProgramUniformMatrix2dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv = glad_on_demand_impl_glProgramUniformMatrix2dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2dvEXT");
    glad_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glad_glProgramUniformMatrix2dvEXT = glad_on_demand_impl_glProgramUniformMatrix2dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2fv");
    glad_glProgramUniformMatrix2fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv = glad_on_demand_impl_glProgramUniformMatrix2fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2fvEXT");
    glad_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glad_glProgramUniformMatrix2fvEXT = glad_on_demand_impl_glProgramUniformMatrix2fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x3dv");
    glad_glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv = glad_on_demand_impl_glProgramUniformMatrix2x3dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x3dvEXT");
    glad_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glad_glProgramUniformMatrix2x3dvEXT = glad_on_demand_impl_glProgramUniformMatrix2x3dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x3fv");
    glad_glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv = glad_on_demand_impl_glProgramUniformMatrix2x3fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x3fvEXT");
    glad_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glad_glProgramUniformMatrix2x3fvEXT = glad_on_demand_impl_glProgramUniformMatrix2x3fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x4dv");
    glad_glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv = glad_on_demand_impl_glProgramUniformMatrix2x4dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x4dvEXT");
    glad_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glad_glProgramUniformMatrix2x4dvEXT = glad_on_demand_impl_glProgramUniformMatrix2x4dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x4fv");
    glad_glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv = glad_on_demand_impl_glProgramUniformMatrix2x4fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix2x4fvEXT");
    glad_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glad_glProgramUniformMatrix2x4fvEXT = glad_on_demand_impl_glProgramUniformMatrix2x4fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3dv");
    glad_glProgramUniformMatrix3dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv = glad_on_demand_impl_glProgramUniformMatrix3dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3dvEXT");
    glad_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glad_glProgramUniformMatrix3dvEXT = glad_on_demand_impl_glProgramUniformMatrix3dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3fv");
    glad_glProgramUniformMatrix3fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv = glad_on_demand_impl_glProgramUniformMatrix3fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3fvEXT");
    glad_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glad_glProgramUniformMatrix3fvEXT = glad_on_demand_impl_glProgramUniformMatrix3fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x2dv");
    glad_glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv = glad_on_demand_impl_glProgramUniformMatrix3x2dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x2dvEXT");
    glad_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glad_glProgramUniformMatrix3x2dvEXT = glad_on_demand_impl_glProgramUniformMatrix3x2dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x2fv");
    glad_glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv = glad_on_demand_impl_glProgramUniformMatrix3x2fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x2fvEXT");
    glad_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glad_glProgramUniformMatrix3x2fvEXT = glad_on_demand_impl_glProgramUniformMatrix3x2fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x4dv");
    glad_glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv = glad_on_demand_impl_glProgramUniformMatrix3x4dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x4dvEXT");
    glad_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glad_glProgramUniformMatrix3x4dvEXT = glad_on_demand_impl_glProgramUniformMatrix3x4dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x4fv");
    glad_glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv = glad_on_demand_impl_glProgramUniformMatrix3x4fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix3x4fvEXT");
    glad_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glad_glProgramUniformMatrix3x4fvEXT = glad_on_demand_impl_glProgramUniformMatrix3x4fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4dv");
    glad_glProgramUniformMatrix4dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv = glad_on_demand_impl_glProgramUniformMatrix4dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4dvEXT");
    glad_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glad_glProgramUniformMatrix4dvEXT = glad_on_demand_impl_glProgramUniformMatrix4dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4fv");
    glad_glProgramUniformMatrix4fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv = glad_on_demand_impl_glProgramUniformMatrix4fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4fvEXT");
    glad_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glad_glProgramUniformMatrix4fvEXT = glad_on_demand_impl_glProgramUniformMatrix4fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x2dv");
    glad_glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv = glad_on_demand_impl_glProgramUniformMatrix4x2dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x2dvEXT");
    glad_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glad_glProgramUniformMatrix4x2dvEXT = glad_on_demand_impl_glProgramUniformMatrix4x2dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x2fv");
    glad_glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv = glad_on_demand_impl_glProgramUniformMatrix4x2fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x2fvEXT");
    glad_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glad_glProgramUniformMatrix4x2fvEXT = glad_on_demand_impl_glProgramUniformMatrix4x2fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x3dv");
    glad_glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv = glad_on_demand_impl_glProgramUniformMatrix4x3dv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x3dvEXT");
    glad_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glad_glProgramUniformMatrix4x3dvEXT = glad_on_demand_impl_glProgramUniformMatrix4x3dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x3fv");
    glad_glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv = glad_on_demand_impl_glProgramUniformMatrix4x3fv;
static void GLAD_API_PTR glad_on_demand_impl_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) glad_gl_on_demand_loader("glProgramUniformMatrix4x3fvEXT");
    glad_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
}
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glad_glProgramUniformMatrix4x3fvEXT = glad_on_demand_impl_glProgramUniformMatrix4x3fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glProgramVertexLimitNV(GLenum target, GLint limit) {
    glad_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC) glad_gl_on_demand_loader("glProgramVertexLimitNV");
    glad_glProgramVertexLimitNV(target, limit);
}
PFNGLPROGRAMVERTEXLIMITNVPROC glad_glProgramVertexLimitNV = glad_on_demand_impl_glProgramVertexLimitNV;
static void GLAD_API_PTR glad_on_demand_impl_glProvokingVertex(GLenum mode) {
    glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC) glad_gl_on_demand_loader("glProvokingVertex");
    glad_glProvokingVertex(mode);
}
PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex = glad_on_demand_impl_glProvokingVertex;
static void GLAD_API_PTR glad_on_demand_impl_glProvokingVertexEXT(GLenum mode) {
    glad_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC) glad_gl_on_demand_loader("glProvokingVertexEXT");
    glad_glProvokingVertexEXT(mode);
}
PFNGLPROVOKINGVERTEXEXTPROC glad_glProvokingVertexEXT = glad_on_demand_impl_glProvokingVertexEXT;
static void GLAD_API_PTR glad_on_demand_impl_glPushAttrib(GLbitfield mask) {
    glad_glPushAttrib = (PFNGLPUSHATTRIBPROC) glad_gl_on_demand_loader("glPushAttrib");
    glad_glPushAttrib(mask);
}
PFNGLPUSHATTRIBPROC glad_glPushAttrib = glad_on_demand_impl_glPushAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPushClientAttrib(GLbitfield mask) {
    glad_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC) glad_gl_on_demand_loader("glPushClientAttrib");
    glad_glPushClientAttrib(mask);
}
PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib = glad_on_demand_impl_glPushClientAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPushClientAttribDefaultEXT(GLbitfield mask) {
    glad_glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) glad_gl_on_demand_loader("glPushClientAttribDefaultEXT");
    glad_glPushClientAttribDefaultEXT(mask);
}
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glad_glPushClientAttribDefaultEXT = glad_on_demand_impl_glPushClientAttribDefaultEXT;
static void GLAD_API_PTR glad_on_demand_impl_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) {
    glad_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC) glad_gl_on_demand_loader("glPushDebugGroup");
    glad_glPushDebugGroup(source, id, length, message);
}
PFNGLPUSHDEBUGGROUPPROC glad_glPushDebugGroup = glad_on_demand_impl_glPushDebugGroup;
static void GLAD_API_PTR glad_on_demand_impl_glPushMatrix(void) {
    glad_glPushMatrix = (PFNGLPUSHMATRIXPROC) glad_gl_on_demand_loader("glPushMatrix");
    glad_glPushMatrix();
}
PFNGLPUSHMATRIXPROC glad_glPushMatrix = glad_on_demand_impl_glPushMatrix;
static void GLAD_API_PTR glad_on_demand_impl_glPushName(GLuint name) {
    glad_glPushName = (PFNGLPUSHNAMEPROC) glad_gl_on_demand_loader("glPushName");
    glad_glPushName(name);
}
PFNGLPUSHNAMEPROC glad_glPushName = glad_on_demand_impl_glPushName;
static void GLAD_API_PTR glad_on_demand_impl_glQueryCounter(GLuint id, GLenum target) {
    glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC) glad_gl_on_demand_loader("glQueryCounter");
    glad_glQueryCounter(id, target);
}
PFNGLQUERYCOUNTERPROC glad_glQueryCounter = glad_on_demand_impl_glQueryCounter;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2d(GLdouble x, GLdouble y) {
    glad_glRasterPos2d = (PFNGLRASTERPOS2DPROC) glad_gl_on_demand_loader("glRasterPos2d");
    glad_glRasterPos2d(x, y);
}
PFNGLRASTERPOS2DPROC glad_glRasterPos2d = glad_on_demand_impl_glRasterPos2d;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2dv(const GLdouble * v) {
    glad_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC) glad_gl_on_demand_loader("glRasterPos2dv");
    glad_glRasterPos2dv(v);
}
PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv = glad_on_demand_impl_glRasterPos2dv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2f(GLfloat x, GLfloat y) {
    glad_glRasterPos2f = (PFNGLRASTERPOS2FPROC) glad_gl_on_demand_loader("glRasterPos2f");
    glad_glRasterPos2f(x, y);
}
PFNGLRASTERPOS2FPROC glad_glRasterPos2f = glad_on_demand_impl_glRasterPos2f;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2fv(const GLfloat * v) {
    glad_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC) glad_gl_on_demand_loader("glRasterPos2fv");
    glad_glRasterPos2fv(v);
}
PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv = glad_on_demand_impl_glRasterPos2fv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2i(GLint x, GLint y) {
    glad_glRasterPos2i = (PFNGLRASTERPOS2IPROC) glad_gl_on_demand_loader("glRasterPos2i");
    glad_glRasterPos2i(x, y);
}
PFNGLRASTERPOS2IPROC glad_glRasterPos2i = glad_on_demand_impl_glRasterPos2i;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2iv(const GLint * v) {
    glad_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC) glad_gl_on_demand_loader("glRasterPos2iv");
    glad_glRasterPos2iv(v);
}
PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv = glad_on_demand_impl_glRasterPos2iv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2s(GLshort x, GLshort y) {
    glad_glRasterPos2s = (PFNGLRASTERPOS2SPROC) glad_gl_on_demand_loader("glRasterPos2s");
    glad_glRasterPos2s(x, y);
}
PFNGLRASTERPOS2SPROC glad_glRasterPos2s = glad_on_demand_impl_glRasterPos2s;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2sv(const GLshort * v) {
    glad_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC) glad_gl_on_demand_loader("glRasterPos2sv");
    glad_glRasterPos2sv(v);
}
PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv = glad_on_demand_impl_glRasterPos2sv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glRasterPos3d = (PFNGLRASTERPOS3DPROC) glad_gl_on_demand_loader("glRasterPos3d");
    glad_glRasterPos3d(x, y, z);
}
PFNGLRASTERPOS3DPROC glad_glRasterPos3d = glad_on_demand_impl_glRasterPos3d;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3dv(const GLdouble * v) {
    glad_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC) glad_gl_on_demand_loader("glRasterPos3dv");
    glad_glRasterPos3dv(v);
}
PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv = glad_on_demand_impl_glRasterPos3dv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glRasterPos3f = (PFNGLRASTERPOS3FPROC) glad_gl_on_demand_loader("glRasterPos3f");
    glad_glRasterPos3f(x, y, z);
}
PFNGLRASTERPOS3FPROC glad_glRasterPos3f = glad_on_demand_impl_glRasterPos3f;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3fv(const GLfloat * v) {
    glad_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC) glad_gl_on_demand_loader("glRasterPos3fv");
    glad_glRasterPos3fv(v);
}
PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv = glad_on_demand_impl_glRasterPos3fv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3i(GLint x, GLint y, GLint z) {
    glad_glRasterPos3i = (PFNGLRASTERPOS3IPROC) glad_gl_on_demand_loader("glRasterPos3i");
    glad_glRasterPos3i(x, y, z);
}
PFNGLRASTERPOS3IPROC glad_glRasterPos3i = glad_on_demand_impl_glRasterPos3i;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3iv(const GLint * v) {
    glad_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC) glad_gl_on_demand_loader("glRasterPos3iv");
    glad_glRasterPos3iv(v);
}
PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv = glad_on_demand_impl_glRasterPos3iv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
    glad_glRasterPos3s = (PFNGLRASTERPOS3SPROC) glad_gl_on_demand_loader("glRasterPos3s");
    glad_glRasterPos3s(x, y, z);
}
PFNGLRASTERPOS3SPROC glad_glRasterPos3s = glad_on_demand_impl_glRasterPos3s;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3sv(const GLshort * v) {
    glad_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC) glad_gl_on_demand_loader("glRasterPos3sv");
    glad_glRasterPos3sv(v);
}
PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv = glad_on_demand_impl_glRasterPos3sv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glRasterPos4d = (PFNGLRASTERPOS4DPROC) glad_gl_on_demand_loader("glRasterPos4d");
    glad_glRasterPos4d(x, y, z, w);
}
PFNGLRASTERPOS4DPROC glad_glRasterPos4d = glad_on_demand_impl_glRasterPos4d;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4dv(const GLdouble * v) {
    glad_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC) glad_gl_on_demand_loader("glRasterPos4dv");
    glad_glRasterPos4dv(v);
}
PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv = glad_on_demand_impl_glRasterPos4dv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glRasterPos4f = (PFNGLRASTERPOS4FPROC) glad_gl_on_demand_loader("glRasterPos4f");
    glad_glRasterPos4f(x, y, z, w);
}
PFNGLRASTERPOS4FPROC glad_glRasterPos4f = glad_on_demand_impl_glRasterPos4f;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4fv(const GLfloat * v) {
    glad_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC) glad_gl_on_demand_loader("glRasterPos4fv");
    glad_glRasterPos4fv(v);
}
PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv = glad_on_demand_impl_glRasterPos4fv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
    glad_glRasterPos4i = (PFNGLRASTERPOS4IPROC) glad_gl_on_demand_loader("glRasterPos4i");
    glad_glRasterPos4i(x, y, z, w);
}
PFNGLRASTERPOS4IPROC glad_glRasterPos4i = glad_on_demand_impl_glRasterPos4i;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4iv(const GLint * v) {
    glad_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC) glad_gl_on_demand_loader("glRasterPos4iv");
    glad_glRasterPos4iv(v);
}
PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv = glad_on_demand_impl_glRasterPos4iv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glRasterPos4s = (PFNGLRASTERPOS4SPROC) glad_gl_on_demand_loader("glRasterPos4s");
    glad_glRasterPos4s(x, y, z, w);
}
PFNGLRASTERPOS4SPROC glad_glRasterPos4s = glad_on_demand_impl_glRasterPos4s;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4sv(const GLshort * v) {
    glad_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC) glad_gl_on_demand_loader("glRasterPos4sv");
    glad_glRasterPos4sv(v);
}
PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv = glad_on_demand_impl_glRasterPos4sv;
static void GLAD_API_PTR glad_on_demand_impl_glReadBuffer(GLenum src) {
    glad_glReadBuffer = (PFNGLREADBUFFERPROC) glad_gl_on_demand_loader("glReadBuffer");
    glad_glReadBuffer(src);
}
PFNGLREADBUFFERPROC glad_glReadBuffer = glad_on_demand_impl_glReadBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) {
    glad_glReadPixels = (PFNGLREADPIXELSPROC) glad_gl_on_demand_loader("glReadPixels");
    glad_glReadPixels(x, y, width, height, format, type, pixels);
}
PFNGLREADPIXELSPROC glad_glReadPixels = glad_on_demand_impl_glReadPixels;
static void GLAD_API_PTR glad_on_demand_impl_glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
    glad_glReadnPixels = (PFNGLREADNPIXELSPROC) glad_gl_on_demand_loader("glReadnPixels");
    glad_glReadnPixels(x, y, width, height, format, type, bufSize, data);
}
PFNGLREADNPIXELSPROC glad_glReadnPixels = glad_on_demand_impl_glReadnPixels;
static void GLAD_API_PTR glad_on_demand_impl_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) {
    glad_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC) glad_gl_on_demand_loader("glReadnPixelsARB");
    glad_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
}
PFNGLREADNPIXELSARBPROC glad_glReadnPixelsARB = glad_on_demand_impl_glReadnPixelsARB;
static void GLAD_API_PTR glad_on_demand_impl_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
    glad_glRectd = (PFNGLRECTDPROC) glad_gl_on_demand_loader("glRectd");
    glad_glRectd(x1, y1, x2, y2);
}
PFNGLRECTDPROC glad_glRectd = glad_on_demand_impl_glRectd;
static void GLAD_API_PTR glad_on_demand_impl_glRectdv(const GLdouble * v1, const GLdouble * v2) {
    glad_glRectdv = (PFNGLRECTDVPROC) glad_gl_on_demand_loader("glRectdv");
    glad_glRectdv(v1, v2);
}
PFNGLRECTDVPROC glad_glRectdv = glad_on_demand_impl_glRectdv;
static void GLAD_API_PTR glad_on_demand_impl_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
    glad_glRectf = (PFNGLRECTFPROC) glad_gl_on_demand_loader("glRectf");
    glad_glRectf(x1, y1, x2, y2);
}
PFNGLRECTFPROC glad_glRectf = glad_on_demand_impl_glRectf;
static void GLAD_API_PTR glad_on_demand_impl_glRectfv(const GLfloat * v1, const GLfloat * v2) {
    glad_glRectfv = (PFNGLRECTFVPROC) glad_gl_on_demand_loader("glRectfv");
    glad_glRectfv(v1, v2);
}
PFNGLRECTFVPROC glad_glRectfv = glad_on_demand_impl_glRectfv;
static void GLAD_API_PTR glad_on_demand_impl_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
    glad_glRecti = (PFNGLRECTIPROC) glad_gl_on_demand_loader("glRecti");
    glad_glRecti(x1, y1, x2, y2);
}
PFNGLRECTIPROC glad_glRecti = glad_on_demand_impl_glRecti;
static void GLAD_API_PTR glad_on_demand_impl_glRectiv(const GLint * v1, const GLint * v2) {
    glad_glRectiv = (PFNGLRECTIVPROC) glad_gl_on_demand_loader("glRectiv");
    glad_glRectiv(v1, v2);
}
PFNGLRECTIVPROC glad_glRectiv = glad_on_demand_impl_glRectiv;
static void GLAD_API_PTR glad_on_demand_impl_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
    glad_glRects = (PFNGLRECTSPROC) glad_gl_on_demand_loader("glRects");
    glad_glRects(x1, y1, x2, y2);
}
PFNGLRECTSPROC glad_glRects = glad_on_demand_impl_glRects;
static void GLAD_API_PTR glad_on_demand_impl_glRectsv(const GLshort * v1, const GLshort * v2) {
    glad_glRectsv = (PFNGLRECTSVPROC) glad_gl_on_demand_loader("glRectsv");
    glad_glRectsv(v1, v2);
}
PFNGLRECTSVPROC glad_glRectsv = glad_on_demand_impl_glRectsv;
static void GLAD_API_PTR glad_on_demand_impl_glReleaseShaderCompiler(void) {
    glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC) glad_gl_on_demand_loader("glReleaseShaderCompiler");
    glad_glReleaseShaderCompiler();
}
PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler = glad_on_demand_impl_glReleaseShaderCompiler;
static GLint GLAD_API_PTR glad_on_demand_impl_glRenderMode(GLenum mode) {
    glad_glRenderMode = (PFNGLRENDERMODEPROC) glad_gl_on_demand_loader("glRenderMode");
    return glad_glRenderMode(mode);
}
PFNGLRENDERMODEPROC glad_glRenderMode = glad_on_demand_impl_glRenderMode;
static void GLAD_API_PTR glad_on_demand_impl_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC) glad_gl_on_demand_loader("glRenderbufferStorage");
    glad_glRenderbufferStorage(target, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage = glad_on_demand_impl_glRenderbufferStorage;
static void GLAD_API_PTR glad_on_demand_impl_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC) glad_gl_on_demand_loader("glRenderbufferStorageEXT");
    glad_glRenderbufferStorageEXT(target, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEEXTPROC glad_glRenderbufferStorageEXT = glad_on_demand_impl_glRenderbufferStorageEXT;
static void GLAD_API_PTR glad_on_demand_impl_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) glad_gl_on_demand_loader("glRenderbufferStorageMultisample");
    glad_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample = glad_on_demand_impl_glRenderbufferStorageMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) glad_gl_on_demand_loader("glRenderbufferStorageMultisampleEXT");
    glad_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
}
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glad_glRenderbufferStorageMultisampleEXT = glad_on_demand_impl_glRenderbufferStorageMultisampleEXT;
static void GLAD_API_PTR glad_on_demand_impl_glRequestResidentProgramsNV(GLsizei n, const GLuint * programs) {
    glad_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC) glad_gl_on_demand_loader("glRequestResidentProgramsNV");
    glad_glRequestResidentProgramsNV(n, programs);
}
PFNGLREQUESTRESIDENTPROGRAMSNVPROC glad_glRequestResidentProgramsNV = glad_on_demand_impl_glRequestResidentProgramsNV;
static void GLAD_API_PTR glad_on_demand_impl_glResetHistogram(GLenum target) {
    glad_glResetHistogram = (PFNGLRESETHISTOGRAMPROC) glad_gl_on_demand_loader("glResetHistogram");
    glad_glResetHistogram(target);
}
PFNGLRESETHISTOGRAMPROC glad_glResetHistogram = glad_on_demand_impl_glResetHistogram;
static void GLAD_API_PTR glad_on_demand_impl_glResetMinmax(GLenum target) {
    glad_glResetMinmax = (PFNGLRESETMINMAXPROC) glad_gl_on_demand_loader("glResetMinmax");
    glad_glResetMinmax(target);
}
PFNGLRESETMINMAXPROC glad_glResetMinmax = glad_on_demand_impl_glResetMinmax;
static void GLAD_API_PTR glad_on_demand_impl_glResumeTransformFeedback(void) {
    glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC) glad_gl_on_demand_loader("glResumeTransformFeedback");
    glad_glResumeTransformFeedback();
}
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback = glad_on_demand_impl_glResumeTransformFeedback;
static void GLAD_API_PTR glad_on_demand_impl_glResumeTransformFeedbackNV(void) {
    glad_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC) glad_gl_on_demand_loader("glResumeTransformFeedbackNV");
    glad_glResumeTransformFeedbackNV();
}
PFNGLRESUMETRANSFORMFEEDBACKNVPROC glad_glResumeTransformFeedbackNV = glad_on_demand_impl_glResumeTransformFeedbackNV;
static void GLAD_API_PTR glad_on_demand_impl_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
    glad_glRotated = (PFNGLROTATEDPROC) glad_gl_on_demand_loader("glRotated");
    glad_glRotated(angle, x, y, z);
}
PFNGLROTATEDPROC glad_glRotated = glad_on_demand_impl_glRotated;
static void GLAD_API_PTR glad_on_demand_impl_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
    glad_glRotatef = (PFNGLROTATEFPROC) glad_gl_on_demand_loader("glRotatef");
    glad_glRotatef(angle, x, y, z);
}
PFNGLROTATEFPROC glad_glRotatef = glad_on_demand_impl_glRotatef;
static void GLAD_API_PTR glad_on_demand_impl_glSampleCoverage(GLfloat value, GLboolean invert) {
    glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC) glad_gl_on_demand_loader("glSampleCoverage");
    glad_glSampleCoverage(value, invert);
}
PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage = glad_on_demand_impl_glSampleCoverage;
static void GLAD_API_PTR glad_on_demand_impl_glSampleCoverageARB(GLfloat value, GLboolean invert) {
    glad_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC) glad_gl_on_demand_loader("glSampleCoverageARB");
    glad_glSampleCoverageARB(value, invert);
}
PFNGLSAMPLECOVERAGEARBPROC glad_glSampleCoverageARB = glad_on_demand_impl_glSampleCoverageARB;
static void GLAD_API_PTR glad_on_demand_impl_glSampleMaskIndexedNV(GLuint index, GLbitfield mask) {
    glad_glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC) glad_gl_on_demand_loader("glSampleMaskIndexedNV");
    glad_glSampleMaskIndexedNV(index, mask);
}
PFNGLSAMPLEMASKINDEXEDNVPROC glad_glSampleMaskIndexedNV = glad_on_demand_impl_glSampleMaskIndexedNV;
static void GLAD_API_PTR glad_on_demand_impl_glSampleMaski(GLuint maskNumber, GLbitfield mask) {
    glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC) glad_gl_on_demand_loader("glSampleMaski");
    glad_glSampleMaski(maskNumber, mask);
}
PFNGLSAMPLEMASKIPROC glad_glSampleMaski = glad_on_demand_impl_glSampleMaski;
static void GLAD_API_PTR glad_on_demand_impl_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) {
    glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC) glad_gl_on_demand_loader("glSamplerParameterIiv");
    glad_glSamplerParameterIiv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv = glad_on_demand_impl_glSamplerParameterIiv;
static void GLAD_API_PTR glad_on_demand_impl_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) {
    glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC) glad_gl_on_demand_loader("glSamplerParameterIuiv");
    glad_glSamplerParameterIuiv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv = glad_on_demand_impl_glSamplerParameterIuiv;
static void GLAD_API_PTR glad_on_demand_impl_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
    glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC) glad_gl_on_demand_loader("glSamplerParameterf");
    glad_glSamplerParameterf(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf = glad_on_demand_impl_glSamplerParameterf;
static void GLAD_API_PTR glad_on_demand_impl_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) {
    glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC) glad_gl_on_demand_loader("glSamplerParameterfv");
    glad_glSamplerParameterfv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv = glad_on_demand_impl_glSamplerParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
    glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC) glad_gl_on_demand_loader("glSamplerParameteri");
    glad_glSamplerParameteri(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri = glad_on_demand_impl_glSamplerParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) {
    glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC) glad_gl_on_demand_loader("glSamplerParameteriv");
    glad_glSamplerParameteriv(sampler, pname, param);
}
PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv = glad_on_demand_impl_glSamplerParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glScaled(GLdouble x, GLdouble y, GLdouble z) {
    glad_glScaled = (PFNGLSCALEDPROC) glad_gl_on_demand_loader("glScaled");
    glad_glScaled(x, y, z);
}
PFNGLSCALEDPROC glad_glScaled = glad_on_demand_impl_glScaled;
static void GLAD_API_PTR glad_on_demand_impl_glScalef(GLfloat x, GLfloat y, GLfloat z) {
    glad_glScalef = (PFNGLSCALEFPROC) glad_gl_on_demand_loader("glScalef");
    glad_glScalef(x, y, z);
}
PFNGLSCALEFPROC glad_glScalef = glad_on_demand_impl_glScalef;
static void GLAD_API_PTR glad_on_demand_impl_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glScissor = (PFNGLSCISSORPROC) glad_gl_on_demand_loader("glScissor");
    glad_glScissor(x, y, width, height);
}
PFNGLSCISSORPROC glad_glScissor = glad_on_demand_impl_glScissor;
static void GLAD_API_PTR glad_on_demand_impl_glScissorArrayv(GLuint first, GLsizei count, const GLint * v) {
    glad_glScissorArrayv = (PFNGLSCISSORARRAYVPROC) glad_gl_on_demand_loader("glScissorArrayv");
    glad_glScissorArrayv(first, count, v);
}
PFNGLSCISSORARRAYVPROC glad_glScissorArrayv = glad_on_demand_impl_glScissorArrayv;
static void GLAD_API_PTR glad_on_demand_impl_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) {
    glad_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC) glad_gl_on_demand_loader("glScissorIndexed");
    glad_glScissorIndexed(index, left, bottom, width, height);
}
PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed = glad_on_demand_impl_glScissorIndexed;
static void GLAD_API_PTR glad_on_demand_impl_glScissorIndexedv(GLuint index, const GLint * v) {
    glad_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC) glad_gl_on_demand_loader("glScissorIndexedv");
    glad_glScissorIndexedv(index, v);
}
PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv = glad_on_demand_impl_glScissorIndexedv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
    glad_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC) glad_gl_on_demand_loader("glSecondaryColor3b");
    glad_glSecondaryColor3b(red, green, blue);
}
PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b = glad_on_demand_impl_glSecondaryColor3b;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) {
    glad_glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3bEXT");
    glad_glSecondaryColor3bEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3BEXTPROC glad_glSecondaryColor3bEXT = glad_on_demand_impl_glSecondaryColor3bEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3bv(const GLbyte * v) {
    glad_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC) glad_gl_on_demand_loader("glSecondaryColor3bv");
    glad_glSecondaryColor3bv(v);
}
PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv = glad_on_demand_impl_glSecondaryColor3bv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3bvEXT(const GLbyte * v) {
    glad_glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3bvEXT");
    glad_glSecondaryColor3bvEXT(v);
}
PFNGLSECONDARYCOLOR3BVEXTPROC glad_glSecondaryColor3bvEXT = glad_on_demand_impl_glSecondaryColor3bvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
    glad_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC) glad_gl_on_demand_loader("glSecondaryColor3d");
    glad_glSecondaryColor3d(red, green, blue);
}
PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d = glad_on_demand_impl_glSecondaryColor3d;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) {
    glad_glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3dEXT");
    glad_glSecondaryColor3dEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3DEXTPROC glad_glSecondaryColor3dEXT = glad_on_demand_impl_glSecondaryColor3dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3dv(const GLdouble * v) {
    glad_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC) glad_gl_on_demand_loader("glSecondaryColor3dv");
    glad_glSecondaryColor3dv(v);
}
PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv = glad_on_demand_impl_glSecondaryColor3dv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3dvEXT(const GLdouble * v) {
    glad_glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3dvEXT");
    glad_glSecondaryColor3dvEXT(v);
}
PFNGLSECONDARYCOLOR3DVEXTPROC glad_glSecondaryColor3dvEXT = glad_on_demand_impl_glSecondaryColor3dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
    glad_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC) glad_gl_on_demand_loader("glSecondaryColor3f");
    glad_glSecondaryColor3f(red, green, blue);
}
PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f = glad_on_demand_impl_glSecondaryColor3f;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) {
    glad_glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3fEXT");
    glad_glSecondaryColor3fEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3FEXTPROC glad_glSecondaryColor3fEXT = glad_on_demand_impl_glSecondaryColor3fEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3fv(const GLfloat * v) {
    glad_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC) glad_gl_on_demand_loader("glSecondaryColor3fv");
    glad_glSecondaryColor3fv(v);
}
PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv = glad_on_demand_impl_glSecondaryColor3fv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3fvEXT(const GLfloat * v) {
    glad_glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3fvEXT");
    glad_glSecondaryColor3fvEXT(v);
}
PFNGLSECONDARYCOLOR3FVEXTPROC glad_glSecondaryColor3fvEXT = glad_on_demand_impl_glSecondaryColor3fvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3i(GLint red, GLint green, GLint blue) {
    glad_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC) glad_gl_on_demand_loader("glSecondaryColor3i");
    glad_glSecondaryColor3i(red, green, blue);
}
PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i = glad_on_demand_impl_glSecondaryColor3i;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue) {
    glad_glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3iEXT");
    glad_glSecondaryColor3iEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3IEXTPROC glad_glSecondaryColor3iEXT = glad_on_demand_impl_glSecondaryColor3iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3iv(const GLint * v) {
    glad_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC) glad_gl_on_demand_loader("glSecondaryColor3iv");
    glad_glSecondaryColor3iv(v);
}
PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv = glad_on_demand_impl_glSecondaryColor3iv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3ivEXT(const GLint * v) {
    glad_glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3ivEXT");
    glad_glSecondaryColor3ivEXT(v);
}
PFNGLSECONDARYCOLOR3IVEXTPROC glad_glSecondaryColor3ivEXT = glad_on_demand_impl_glSecondaryColor3ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
    glad_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC) glad_gl_on_demand_loader("glSecondaryColor3s");
    glad_glSecondaryColor3s(red, green, blue);
}
PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s = glad_on_demand_impl_glSecondaryColor3s;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) {
    glad_glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3sEXT");
    glad_glSecondaryColor3sEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3SEXTPROC glad_glSecondaryColor3sEXT = glad_on_demand_impl_glSecondaryColor3sEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3sv(const GLshort * v) {
    glad_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC) glad_gl_on_demand_loader("glSecondaryColor3sv");
    glad_glSecondaryColor3sv(v);
}
PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv = glad_on_demand_impl_glSecondaryColor3sv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3svEXT(const GLshort * v) {
    glad_glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3svEXT");
    glad_glSecondaryColor3svEXT(v);
}
PFNGLSECONDARYCOLOR3SVEXTPROC glad_glSecondaryColor3svEXT = glad_on_demand_impl_glSecondaryColor3svEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
    glad_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC) glad_gl_on_demand_loader("glSecondaryColor3ub");
    glad_glSecondaryColor3ub(red, green, blue);
}
PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub = glad_on_demand_impl_glSecondaryColor3ub;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) {
    glad_glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3ubEXT");
    glad_glSecondaryColor3ubEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3UBEXTPROC glad_glSecondaryColor3ubEXT = glad_on_demand_impl_glSecondaryColor3ubEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3ubv(const GLubyte * v) {
    glad_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC) glad_gl_on_demand_loader("glSecondaryColor3ubv");
    glad_glSecondaryColor3ubv(v);
}
PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv = glad_on_demand_impl_glSecondaryColor3ubv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3ubvEXT(const GLubyte * v) {
    glad_glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3ubvEXT");
    glad_glSecondaryColor3ubvEXT(v);
}
PFNGLSECONDARYCOLOR3UBVEXTPROC glad_glSecondaryColor3ubvEXT = glad_on_demand_impl_glSecondaryColor3ubvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
    glad_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC) glad_gl_on_demand_loader("glSecondaryColor3ui");
    glad_glSecondaryColor3ui(red, green, blue);
}
PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui = glad_on_demand_impl_glSecondaryColor3ui;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) {
    glad_glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3uiEXT");
    glad_glSecondaryColor3uiEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3UIEXTPROC glad_glSecondaryColor3uiEXT = glad_on_demand_impl_glSecondaryColor3uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3uiv(const GLuint * v) {
    glad_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC) glad_gl_on_demand_loader("glSecondaryColor3uiv");
    glad_glSecondaryColor3uiv(v);
}
PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv = glad_on_demand_impl_glSecondaryColor3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3uivEXT(const GLuint * v) {
    glad_glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3uivEXT");
    glad_glSecondaryColor3uivEXT(v);
}
PFNGLSECONDARYCOLOR3UIVEXTPROC glad_glSecondaryColor3uivEXT = glad_on_demand_impl_glSecondaryColor3uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
    glad_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC) glad_gl_on_demand_loader("glSecondaryColor3us");
    glad_glSecondaryColor3us(red, green, blue);
}
PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us = glad_on_demand_impl_glSecondaryColor3us;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) {
    glad_glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3usEXT");
    glad_glSecondaryColor3usEXT(red, green, blue);
}
PFNGLSECONDARYCOLOR3USEXTPROC glad_glSecondaryColor3usEXT = glad_on_demand_impl_glSecondaryColor3usEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3usv(const GLushort * v) {
    glad_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC) glad_gl_on_demand_loader("glSecondaryColor3usv");
    glad_glSecondaryColor3usv(v);
}
PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv = glad_on_demand_impl_glSecondaryColor3usv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColor3usvEXT(const GLushort * v) {
    glad_glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC) glad_gl_on_demand_loader("glSecondaryColor3usvEXT");
    glad_glSecondaryColor3usvEXT(v);
}
PFNGLSECONDARYCOLOR3USVEXTPROC glad_glSecondaryColor3usvEXT = glad_on_demand_impl_glSecondaryColor3usvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColorP3ui(GLenum type, GLuint color) {
    glad_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC) glad_gl_on_demand_loader("glSecondaryColorP3ui");
    glad_glSecondaryColorP3ui(type, color);
}
PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui = glad_on_demand_impl_glSecondaryColorP3ui;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColorP3uiv(GLenum type, const GLuint * color) {
    glad_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC) glad_gl_on_demand_loader("glSecondaryColorP3uiv");
    glad_glSecondaryColorP3uiv(type, color);
}
PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv = glad_on_demand_impl_glSecondaryColorP3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC) glad_gl_on_demand_loader("glSecondaryColorPointer");
    glad_glSecondaryColorPointer(size, type, stride, pointer);
}
PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer = glad_on_demand_impl_glSecondaryColorPointer;
static void GLAD_API_PTR glad_on_demand_impl_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC) glad_gl_on_demand_loader("glSecondaryColorPointerEXT");
    glad_glSecondaryColorPointerEXT(size, type, stride, pointer);
}
PFNGLSECONDARYCOLORPOINTEREXTPROC glad_glSecondaryColorPointerEXT = glad_on_demand_impl_glSecondaryColorPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glSelectBuffer(GLsizei size, GLuint * buffer) {
    glad_glSelectBuffer = (PFNGLSELECTBUFFERPROC) glad_gl_on_demand_loader("glSelectBuffer");
    glad_glSelectBuffer(size, buffer);
}
PFNGLSELECTBUFFERPROC glad_glSelectBuffer = glad_on_demand_impl_glSelectBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) {
    glad_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC) glad_gl_on_demand_loader("glSeparableFilter2D");
    glad_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
}
PFNGLSEPARABLEFILTER2DPROC glad_glSeparableFilter2D = glad_on_demand_impl_glSeparableFilter2D;
static void GLAD_API_PTR glad_on_demand_impl_glShadeModel(GLenum mode) {
    glad_glShadeModel = (PFNGLSHADEMODELPROC) glad_gl_on_demand_loader("glShadeModel");
    glad_glShadeModel(mode);
}
PFNGLSHADEMODELPROC glad_glShadeModel = glad_on_demand_impl_glShadeModel;
static void GLAD_API_PTR glad_on_demand_impl_glShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryFormat, const void * binary, GLsizei length) {
    glad_glShaderBinary = (PFNGLSHADERBINARYPROC) glad_gl_on_demand_loader("glShaderBinary");
    glad_glShaderBinary(count, shaders, binaryFormat, binary, length);
}
PFNGLSHADERBINARYPROC glad_glShaderBinary = glad_on_demand_impl_glShaderBinary;
static void GLAD_API_PTR glad_on_demand_impl_glShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) {
    glad_glShaderSource = (PFNGLSHADERSOURCEPROC) glad_gl_on_demand_loader("glShaderSource");
    glad_glShaderSource(shader, count, string, length);
}
PFNGLSHADERSOURCEPROC glad_glShaderSource = glad_on_demand_impl_glShaderSource;
static void GLAD_API_PTR glad_on_demand_impl_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) {
    glad_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC) glad_gl_on_demand_loader("glShaderSourceARB");
    glad_glShaderSourceARB(shaderObj, count, string, length);
}
PFNGLSHADERSOURCEARBPROC glad_glShaderSourceARB = glad_on_demand_impl_glShaderSourceARB;
static void GLAD_API_PTR glad_on_demand_impl_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
    glad_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC) glad_gl_on_demand_loader("glShaderStorageBlockBinding");
    glad_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glad_glShaderStorageBlockBinding = glad_on_demand_impl_glShaderStorageBlockBinding;
static void GLAD_API_PTR glad_on_demand_impl_glSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) {
    glad_glSpecializeShader = (PFNGLSPECIALIZESHADERPROC) glad_gl_on_demand_loader("glSpecializeShader");
    glad_glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}
PFNGLSPECIALIZESHADERPROC glad_glSpecializeShader = glad_on_demand_impl_glSpecializeShader;
static void GLAD_API_PTR glad_on_demand_impl_glSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) {
    glad_glSpecializeShaderARB = (PFNGLSPECIALIZESHADERARBPROC) glad_gl_on_demand_loader("glSpecializeShaderARB");
    glad_glSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}
PFNGLSPECIALIZESHADERARBPROC glad_glSpecializeShaderARB = glad_on_demand_impl_glSpecializeShaderARB;
static void GLAD_API_PTR glad_on_demand_impl_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
    glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) glad_gl_on_demand_loader("glStencilFunc");
    glad_glStencilFunc(func, ref, mask);
}
PFNGLSTENCILFUNCPROC glad_glStencilFunc = glad_on_demand_impl_glStencilFunc;
static void GLAD_API_PTR glad_on_demand_impl_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
    glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC) glad_gl_on_demand_loader("glStencilFuncSeparate");
    glad_glStencilFuncSeparate(face, func, ref, mask);
}
PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate = glad_on_demand_impl_glStencilFuncSeparate;
static void GLAD_API_PTR glad_on_demand_impl_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) {
    glad_glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC) glad_gl_on_demand_loader("glStencilFuncSeparateATI");
    glad_glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
}
PFNGLSTENCILFUNCSEPARATEATIPROC glad_glStencilFuncSeparateATI = glad_on_demand_impl_glStencilFuncSeparateATI;
static void GLAD_API_PTR glad_on_demand_impl_glStencilMask(GLuint mask) {
    glad_glStencilMask = (PFNGLSTENCILMASKPROC) glad_gl_on_demand_loader("glStencilMask");
    glad_glStencilMask(mask);
}
PFNGLSTENCILMASKPROC glad_glStencilMask = glad_on_demand_impl_glStencilMask;
static void GLAD_API_PTR glad_on_demand_impl_glStencilMaskSeparate(GLenum face, GLuint mask) {
    glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC) glad_gl_on_demand_loader("glStencilMaskSeparate");
    glad_glStencilMaskSeparate(face, mask);
}
PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate = glad_on_demand_impl_glStencilMaskSeparate;
static void GLAD_API_PTR glad_on_demand_impl_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
    glad_glStencilOp = (PFNGLSTENCILOPPROC) glad_gl_on_demand_loader("glStencilOp");
    glad_glStencilOp(fail, zfail, zpass);
}
PFNGLSTENCILOPPROC glad_glStencilOp = glad_on_demand_impl_glStencilOp;
static void GLAD_API_PTR glad_on_demand_impl_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
    glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC) glad_gl_on_demand_loader("glStencilOpSeparate");
    glad_glStencilOpSeparate(face, sfail, dpfail, dppass);
}
PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate = glad_on_demand_impl_glStencilOpSeparate;
static void GLAD_API_PTR glad_on_demand_impl_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
    glad_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC) glad_gl_on_demand_loader("glStencilOpSeparateATI");
    glad_glStencilOpSeparateATI(face, sfail, dpfail, dppass);
}
PFNGLSTENCILOPSEPARATEATIPROC glad_glStencilOpSeparateATI = glad_on_demand_impl_glStencilOpSeparateATI;
static void GLAD_API_PTR glad_on_demand_impl_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTexBuffer = (PFNGLTEXBUFFERPROC) glad_gl_on_demand_loader("glTexBuffer");
    glad_glTexBuffer(target, internalformat, buffer);
}
PFNGLTEXBUFFERPROC glad_glTexBuffer = glad_on_demand_impl_glTexBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTexBufferARB = (PFNGLTEXBUFFERARBPROC) glad_gl_on_demand_loader("glTexBufferARB");
    glad_glTexBufferARB(target, internalformat, buffer);
}
PFNGLTEXBUFFERARBPROC glad_glTexBufferARB = glad_on_demand_impl_glTexBufferARB;
static void GLAD_API_PTR glad_on_demand_impl_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC) glad_gl_on_demand_loader("glTexBufferEXT");
    glad_glTexBufferEXT(target, internalformat, buffer);
}
PFNGLTEXBUFFEREXTPROC glad_glTexBufferEXT = glad_on_demand_impl_glTexBufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC) glad_gl_on_demand_loader("glTexBufferRange");
    glad_glTexBufferRange(target, internalformat, buffer, offset, size);
}
PFNGLTEXBUFFERRANGEPROC glad_glTexBufferRange = glad_on_demand_impl_glTexBufferRange;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1d(GLdouble s) {
    glad_glTexCoord1d = (PFNGLTEXCOORD1DPROC) glad_gl_on_demand_loader("glTexCoord1d");
    glad_glTexCoord1d(s);
}
PFNGLTEXCOORD1DPROC glad_glTexCoord1d = glad_on_demand_impl_glTexCoord1d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1dv(const GLdouble * v) {
    glad_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC) glad_gl_on_demand_loader("glTexCoord1dv");
    glad_glTexCoord1dv(v);
}
PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv = glad_on_demand_impl_glTexCoord1dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1f(GLfloat s) {
    glad_glTexCoord1f = (PFNGLTEXCOORD1FPROC) glad_gl_on_demand_loader("glTexCoord1f");
    glad_glTexCoord1f(s);
}
PFNGLTEXCOORD1FPROC glad_glTexCoord1f = glad_on_demand_impl_glTexCoord1f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1fv(const GLfloat * v) {
    glad_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC) glad_gl_on_demand_loader("glTexCoord1fv");
    glad_glTexCoord1fv(v);
}
PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv = glad_on_demand_impl_glTexCoord1fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1i(GLint s) {
    glad_glTexCoord1i = (PFNGLTEXCOORD1IPROC) glad_gl_on_demand_loader("glTexCoord1i");
    glad_glTexCoord1i(s);
}
PFNGLTEXCOORD1IPROC glad_glTexCoord1i = glad_on_demand_impl_glTexCoord1i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1iv(const GLint * v) {
    glad_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC) glad_gl_on_demand_loader("glTexCoord1iv");
    glad_glTexCoord1iv(v);
}
PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv = glad_on_demand_impl_glTexCoord1iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1s(GLshort s) {
    glad_glTexCoord1s = (PFNGLTEXCOORD1SPROC) glad_gl_on_demand_loader("glTexCoord1s");
    glad_glTexCoord1s(s);
}
PFNGLTEXCOORD1SPROC glad_glTexCoord1s = glad_on_demand_impl_glTexCoord1s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1sv(const GLshort * v) {
    glad_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC) glad_gl_on_demand_loader("glTexCoord1sv");
    glad_glTexCoord1sv(v);
}
PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv = glad_on_demand_impl_glTexCoord1sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2d(GLdouble s, GLdouble t) {
    glad_glTexCoord2d = (PFNGLTEXCOORD2DPROC) glad_gl_on_demand_loader("glTexCoord2d");
    glad_glTexCoord2d(s, t);
}
PFNGLTEXCOORD2DPROC glad_glTexCoord2d = glad_on_demand_impl_glTexCoord2d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2dv(const GLdouble * v) {
    glad_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC) glad_gl_on_demand_loader("glTexCoord2dv");
    glad_glTexCoord2dv(v);
}
PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv = glad_on_demand_impl_glTexCoord2dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2f(GLfloat s, GLfloat t) {
    glad_glTexCoord2f = (PFNGLTEXCOORD2FPROC) glad_gl_on_demand_loader("glTexCoord2f");
    glad_glTexCoord2f(s, t);
}
PFNGLTEXCOORD2FPROC glad_glTexCoord2f = glad_on_demand_impl_glTexCoord2f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2fv(const GLfloat * v) {
    glad_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC) glad_gl_on_demand_loader("glTexCoord2fv");
    glad_glTexCoord2fv(v);
}
PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv = glad_on_demand_impl_glTexCoord2fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2i(GLint s, GLint t) {
    glad_glTexCoord2i = (PFNGLTEXCOORD2IPROC) glad_gl_on_demand_loader("glTexCoord2i");
    glad_glTexCoord2i(s, t);
}
PFNGLTEXCOORD2IPROC glad_glTexCoord2i = glad_on_demand_impl_glTexCoord2i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2iv(const GLint * v) {
    glad_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC) glad_gl_on_demand_loader("glTexCoord2iv");
    glad_glTexCoord2iv(v);
}
PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv = glad_on_demand_impl_glTexCoord2iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2s(GLshort s, GLshort t) {
    glad_glTexCoord2s = (PFNGLTEXCOORD2SPROC) glad_gl_on_demand_loader("glTexCoord2s");
    glad_glTexCoord2s(s, t);
}
PFNGLTEXCOORD2SPROC glad_glTexCoord2s = glad_on_demand_impl_glTexCoord2s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2sv(const GLshort * v) {
    glad_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC) glad_gl_on_demand_loader("glTexCoord2sv");
    glad_glTexCoord2sv(v);
}
PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv = glad_on_demand_impl_glTexCoord2sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
    glad_glTexCoord3d = (PFNGLTEXCOORD3DPROC) glad_gl_on_demand_loader("glTexCoord3d");
    glad_glTexCoord3d(s, t, r);
}
PFNGLTEXCOORD3DPROC glad_glTexCoord3d = glad_on_demand_impl_glTexCoord3d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3dv(const GLdouble * v) {
    glad_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC) glad_gl_on_demand_loader("glTexCoord3dv");
    glad_glTexCoord3dv(v);
}
PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv = glad_on_demand_impl_glTexCoord3dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
    glad_glTexCoord3f = (PFNGLTEXCOORD3FPROC) glad_gl_on_demand_loader("glTexCoord3f");
    glad_glTexCoord3f(s, t, r);
}
PFNGLTEXCOORD3FPROC glad_glTexCoord3f = glad_on_demand_impl_glTexCoord3f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3fv(const GLfloat * v) {
    glad_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC) glad_gl_on_demand_loader("glTexCoord3fv");
    glad_glTexCoord3fv(v);
}
PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv = glad_on_demand_impl_glTexCoord3fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3i(GLint s, GLint t, GLint r) {
    glad_glTexCoord3i = (PFNGLTEXCOORD3IPROC) glad_gl_on_demand_loader("glTexCoord3i");
    glad_glTexCoord3i(s, t, r);
}
PFNGLTEXCOORD3IPROC glad_glTexCoord3i = glad_on_demand_impl_glTexCoord3i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3iv(const GLint * v) {
    glad_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC) glad_gl_on_demand_loader("glTexCoord3iv");
    glad_glTexCoord3iv(v);
}
PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv = glad_on_demand_impl_glTexCoord3iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
    glad_glTexCoord3s = (PFNGLTEXCOORD3SPROC) glad_gl_on_demand_loader("glTexCoord3s");
    glad_glTexCoord3s(s, t, r);
}
PFNGLTEXCOORD3SPROC glad_glTexCoord3s = glad_on_demand_impl_glTexCoord3s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3sv(const GLshort * v) {
    glad_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC) glad_gl_on_demand_loader("glTexCoord3sv");
    glad_glTexCoord3sv(v);
}
PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv = glad_on_demand_impl_glTexCoord3sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glad_glTexCoord4d = (PFNGLTEXCOORD4DPROC) glad_gl_on_demand_loader("glTexCoord4d");
    glad_glTexCoord4d(s, t, r, q);
}
PFNGLTEXCOORD4DPROC glad_glTexCoord4d = glad_on_demand_impl_glTexCoord4d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4dv(const GLdouble * v) {
    glad_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC) glad_gl_on_demand_loader("glTexCoord4dv");
    glad_glTexCoord4dv(v);
}
PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv = glad_on_demand_impl_glTexCoord4dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glad_glTexCoord4f = (PFNGLTEXCOORD4FPROC) glad_gl_on_demand_loader("glTexCoord4f");
    glad_glTexCoord4f(s, t, r, q);
}
PFNGLTEXCOORD4FPROC glad_glTexCoord4f = glad_on_demand_impl_glTexCoord4f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4fv(const GLfloat * v) {
    glad_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC) glad_gl_on_demand_loader("glTexCoord4fv");
    glad_glTexCoord4fv(v);
}
PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv = glad_on_demand_impl_glTexCoord4fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
    glad_glTexCoord4i = (PFNGLTEXCOORD4IPROC) glad_gl_on_demand_loader("glTexCoord4i");
    glad_glTexCoord4i(s, t, r, q);
}
PFNGLTEXCOORD4IPROC glad_glTexCoord4i = glad_on_demand_impl_glTexCoord4i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4iv(const GLint * v) {
    glad_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC) glad_gl_on_demand_loader("glTexCoord4iv");
    glad_glTexCoord4iv(v);
}
PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv = glad_on_demand_impl_glTexCoord4iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
    glad_glTexCoord4s = (PFNGLTEXCOORD4SPROC) glad_gl_on_demand_loader("glTexCoord4s");
    glad_glTexCoord4s(s, t, r, q);
}
PFNGLTEXCOORD4SPROC glad_glTexCoord4s = glad_on_demand_impl_glTexCoord4s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4sv(const GLshort * v) {
    glad_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC) glad_gl_on_demand_loader("glTexCoord4sv");
    glad_glTexCoord4sv(v);
}
PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv = glad_on_demand_impl_glTexCoord4sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP1ui(GLenum type, GLuint coords) {
    glad_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC) glad_gl_on_demand_loader("glTexCoordP1ui");
    glad_glTexCoordP1ui(type, coords);
}
PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui = glad_on_demand_impl_glTexCoordP1ui;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP1uiv(GLenum type, const GLuint * coords) {
    glad_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC) glad_gl_on_demand_loader("glTexCoordP1uiv");
    glad_glTexCoordP1uiv(type, coords);
}
PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv = glad_on_demand_impl_glTexCoordP1uiv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP2ui(GLenum type, GLuint coords) {
    glad_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC) glad_gl_on_demand_loader("glTexCoordP2ui");
    glad_glTexCoordP2ui(type, coords);
}
PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui = glad_on_demand_impl_glTexCoordP2ui;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP2uiv(GLenum type, const GLuint * coords) {
    glad_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC) glad_gl_on_demand_loader("glTexCoordP2uiv");
    glad_glTexCoordP2uiv(type, coords);
}
PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv = glad_on_demand_impl_glTexCoordP2uiv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP3ui(GLenum type, GLuint coords) {
    glad_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC) glad_gl_on_demand_loader("glTexCoordP3ui");
    glad_glTexCoordP3ui(type, coords);
}
PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui = glad_on_demand_impl_glTexCoordP3ui;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP3uiv(GLenum type, const GLuint * coords) {
    glad_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC) glad_gl_on_demand_loader("glTexCoordP3uiv");
    glad_glTexCoordP3uiv(type, coords);
}
PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv = glad_on_demand_impl_glTexCoordP3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP4ui(GLenum type, GLuint coords) {
    glad_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC) glad_gl_on_demand_loader("glTexCoordP4ui");
    glad_glTexCoordP4ui(type, coords);
}
PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui = glad_on_demand_impl_glTexCoordP4ui;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordP4uiv(GLenum type, const GLuint * coords) {
    glad_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC) glad_gl_on_demand_loader("glTexCoordP4uiv");
    glad_glTexCoordP4uiv(type, coords);
}
PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv = glad_on_demand_impl_glTexCoordP4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) glad_gl_on_demand_loader("glTexCoordPointer");
    glad_glTexCoordPointer(size, type, stride, pointer);
}
PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer = glad_on_demand_impl_glTexCoordPointer;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
    glad_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC) glad_gl_on_demand_loader("glTexCoordPointerEXT");
    glad_glTexCoordPointerEXT(size, type, stride, count, pointer);
}
PFNGLTEXCOORDPOINTEREXTPROC glad_glTexCoordPointerEXT = glad_on_demand_impl_glTexCoordPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
    glad_glTexEnvf = (PFNGLTEXENVFPROC) glad_gl_on_demand_loader("glTexEnvf");
    glad_glTexEnvf(target, pname, param);
}
PFNGLTEXENVFPROC glad_glTexEnvf = glad_on_demand_impl_glTexEnvf;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) {
    glad_glTexEnvfv = (PFNGLTEXENVFVPROC) glad_gl_on_demand_loader("glTexEnvfv");
    glad_glTexEnvfv(target, pname, params);
}
PFNGLTEXENVFVPROC glad_glTexEnvfv = glad_on_demand_impl_glTexEnvfv;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnvi(GLenum target, GLenum pname, GLint param) {
    glad_glTexEnvi = (PFNGLTEXENVIPROC) glad_gl_on_demand_loader("glTexEnvi");
    glad_glTexEnvi(target, pname, param);
}
PFNGLTEXENVIPROC glad_glTexEnvi = glad_on_demand_impl_glTexEnvi;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnviv(GLenum target, GLenum pname, const GLint * params) {
    glad_glTexEnviv = (PFNGLTEXENVIVPROC) glad_gl_on_demand_loader("glTexEnviv");
    glad_glTexEnviv(target, pname, params);
}
PFNGLTEXENVIVPROC glad_glTexEnviv = glad_on_demand_impl_glTexEnviv;
static void GLAD_API_PTR glad_on_demand_impl_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
    glad_glTexGend = (PFNGLTEXGENDPROC) glad_gl_on_demand_loader("glTexGend");
    glad_glTexGend(coord, pname, param);
}
PFNGLTEXGENDPROC glad_glTexGend = glad_on_demand_impl_glTexGend;
static void GLAD_API_PTR glad_on_demand_impl_glTexGendv(GLenum coord, GLenum pname, const GLdouble * params) {
    glad_glTexGendv = (PFNGLTEXGENDVPROC) glad_gl_on_demand_loader("glTexGendv");
    glad_glTexGendv(coord, pname, params);
}
PFNGLTEXGENDVPROC glad_glTexGendv = glad_on_demand_impl_glTexGendv;
static void GLAD_API_PTR glad_on_demand_impl_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
    glad_glTexGenf = (PFNGLTEXGENFPROC) glad_gl_on_demand_loader("glTexGenf");
    glad_glTexGenf(coord, pname, param);
}
PFNGLTEXGENFPROC glad_glTexGenf = glad_on_demand_impl_glTexGenf;
static void GLAD_API_PTR glad_on_demand_impl_glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) {
    glad_glTexGenfv = (PFNGLTEXGENFVPROC) glad_gl_on_demand_loader("glTexGenfv");
    glad_glTexGenfv(coord, pname, params);
}
PFNGLTEXGENFVPROC glad_glTexGenfv = glad_on_demand_impl_glTexGenfv;
static void GLAD_API_PTR glad_on_demand_impl_glTexGeni(GLenum coord, GLenum pname, GLint param) {
    glad_glTexGeni = (PFNGLTEXGENIPROC) glad_gl_on_demand_loader("glTexGeni");
    glad_glTexGeni(coord, pname, param);
}
PFNGLTEXGENIPROC glad_glTexGeni = glad_on_demand_impl_glTexGeni;
static void GLAD_API_PTR glad_on_demand_impl_glTexGeniv(GLenum coord, GLenum pname, const GLint * params) {
    glad_glTexGeniv = (PFNGLTEXGENIVPROC) glad_gl_on_demand_loader("glTexGeniv");
    glad_glTexGeniv(coord, pname, params);
}
PFNGLTEXGENIVPROC glad_glTexGeniv = glad_on_demand_impl_glTexGeniv;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTexImage1D = (PFNGLTEXIMAGE1DPROC) glad_gl_on_demand_loader("glTexImage1D");
    glad_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}
PFNGLTEXIMAGE1DPROC glad_glTexImage1D = glad_on_demand_impl_glTexImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) glad_gl_on_demand_loader("glTexImage2D");
    glad_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}
PFNGLTEXIMAGE2DPROC glad_glTexImage2D = glad_on_demand_impl_glTexImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC) glad_gl_on_demand_loader("glTexImage2DMultisample");
    glad_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample = glad_on_demand_impl_glTexImage2DMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC) glad_gl_on_demand_loader("glTexImage3D");
    glad_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
PFNGLTEXIMAGE3DPROC glad_glTexImage3D = glad_on_demand_impl_glTexImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC) glad_gl_on_demand_loader("glTexImage3DEXT");
    glad_glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
PFNGLTEXIMAGE3DEXTPROC glad_glTexImage3DEXT = glad_on_demand_impl_glTexImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC) glad_gl_on_demand_loader("glTexImage3DMultisample");
    glad_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample = glad_on_demand_impl_glTexImage3DMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterIiv(GLenum target, GLenum pname, const GLint * params) {
    glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC) glad_gl_on_demand_loader("glTexParameterIiv");
    glad_glTexParameterIiv(target, pname, params);
}
PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv = glad_on_demand_impl_glTexParameterIiv;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) {
    glad_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC) glad_gl_on_demand_loader("glTexParameterIivEXT");
    glad_glTexParameterIivEXT(target, pname, params);
}
PFNGLTEXPARAMETERIIVEXTPROC glad_glTexParameterIivEXT = glad_on_demand_impl_glTexParameterIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) {
    glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC) glad_gl_on_demand_loader("glTexParameterIuiv");
    glad_glTexParameterIuiv(target, pname, params);
}
PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv = glad_on_demand_impl_glTexParameterIuiv;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) {
    glad_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC) glad_gl_on_demand_loader("glTexParameterIuivEXT");
    glad_glTexParameterIuivEXT(target, pname, params);
}
PFNGLTEXPARAMETERIUIVEXTPROC glad_glTexParameterIuivEXT = glad_on_demand_impl_glTexParameterIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
    glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) glad_gl_on_demand_loader("glTexParameterf");
    glad_glTexParameterf(target, pname, param);
}
PFNGLTEXPARAMETERFPROC glad_glTexParameterf = glad_on_demand_impl_glTexParameterf;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
    glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) glad_gl_on_demand_loader("glTexParameterfv");
    glad_glTexParameterfv(target, pname, params);
}
PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv = glad_on_demand_impl_glTexParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameteri(GLenum target, GLenum pname, GLint param) {
    glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) glad_gl_on_demand_loader("glTexParameteri");
    glad_glTexParameteri(target, pname, param);
}
PFNGLTEXPARAMETERIPROC glad_glTexParameteri = glad_on_demand_impl_glTexParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameteriv(GLenum target, GLenum pname, const GLint * params) {
    glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) glad_gl_on_demand_loader("glTexParameteriv");
    glad_glTexParameteriv(target, pname, params);
}
PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv = glad_on_demand_impl_glTexParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glTexRenderbufferNV(GLenum target, GLuint renderbuffer) {
    glad_glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC) glad_gl_on_demand_loader("glTexRenderbufferNV");
    glad_glTexRenderbufferNV(target, renderbuffer);
}
PFNGLTEXRENDERBUFFERNVPROC glad_glTexRenderbufferNV = glad_on_demand_impl_glTexRenderbufferNV;
static void GLAD_API_PTR glad_on_demand_impl_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
    glad_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC) glad_gl_on_demand_loader("glTexStorage1D");
    glad_glTexStorage1D(target, levels, internalformat, width);
}
PFNGLTEXSTORAGE1DPROC glad_glTexStorage1D = glad_on_demand_impl_glTexStorage1D;
static void GLAD_API_PTR glad_on_demand_impl_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC) glad_gl_on_demand_loader("glTexStorage2D");
    glad_glTexStorage2D(target, levels, internalformat, width, height);
}
PFNGLTEXSTORAGE2DPROC glad_glTexStorage2D = glad_on_demand_impl_glTexStorage2D;
static void GLAD_API_PTR glad_on_demand_impl_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC) glad_gl_on_demand_loader("glTexStorage2DMultisample");
    glad_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glad_glTexStorage2DMultisample = glad_on_demand_impl_glTexStorage2DMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC) glad_gl_on_demand_loader("glTexStorage3D");
    glad_glTexStorage3D(target, levels, internalformat, width, height, depth);
}
PFNGLTEXSTORAGE3DPROC glad_glTexStorage3D = glad_on_demand_impl_glTexStorage3D;
static void GLAD_API_PTR glad_on_demand_impl_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC) glad_gl_on_demand_loader("glTexStorage3DMultisample");
    glad_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glad_glTexStorage3DMultisample = glad_on_demand_impl_glTexStorage3DMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) glad_gl_on_demand_loader("glTexSubImage1D");
    glad_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}
PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D = glad_on_demand_impl_glTexSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glTexSubImage1DEXT");
    glad_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
}
PFNGLTEXSUBIMAGE1DEXTPROC glad_glTexSubImage1DEXT = glad_on_demand_impl_glTexSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) glad_gl_on_demand_loader("glTexSubImage2D");
    glad_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D = glad_on_demand_impl_glTexSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glTexSubImage2DEXT");
    glad_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLTEXSUBIMAGE2DEXTPROC glad_glTexSubImage2DEXT = glad_on_demand_impl_glTexSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC) glad_gl_on_demand_loader("glTexSubImage3D");
    glad_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D = glad_on_demand_impl_glTexSubImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glTexSubImage3DEXT");
    glad_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
PFNGLTEXSUBIMAGE3DEXTPROC glad_glTexSubImage3DEXT = glad_on_demand_impl_glTexSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureBarrier(void) {
    glad_glTextureBarrier = (PFNGLTEXTUREBARRIERPROC) glad_gl_on_demand_loader("glTextureBarrier");
    glad_glTextureBarrier();
}
PFNGLTEXTUREBARRIERPROC glad_glTextureBarrier = glad_on_demand_impl_glTextureBarrier;
static void GLAD_API_PTR glad_on_demand_impl_glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) {
    glad_glTextureBuffer = (PFNGLTEXTUREBUFFERPROC) glad_gl_on_demand_loader("glTextureBuffer");
    glad_glTextureBuffer(texture, internalformat, buffer);
}
PFNGLTEXTUREBUFFERPROC glad_glTextureBuffer = glad_on_demand_impl_glTextureBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
    glad_glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC) glad_gl_on_demand_loader("glTextureBufferEXT");
    glad_glTextureBufferEXT(texture, target, internalformat, buffer);
}
PFNGLTEXTUREBUFFEREXTPROC glad_glTextureBufferEXT = glad_on_demand_impl_glTextureBufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTextureBufferRange = (PFNGLTEXTUREBUFFERRANGEPROC) glad_gl_on_demand_loader("glTextureBufferRange");
    glad_glTextureBufferRange(texture, internalformat, buffer, offset, size);
}
PFNGLTEXTUREBUFFERRANGEPROC glad_glTextureBufferRange = glad_on_demand_impl_glTextureBufferRange;
static void GLAD_API_PTR glad_on_demand_impl_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC) glad_gl_on_demand_loader("glTextureBufferRangeEXT");
    glad_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
}
PFNGLTEXTUREBUFFERRANGEEXTPROC glad_glTextureBufferRangeEXT = glad_on_demand_impl_glTextureBufferRangeEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC) glad_gl_on_demand_loader("glTextureImage1DEXT");
    glad_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
}
PFNGLTEXTUREIMAGE1DEXTPROC glad_glTextureImage1DEXT = glad_on_demand_impl_glTextureImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC) glad_gl_on_demand_loader("glTextureImage2DEXT");
    glad_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
}
PFNGLTEXTUREIMAGE2DEXTPROC glad_glTextureImage2DEXT = glad_on_demand_impl_glTextureImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC) glad_gl_on_demand_loader("glTextureImage3DEXT");
    glad_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}
PFNGLTEXTUREIMAGE3DEXTPROC glad_glTextureImage3DEXT = glad_on_demand_impl_glTextureImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) {
    glad_glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC) glad_gl_on_demand_loader("glTexturePageCommitmentEXT");
    glad_glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}
PFNGLTEXTUREPAGECOMMITMENTEXTPROC glad_glTexturePageCommitmentEXT = glad_on_demand_impl_glTexturePageCommitmentEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) {
    glad_glTextureParameterIiv = (PFNGLTEXTUREPARAMETERIIVPROC) glad_gl_on_demand_loader("glTextureParameterIiv");
    glad_glTextureParameterIiv(texture, pname, params);
}
PFNGLTEXTUREPARAMETERIIVPROC glad_glTextureParameterIiv = glad_on_demand_impl_glTextureParameterIiv;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) {
    glad_glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC) glad_gl_on_demand_loader("glTextureParameterIivEXT");
    glad_glTextureParameterIivEXT(texture, target, pname, params);
}
PFNGLTEXTUREPARAMETERIIVEXTPROC glad_glTextureParameterIivEXT = glad_on_demand_impl_glTextureParameterIivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) {
    glad_glTextureParameterIuiv = (PFNGLTEXTUREPARAMETERIUIVPROC) glad_gl_on_demand_loader("glTextureParameterIuiv");
    glad_glTextureParameterIuiv(texture, pname, params);
}
PFNGLTEXTUREPARAMETERIUIVPROC glad_glTextureParameterIuiv = glad_on_demand_impl_glTextureParameterIuiv;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) {
    glad_glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC) glad_gl_on_demand_loader("glTextureParameterIuivEXT");
    glad_glTextureParameterIuivEXT(texture, target, pname, params);
}
PFNGLTEXTUREPARAMETERIUIVEXTPROC glad_glTextureParameterIuivEXT = glad_on_demand_impl_glTextureParameterIuivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterf(GLuint texture, GLenum pname, GLfloat param) {
    glad_glTextureParameterf = (PFNGLTEXTUREPARAMETERFPROC) glad_gl_on_demand_loader("glTextureParameterf");
    glad_glTextureParameterf(texture, pname, param);
}
PFNGLTEXTUREPARAMETERFPROC glad_glTextureParameterf = glad_on_demand_impl_glTextureParameterf;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) {
    glad_glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC) glad_gl_on_demand_loader("glTextureParameterfEXT");
    glad_glTextureParameterfEXT(texture, target, pname, param);
}
PFNGLTEXTUREPARAMETERFEXTPROC glad_glTextureParameterfEXT = glad_on_demand_impl_glTextureParameterfEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) {
    glad_glTextureParameterfv = (PFNGLTEXTUREPARAMETERFVPROC) glad_gl_on_demand_loader("glTextureParameterfv");
    glad_glTextureParameterfv(texture, pname, param);
}
PFNGLTEXTUREPARAMETERFVPROC glad_glTextureParameterfv = glad_on_demand_impl_glTextureParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) {
    glad_glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC) glad_gl_on_demand_loader("glTextureParameterfvEXT");
    glad_glTextureParameterfvEXT(texture, target, pname, params);
}
PFNGLTEXTUREPARAMETERFVEXTPROC glad_glTextureParameterfvEXT = glad_on_demand_impl_glTextureParameterfvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameteri(GLuint texture, GLenum pname, GLint param) {
    glad_glTextureParameteri = (PFNGLTEXTUREPARAMETERIPROC) glad_gl_on_demand_loader("glTextureParameteri");
    glad_glTextureParameteri(texture, pname, param);
}
PFNGLTEXTUREPARAMETERIPROC glad_glTextureParameteri = glad_on_demand_impl_glTextureParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) {
    glad_glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC) glad_gl_on_demand_loader("glTextureParameteriEXT");
    glad_glTextureParameteriEXT(texture, target, pname, param);
}
PFNGLTEXTUREPARAMETERIEXTPROC glad_glTextureParameteriEXT = glad_on_demand_impl_glTextureParameteriEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) {
    glad_glTextureParameteriv = (PFNGLTEXTUREPARAMETERIVPROC) glad_gl_on_demand_loader("glTextureParameteriv");
    glad_glTextureParameteriv(texture, pname, param);
}
PFNGLTEXTUREPARAMETERIVPROC glad_glTextureParameteriv = glad_on_demand_impl_glTextureParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) {
    glad_glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC) glad_gl_on_demand_loader("glTextureParameterivEXT");
    glad_glTextureParameterivEXT(texture, target, pname, params);
}
PFNGLTEXTUREPARAMETERIVEXTPROC glad_glTextureParameterivEXT = glad_on_demand_impl_glTextureParameterivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) {
    glad_glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC) glad_gl_on_demand_loader("glTextureRenderbufferEXT");
    glad_glTextureRenderbufferEXT(texture, target, renderbuffer);
}
PFNGLTEXTURERENDERBUFFEREXTPROC glad_glTextureRenderbufferEXT = glad_on_demand_impl_glTextureRenderbufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) {
    glad_glTextureStorage1D = (PFNGLTEXTURESTORAGE1DPROC) glad_gl_on_demand_loader("glTextureStorage1D");
    glad_glTextureStorage1D(texture, levels, internalformat, width);
}
PFNGLTEXTURESTORAGE1DPROC glad_glTextureStorage1D = glad_on_demand_impl_glTextureStorage1D;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
    glad_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC) glad_gl_on_demand_loader("glTextureStorage1DEXT");
    glad_glTextureStorage1DEXT(texture, target, levels, internalformat, width);
}
PFNGLTEXTURESTORAGE1DEXTPROC glad_glTextureStorage1DEXT = glad_on_demand_impl_glTextureStorage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glTextureStorage2D = (PFNGLTEXTURESTORAGE2DPROC) glad_gl_on_demand_loader("glTextureStorage2D");
    glad_glTextureStorage2D(texture, levels, internalformat, width, height);
}
PFNGLTEXTURESTORAGE2DPROC glad_glTextureStorage2D = glad_on_demand_impl_glTextureStorage2D;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
    glad_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC) glad_gl_on_demand_loader("glTextureStorage2DEXT");
    glad_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
}
PFNGLTEXTURESTORAGE2DEXTPROC glad_glTextureStorage2DEXT = glad_on_demand_impl_glTextureStorage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTextureStorage2DMultisample = (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) glad_gl_on_demand_loader("glTextureStorage2DMultisample");
    glad_glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC glad_glTextureStorage2DMultisample = glad_on_demand_impl_glTextureStorage2DMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
    glad_glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) glad_gl_on_demand_loader("glTextureStorage2DMultisampleEXT");
    glad_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glad_glTextureStorage2DMultisampleEXT = glad_on_demand_impl_glTextureStorage2DMultisampleEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glTextureStorage3D = (PFNGLTEXTURESTORAGE3DPROC) glad_gl_on_demand_loader("glTextureStorage3D");
    glad_glTextureStorage3D(texture, levels, internalformat, width, height, depth);
}
PFNGLTEXTURESTORAGE3DPROC glad_glTextureStorage3D = glad_on_demand_impl_glTextureStorage3D;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
    glad_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC) glad_gl_on_demand_loader("glTextureStorage3DEXT");
    glad_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
}
PFNGLTEXTURESTORAGE3DEXTPROC glad_glTextureStorage3DEXT = glad_on_demand_impl_glTextureStorage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTextureStorage3DMultisample = (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) glad_gl_on_demand_loader("glTextureStorage3DMultisample");
    glad_glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC glad_glTextureStorage3DMultisample = glad_on_demand_impl_glTextureStorage3DMultisample;
static void GLAD_API_PTR glad_on_demand_impl_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
    glad_glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) glad_gl_on_demand_loader("glTextureStorage3DMultisampleEXT");
    glad_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glad_glTextureStorage3DMultisampleEXT = glad_on_demand_impl_glTextureStorage3DMultisampleEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureSubImage1D = (PFNGLTEXTURESUBIMAGE1DPROC) glad_gl_on_demand_loader("glTextureSubImage1D");
    glad_glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
}
PFNGLTEXTURESUBIMAGE1DPROC glad_glTextureSubImage1D = glad_on_demand_impl_glTextureSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC) glad_gl_on_demand_loader("glTextureSubImage1DEXT");
    glad_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
}
PFNGLTEXTURESUBIMAGE1DEXTPROC glad_glTextureSubImage1DEXT = glad_on_demand_impl_glTextureSubImage1DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureSubImage2D = (PFNGLTEXTURESUBIMAGE2DPROC) glad_gl_on_demand_loader("glTextureSubImage2D");
    glad_glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLTEXTURESUBIMAGE2DPROC glad_glTextureSubImage2D = glad_on_demand_impl_glTextureSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC) glad_gl_on_demand_loader("glTextureSubImage2DEXT");
    glad_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLTEXTURESUBIMAGE2DEXTPROC glad_glTextureSubImage2DEXT = glad_on_demand_impl_glTextureSubImage2DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureSubImage3D = (PFNGLTEXTURESUBIMAGE3DPROC) glad_gl_on_demand_loader("glTextureSubImage3D");
    glad_glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
PFNGLTEXTURESUBIMAGE3DPROC glad_glTextureSubImage3D = glad_on_demand_impl_glTextureSubImage3D;
static void GLAD_API_PTR glad_on_demand_impl_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
    glad_glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC) glad_gl_on_demand_loader("glTextureSubImage3DEXT");
    glad_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
PFNGLTEXTURESUBIMAGE3DEXTPROC glad_glTextureSubImage3DEXT = glad_on_demand_impl_glTextureSubImage3DEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
    glad_glTextureView = (PFNGLTEXTUREVIEWPROC) glad_gl_on_demand_loader("glTextureView");
    glad_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
PFNGLTEXTUREVIEWPROC glad_glTextureView = glad_on_demand_impl_glTextureView;
static void GLAD_API_PTR glad_on_demand_impl_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) {
    glad_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC) glad_gl_on_demand_loader("glTrackMatrixNV");
    glad_glTrackMatrixNV(target, address, matrix, transform);
}
PFNGLTRACKMATRIXNVPROC glad_glTrackMatrixNV = glad_on_demand_impl_glTrackMatrixNV;
static void GLAD_API_PTR glad_on_demand_impl_glTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) {
    glad_glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) glad_gl_on_demand_loader("glTransformFeedbackAttribsNV");
    glad_glTransformFeedbackAttribsNV(count, attribs, bufferMode);
}
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glad_glTransformFeedbackAttribsNV = glad_on_demand_impl_glTransformFeedbackAttribsNV;
static void GLAD_API_PTR glad_on_demand_impl_glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) {
    glad_glTransformFeedbackBufferBase = (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) glad_gl_on_demand_loader("glTransformFeedbackBufferBase");
    glad_glTransformFeedbackBufferBase(xfb, index, buffer);
}
PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC glad_glTransformFeedbackBufferBase = glad_on_demand_impl_glTransformFeedbackBufferBase;
static void GLAD_API_PTR glad_on_demand_impl_glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
    glad_glTransformFeedbackBufferRange = (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) glad_gl_on_demand_loader("glTransformFeedbackBufferRange");
    glad_glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
}
PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC glad_glTransformFeedbackBufferRange = glad_on_demand_impl_glTransformFeedbackBufferRange;
static void GLAD_API_PTR glad_on_demand_impl_glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) {
    glad_glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) glad_gl_on_demand_loader("glTransformFeedbackStreamAttribsNV");
    glad_glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
}
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glad_glTransformFeedbackStreamAttribsNV = glad_on_demand_impl_glTransformFeedbackStreamAttribsNV;
static void GLAD_API_PTR glad_on_demand_impl_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
    glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC) glad_gl_on_demand_loader("glTransformFeedbackVaryings");
    glad_glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings = glad_on_demand_impl_glTransformFeedbackVaryings;
static void GLAD_API_PTR glad_on_demand_impl_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) {
    glad_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) glad_gl_on_demand_loader("glTransformFeedbackVaryingsEXT");
    glad_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
}
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glad_glTransformFeedbackVaryingsEXT = glad_on_demand_impl_glTransformFeedbackVaryingsEXT;
static void GLAD_API_PTR glad_on_demand_impl_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) {
    glad_glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) glad_gl_on_demand_loader("glTransformFeedbackVaryingsNV");
    glad_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
}
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glad_glTransformFeedbackVaryingsNV = glad_on_demand_impl_glTransformFeedbackVaryingsNV;
static void GLAD_API_PTR glad_on_demand_impl_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
    glad_glTranslated = (PFNGLTRANSLATEDPROC) glad_gl_on_demand_loader("glTranslated");
    glad_glTranslated(x, y, z);
}
PFNGLTRANSLATEDPROC glad_glTranslated = glad_on_demand_impl_glTranslated;
static void GLAD_API_PTR glad_on_demand_impl_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
    glad_glTranslatef = (PFNGLTRANSLATEFPROC) glad_gl_on_demand_loader("glTranslatef");
    glad_glTranslatef(x, y, z);
}
PFNGLTRANSLATEFPROC glad_glTranslatef = glad_on_demand_impl_glTranslatef;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1d(GLint location, GLdouble x) {
    glad_glUniform1d = (PFNGLUNIFORM1DPROC) glad_gl_on_demand_loader("glUniform1d");
    glad_glUniform1d(location, x);
}
PFNGLUNIFORM1DPROC glad_glUniform1d = glad_on_demand_impl_glUniform1d;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1dv(GLint location, GLsizei count, const GLdouble * value) {
    glad_glUniform1dv = (PFNGLUNIFORM1DVPROC) glad_gl_on_demand_loader("glUniform1dv");
    glad_glUniform1dv(location, count, value);
}
PFNGLUNIFORM1DVPROC glad_glUniform1dv = glad_on_demand_impl_glUniform1dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1f(GLint location, GLfloat v0) {
    glad_glUniform1f = (PFNGLUNIFORM1FPROC) glad_gl_on_demand_loader("glUniform1f");
    glad_glUniform1f(location, v0);
}
PFNGLUNIFORM1FPROC glad_glUniform1f = glad_on_demand_impl_glUniform1f;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1fARB(GLint location, GLfloat v0) {
    glad_glUniform1fARB = (PFNGLUNIFORM1FARBPROC) glad_gl_on_demand_loader("glUniform1fARB");
    glad_glUniform1fARB(location, v0);
}
PFNGLUNIFORM1FARBPROC glad_glUniform1fARB = glad_on_demand_impl_glUniform1fARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1fv(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform1fv = (PFNGLUNIFORM1FVPROC) glad_gl_on_demand_loader("glUniform1fv");
    glad_glUniform1fv(location, count, value);
}
PFNGLUNIFORM1FVPROC glad_glUniform1fv = glad_on_demand_impl_glUniform1fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC) glad_gl_on_demand_loader("glUniform1fvARB");
    glad_glUniform1fvARB(location, count, value);
}
PFNGLUNIFORM1FVARBPROC glad_glUniform1fvARB = glad_on_demand_impl_glUniform1fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1i(GLint location, GLint v0) {
    glad_glUniform1i = (PFNGLUNIFORM1IPROC) glad_gl_on_demand_loader("glUniform1i");
    glad_glUniform1i(location, v0);
}
PFNGLUNIFORM1IPROC glad_glUniform1i = glad_on_demand_impl_glUniform1i;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1iARB(GLint location, GLint v0) {
    glad_glUniform1iARB = (PFNGLUNIFORM1IARBPROC) glad_gl_on_demand_loader("glUniform1iARB");
    glad_glUniform1iARB(location, v0);
}
PFNGLUNIFORM1IARBPROC glad_glUniform1iARB = glad_on_demand_impl_glUniform1iARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1iv(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform1iv = (PFNGLUNIFORM1IVPROC) glad_gl_on_demand_loader("glUniform1iv");
    glad_glUniform1iv(location, count, value);
}
PFNGLUNIFORM1IVPROC glad_glUniform1iv = glad_on_demand_impl_glUniform1iv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1ivARB(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC) glad_gl_on_demand_loader("glUniform1ivARB");
    glad_glUniform1ivARB(location, count, value);
}
PFNGLUNIFORM1IVARBPROC glad_glUniform1ivARB = glad_on_demand_impl_glUniform1ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1ui(GLint location, GLuint v0) {
    glad_glUniform1ui = (PFNGLUNIFORM1UIPROC) glad_gl_on_demand_loader("glUniform1ui");
    glad_glUniform1ui(location, v0);
}
PFNGLUNIFORM1UIPROC glad_glUniform1ui = glad_on_demand_impl_glUniform1ui;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1uiEXT(GLint location, GLuint v0) {
    glad_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC) glad_gl_on_demand_loader("glUniform1uiEXT");
    glad_glUniform1uiEXT(location, v0);
}
PFNGLUNIFORM1UIEXTPROC glad_glUniform1uiEXT = glad_on_demand_impl_glUniform1uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1uiv(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC) glad_gl_on_demand_loader("glUniform1uiv");
    glad_glUniform1uiv(location, count, value);
}
PFNGLUNIFORM1UIVPROC glad_glUniform1uiv = glad_on_demand_impl_glUniform1uiv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC) glad_gl_on_demand_loader("glUniform1uivEXT");
    glad_glUniform1uivEXT(location, count, value);
}
PFNGLUNIFORM1UIVEXTPROC glad_glUniform1uivEXT = glad_on_demand_impl_glUniform1uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2d(GLint location, GLdouble x, GLdouble y) {
    glad_glUniform2d = (PFNGLUNIFORM2DPROC) glad_gl_on_demand_loader("glUniform2d");
    glad_glUniform2d(location, x, y);
}
PFNGLUNIFORM2DPROC glad_glUniform2d = glad_on_demand_impl_glUniform2d;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2dv(GLint location, GLsizei count, const GLdouble * value) {
    glad_glUniform2dv = (PFNGLUNIFORM2DVPROC) glad_gl_on_demand_loader("glUniform2dv");
    glad_glUniform2dv(location, count, value);
}
PFNGLUNIFORM2DVPROC glad_glUniform2dv = glad_on_demand_impl_glUniform2dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
    glad_glUniform2f = (PFNGLUNIFORM2FPROC) glad_gl_on_demand_loader("glUniform2f");
    glad_glUniform2f(location, v0, v1);
}
PFNGLUNIFORM2FPROC glad_glUniform2f = glad_on_demand_impl_glUniform2f;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1) {
    glad_glUniform2fARB = (PFNGLUNIFORM2FARBPROC) glad_gl_on_demand_loader("glUniform2fARB");
    glad_glUniform2fARB(location, v0, v1);
}
PFNGLUNIFORM2FARBPROC glad_glUniform2fARB = glad_on_demand_impl_glUniform2fARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2fv(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform2fv = (PFNGLUNIFORM2FVPROC) glad_gl_on_demand_loader("glUniform2fv");
    glad_glUniform2fv(location, count, value);
}
PFNGLUNIFORM2FVPROC glad_glUniform2fv = glad_on_demand_impl_glUniform2fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC) glad_gl_on_demand_loader("glUniform2fvARB");
    glad_glUniform2fvARB(location, count, value);
}
PFNGLUNIFORM2FVARBPROC glad_glUniform2fvARB = glad_on_demand_impl_glUniform2fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2i(GLint location, GLint v0, GLint v1) {
    glad_glUniform2i = (PFNGLUNIFORM2IPROC) glad_gl_on_demand_loader("glUniform2i");
    glad_glUniform2i(location, v0, v1);
}
PFNGLUNIFORM2IPROC glad_glUniform2i = glad_on_demand_impl_glUniform2i;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2iARB(GLint location, GLint v0, GLint v1) {
    glad_glUniform2iARB = (PFNGLUNIFORM2IARBPROC) glad_gl_on_demand_loader("glUniform2iARB");
    glad_glUniform2iARB(location, v0, v1);
}
PFNGLUNIFORM2IARBPROC glad_glUniform2iARB = glad_on_demand_impl_glUniform2iARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2iv(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform2iv = (PFNGLUNIFORM2IVPROC) glad_gl_on_demand_loader("glUniform2iv");
    glad_glUniform2iv(location, count, value);
}
PFNGLUNIFORM2IVPROC glad_glUniform2iv = glad_on_demand_impl_glUniform2iv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2ivARB(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC) glad_gl_on_demand_loader("glUniform2ivARB");
    glad_glUniform2ivARB(location, count, value);
}
PFNGLUNIFORM2IVARBPROC glad_glUniform2ivARB = glad_on_demand_impl_glUniform2ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2ui(GLint location, GLuint v0, GLuint v1) {
    glad_glUniform2ui = (PFNGLUNIFORM2UIPROC) glad_gl_on_demand_loader("glUniform2ui");
    glad_glUniform2ui(location, v0, v1);
}
PFNGLUNIFORM2UIPROC glad_glUniform2ui = glad_on_demand_impl_glUniform2ui;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1) {
    glad_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC) glad_gl_on_demand_loader("glUniform2uiEXT");
    glad_glUniform2uiEXT(location, v0, v1);
}
PFNGLUNIFORM2UIEXTPROC glad_glUniform2uiEXT = glad_on_demand_impl_glUniform2uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2uiv(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC) glad_gl_on_demand_loader("glUniform2uiv");
    glad_glUniform2uiv(location, count, value);
}
PFNGLUNIFORM2UIVPROC glad_glUniform2uiv = glad_on_demand_impl_glUniform2uiv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC) glad_gl_on_demand_loader("glUniform2uivEXT");
    glad_glUniform2uivEXT(location, count, value);
}
PFNGLUNIFORM2UIVEXTPROC glad_glUniform2uivEXT = glad_on_demand_impl_glUniform2uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
    glad_glUniform3d = (PFNGLUNIFORM3DPROC) glad_gl_on_demand_loader("glUniform3d");
    glad_glUniform3d(location, x, y, z);
}
PFNGLUNIFORM3DPROC glad_glUniform3d = glad_on_demand_impl_glUniform3d;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3dv(GLint location, GLsizei count, const GLdouble * value) {
    glad_glUniform3dv = (PFNGLUNIFORM3DVPROC) glad_gl_on_demand_loader("glUniform3dv");
    glad_glUniform3dv(location, count, value);
}
PFNGLUNIFORM3DVPROC glad_glUniform3dv = glad_on_demand_impl_glUniform3dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glUniform3f = (PFNGLUNIFORM3FPROC) glad_gl_on_demand_loader("glUniform3f");
    glad_glUniform3f(location, v0, v1, v2);
}
PFNGLUNIFORM3FPROC glad_glUniform3f = glad_on_demand_impl_glUniform3f;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
    glad_glUniform3fARB = (PFNGLUNIFORM3FARBPROC) glad_gl_on_demand_loader("glUniform3fARB");
    glad_glUniform3fARB(location, v0, v1, v2);
}
PFNGLUNIFORM3FARBPROC glad_glUniform3fARB = glad_on_demand_impl_glUniform3fARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3fv(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform3fv = (PFNGLUNIFORM3FVPROC) glad_gl_on_demand_loader("glUniform3fv");
    glad_glUniform3fv(location, count, value);
}
PFNGLUNIFORM3FVPROC glad_glUniform3fv = glad_on_demand_impl_glUniform3fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC) glad_gl_on_demand_loader("glUniform3fvARB");
    glad_glUniform3fvARB(location, count, value);
}
PFNGLUNIFORM3FVARBPROC glad_glUniform3fvARB = glad_on_demand_impl_glUniform3fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glUniform3i = (PFNGLUNIFORM3IPROC) glad_gl_on_demand_loader("glUniform3i");
    glad_glUniform3i(location, v0, v1, v2);
}
PFNGLUNIFORM3IPROC glad_glUniform3i = glad_on_demand_impl_glUniform3i;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) {
    glad_glUniform3iARB = (PFNGLUNIFORM3IARBPROC) glad_gl_on_demand_loader("glUniform3iARB");
    glad_glUniform3iARB(location, v0, v1, v2);
}
PFNGLUNIFORM3IARBPROC glad_glUniform3iARB = glad_on_demand_impl_glUniform3iARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3iv(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform3iv = (PFNGLUNIFORM3IVPROC) glad_gl_on_demand_loader("glUniform3iv");
    glad_glUniform3iv(location, count, value);
}
PFNGLUNIFORM3IVPROC glad_glUniform3iv = glad_on_demand_impl_glUniform3iv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3ivARB(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC) glad_gl_on_demand_loader("glUniform3ivARB");
    glad_glUniform3ivARB(location, count, value);
}
PFNGLUNIFORM3IVARBPROC glad_glUniform3ivARB = glad_on_demand_impl_glUniform3ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glUniform3ui = (PFNGLUNIFORM3UIPROC) glad_gl_on_demand_loader("glUniform3ui");
    glad_glUniform3ui(location, v0, v1, v2);
}
PFNGLUNIFORM3UIPROC glad_glUniform3ui = glad_on_demand_impl_glUniform3ui;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) {
    glad_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC) glad_gl_on_demand_loader("glUniform3uiEXT");
    glad_glUniform3uiEXT(location, v0, v1, v2);
}
PFNGLUNIFORM3UIEXTPROC glad_glUniform3uiEXT = glad_on_demand_impl_glUniform3uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3uiv(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC) glad_gl_on_demand_loader("glUniform3uiv");
    glad_glUniform3uiv(location, count, value);
}
PFNGLUNIFORM3UIVPROC glad_glUniform3uiv = glad_on_demand_impl_glUniform3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC) glad_gl_on_demand_loader("glUniform3uivEXT");
    glad_glUniform3uivEXT(location, count, value);
}
PFNGLUNIFORM3UIVEXTPROC glad_glUniform3uivEXT = glad_on_demand_impl_glUniform3uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glUniform4d = (PFNGLUNIFORM4DPROC) glad_gl_on_demand_loader("glUniform4d");
    glad_glUniform4d(location, x, y, z, w);
}
PFNGLUNIFORM4DPROC glad_glUniform4d = glad_on_demand_impl_glUniform4d;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4dv(GLint location, GLsizei count, const GLdouble * value) {
    glad_glUniform4dv = (PFNGLUNIFORM4DVPROC) glad_gl_on_demand_loader("glUniform4dv");
    glad_glUniform4dv(location, count, value);
}
PFNGLUNIFORM4DVPROC glad_glUniform4dv = glad_on_demand_impl_glUniform4dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glUniform4f = (PFNGLUNIFORM4FPROC) glad_gl_on_demand_loader("glUniform4f");
    glad_glUniform4f(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4FPROC glad_glUniform4f = glad_on_demand_impl_glUniform4f;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
    glad_glUniform4fARB = (PFNGLUNIFORM4FARBPROC) glad_gl_on_demand_loader("glUniform4fARB");
    glad_glUniform4fARB(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4FARBPROC glad_glUniform4fARB = glad_on_demand_impl_glUniform4fARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4fv(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform4fv = (PFNGLUNIFORM4FVPROC) glad_gl_on_demand_loader("glUniform4fv");
    glad_glUniform4fv(location, count, value);
}
PFNGLUNIFORM4FVPROC glad_glUniform4fv = glad_on_demand_impl_glUniform4fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) {
    glad_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC) glad_gl_on_demand_loader("glUniform4fvARB");
    glad_glUniform4fvARB(location, count, value);
}
PFNGLUNIFORM4FVARBPROC glad_glUniform4fvARB = glad_on_demand_impl_glUniform4fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glUniform4i = (PFNGLUNIFORM4IPROC) glad_gl_on_demand_loader("glUniform4i");
    glad_glUniform4i(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4IPROC glad_glUniform4i = glad_on_demand_impl_glUniform4i;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
    glad_glUniform4iARB = (PFNGLUNIFORM4IARBPROC) glad_gl_on_demand_loader("glUniform4iARB");
    glad_glUniform4iARB(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4IARBPROC glad_glUniform4iARB = glad_on_demand_impl_glUniform4iARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4iv(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform4iv = (PFNGLUNIFORM4IVPROC) glad_gl_on_demand_loader("glUniform4iv");
    glad_glUniform4iv(location, count, value);
}
PFNGLUNIFORM4IVPROC glad_glUniform4iv = glad_on_demand_impl_glUniform4iv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4ivARB(GLint location, GLsizei count, const GLint * value) {
    glad_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC) glad_gl_on_demand_loader("glUniform4ivARB");
    glad_glUniform4ivARB(location, count, value);
}
PFNGLUNIFORM4IVARBPROC glad_glUniform4ivARB = glad_on_demand_impl_glUniform4ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glUniform4ui = (PFNGLUNIFORM4UIPROC) glad_gl_on_demand_loader("glUniform4ui");
    glad_glUniform4ui(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4UIPROC glad_glUniform4ui = glad_on_demand_impl_glUniform4ui;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
    glad_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC) glad_gl_on_demand_loader("glUniform4uiEXT");
    glad_glUniform4uiEXT(location, v0, v1, v2, v3);
}
PFNGLUNIFORM4UIEXTPROC glad_glUniform4uiEXT = glad_on_demand_impl_glUniform4uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4uiv(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC) glad_gl_on_demand_loader("glUniform4uiv");
    glad_glUniform4uiv(location, count, value);
}
PFNGLUNIFORM4UIVPROC glad_glUniform4uiv = glad_on_demand_impl_glUniform4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) {
    glad_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC) glad_gl_on_demand_loader("glUniform4uivEXT");
    glad_glUniform4uivEXT(location, count, value);
}
PFNGLUNIFORM4UIVEXTPROC glad_glUniform4uivEXT = glad_on_demand_impl_glUniform4uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
    glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC) glad_gl_on_demand_loader("glUniformBlockBinding");
    glad_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}
PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding = glad_on_demand_impl_glUniformBlockBinding;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC) glad_gl_on_demand_loader("glUniformMatrix2dv");
    glad_glUniformMatrix2dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv = glad_on_demand_impl_glUniformMatrix2dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC) glad_gl_on_demand_loader("glUniformMatrix2fv");
    glad_glUniformMatrix2fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv = glad_on_demand_impl_glUniformMatrix2fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC) glad_gl_on_demand_loader("glUniformMatrix2fvARB");
    glad_glUniformMatrix2fvARB(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2FVARBPROC glad_glUniformMatrix2fvARB = glad_on_demand_impl_glUniformMatrix2fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC) glad_gl_on_demand_loader("glUniformMatrix2x3dv");
    glad_glUniformMatrix2x3dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv = glad_on_demand_impl_glUniformMatrix2x3dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC) glad_gl_on_demand_loader("glUniformMatrix2x3fv");
    glad_glUniformMatrix2x3fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv = glad_on_demand_impl_glUniformMatrix2x3fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC) glad_gl_on_demand_loader("glUniformMatrix2x4dv");
    glad_glUniformMatrix2x4dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv = glad_on_demand_impl_glUniformMatrix2x4dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC) glad_gl_on_demand_loader("glUniformMatrix2x4fv");
    glad_glUniformMatrix2x4fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv = glad_on_demand_impl_glUniformMatrix2x4fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC) glad_gl_on_demand_loader("glUniformMatrix3dv");
    glad_glUniformMatrix3dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv = glad_on_demand_impl_glUniformMatrix3dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC) glad_gl_on_demand_loader("glUniformMatrix3fv");
    glad_glUniformMatrix3fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv = glad_on_demand_impl_glUniformMatrix3fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC) glad_gl_on_demand_loader("glUniformMatrix3fvARB");
    glad_glUniformMatrix3fvARB(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3FVARBPROC glad_glUniformMatrix3fvARB = glad_on_demand_impl_glUniformMatrix3fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC) glad_gl_on_demand_loader("glUniformMatrix3x2dv");
    glad_glUniformMatrix3x2dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv = glad_on_demand_impl_glUniformMatrix3x2dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC) glad_gl_on_demand_loader("glUniformMatrix3x2fv");
    glad_glUniformMatrix3x2fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv = glad_on_demand_impl_glUniformMatrix3x2fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC) glad_gl_on_demand_loader("glUniformMatrix3x4dv");
    glad_glUniformMatrix3x4dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv = glad_on_demand_impl_glUniformMatrix3x4dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC) glad_gl_on_demand_loader("glUniformMatrix3x4fv");
    glad_glUniformMatrix3x4fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv = glad_on_demand_impl_glUniformMatrix3x4fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC) glad_gl_on_demand_loader("glUniformMatrix4dv");
    glad_glUniformMatrix4dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv = glad_on_demand_impl_glUniformMatrix4dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC) glad_gl_on_demand_loader("glUniformMatrix4fv");
    glad_glUniformMatrix4fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv = glad_on_demand_impl_glUniformMatrix4fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC) glad_gl_on_demand_loader("glUniformMatrix4fvARB");
    glad_glUniformMatrix4fvARB(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4FVARBPROC glad_glUniformMatrix4fvARB = glad_on_demand_impl_glUniformMatrix4fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC) glad_gl_on_demand_loader("glUniformMatrix4x2dv");
    glad_glUniformMatrix4x2dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv = glad_on_demand_impl_glUniformMatrix4x2dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC) glad_gl_on_demand_loader("glUniformMatrix4x2fv");
    glad_glUniformMatrix4x2fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv = glad_on_demand_impl_glUniformMatrix4x2fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) {
    glad_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC) glad_gl_on_demand_loader("glUniformMatrix4x3dv");
    glad_glUniformMatrix4x3dv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv = glad_on_demand_impl_glUniformMatrix4x3dv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
    glad_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC) glad_gl_on_demand_loader("glUniformMatrix4x3fv");
    glad_glUniformMatrix4x3fv(location, count, transpose, value);
}
PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv = glad_on_demand_impl_glUniformMatrix4x3fv;
static void GLAD_API_PTR glad_on_demand_impl_glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) {
    glad_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC) glad_gl_on_demand_loader("glUniformSubroutinesuiv");
    glad_glUniformSubroutinesuiv(shadertype, count, indices);
}
PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv = glad_on_demand_impl_glUniformSubroutinesuiv;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glUnmapBuffer(GLenum target) {
    glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC) glad_gl_on_demand_loader("glUnmapBuffer");
    return glad_glUnmapBuffer(target);
}
PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer = glad_on_demand_impl_glUnmapBuffer;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glUnmapBufferARB(GLenum target) {
    glad_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC) glad_gl_on_demand_loader("glUnmapBufferARB");
    return glad_glUnmapBufferARB(target);
}
PFNGLUNMAPBUFFERARBPROC glad_glUnmapBufferARB = glad_on_demand_impl_glUnmapBufferARB;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glUnmapNamedBuffer(GLuint buffer) {
    glad_glUnmapNamedBuffer = (PFNGLUNMAPNAMEDBUFFERPROC) glad_gl_on_demand_loader("glUnmapNamedBuffer");
    return glad_glUnmapNamedBuffer(buffer);
}
PFNGLUNMAPNAMEDBUFFERPROC glad_glUnmapNamedBuffer = glad_on_demand_impl_glUnmapNamedBuffer;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glUnmapNamedBufferEXT(GLuint buffer) {
    glad_glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC) glad_gl_on_demand_loader("glUnmapNamedBufferEXT");
    return glad_glUnmapNamedBufferEXT(buffer);
}
PFNGLUNMAPNAMEDBUFFEREXTPROC glad_glUnmapNamedBufferEXT = glad_on_demand_impl_glUnmapNamedBufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glUseProgram(GLuint program) {
    glad_glUseProgram = (PFNGLUSEPROGRAMPROC) glad_gl_on_demand_loader("glUseProgram");
    glad_glUseProgram(program);
}
PFNGLUSEPROGRAMPROC glad_glUseProgram = glad_on_demand_impl_glUseProgram;
static void GLAD_API_PTR glad_on_demand_impl_glUseProgramObjectARB(GLhandleARB programObj) {
    glad_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC) glad_gl_on_demand_loader("glUseProgramObjectARB");
    glad_glUseProgramObjectARB(programObj);
}
PFNGLUSEPROGRAMOBJECTARBPROC glad_glUseProgramObjectARB = glad_on_demand_impl_glUseProgramObjectARB;
static void GLAD_API_PTR glad_on_demand_impl_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
    glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC) glad_gl_on_demand_loader("glUseProgramStages");
    glad_glUseProgramStages(pipeline, stages, program);
}
PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages = glad_on_demand_impl_glUseProgramStages;
static void GLAD_API_PTR glad_on_demand_impl_glValidateProgram(GLuint program) {
    glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC) glad_gl_on_demand_loader("glValidateProgram");
    glad_glValidateProgram(program);
}
PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram = glad_on_demand_impl_glValidateProgram;
static void GLAD_API_PTR glad_on_demand_impl_glValidateProgramARB(GLhandleARB programObj) {
    glad_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC) glad_gl_on_demand_loader("glValidateProgramARB");
    glad_glValidateProgramARB(programObj);
}
PFNGLVALIDATEPROGRAMARBPROC glad_glValidateProgramARB = glad_on_demand_impl_glValidateProgramARB;
static void GLAD_API_PTR glad_on_demand_impl_glValidateProgramPipeline(GLuint pipeline) {
    glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC) glad_gl_on_demand_loader("glValidateProgramPipeline");
    glad_glValidateProgramPipeline(pipeline);
}
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline = glad_on_demand_impl_glValidateProgramPipeline;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2d(GLdouble x, GLdouble y) {
    glad_glVertex2d = (PFNGLVERTEX2DPROC) glad_gl_on_demand_loader("glVertex2d");
    glad_glVertex2d(x, y);
}
PFNGLVERTEX2DPROC glad_glVertex2d = glad_on_demand_impl_glVertex2d;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2dv(const GLdouble * v) {
    glad_glVertex2dv = (PFNGLVERTEX2DVPROC) glad_gl_on_demand_loader("glVertex2dv");
    glad_glVertex2dv(v);
}
PFNGLVERTEX2DVPROC glad_glVertex2dv = glad_on_demand_impl_glVertex2dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2f(GLfloat x, GLfloat y) {
    glad_glVertex2f = (PFNGLVERTEX2FPROC) glad_gl_on_demand_loader("glVertex2f");
    glad_glVertex2f(x, y);
}
PFNGLVERTEX2FPROC glad_glVertex2f = glad_on_demand_impl_glVertex2f;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2fv(const GLfloat * v) {
    glad_glVertex2fv = (PFNGLVERTEX2FVPROC) glad_gl_on_demand_loader("glVertex2fv");
    glad_glVertex2fv(v);
}
PFNGLVERTEX2FVPROC glad_glVertex2fv = glad_on_demand_impl_glVertex2fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2i(GLint x, GLint y) {
    glad_glVertex2i = (PFNGLVERTEX2IPROC) glad_gl_on_demand_loader("glVertex2i");
    glad_glVertex2i(x, y);
}
PFNGLVERTEX2IPROC glad_glVertex2i = glad_on_demand_impl_glVertex2i;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2iv(const GLint * v) {
    glad_glVertex2iv = (PFNGLVERTEX2IVPROC) glad_gl_on_demand_loader("glVertex2iv");
    glad_glVertex2iv(v);
}
PFNGLVERTEX2IVPROC glad_glVertex2iv = glad_on_demand_impl_glVertex2iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2s(GLshort x, GLshort y) {
    glad_glVertex2s = (PFNGLVERTEX2SPROC) glad_gl_on_demand_loader("glVertex2s");
    glad_glVertex2s(x, y);
}
PFNGLVERTEX2SPROC glad_glVertex2s = glad_on_demand_impl_glVertex2s;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2sv(const GLshort * v) {
    glad_glVertex2sv = (PFNGLVERTEX2SVPROC) glad_gl_on_demand_loader("glVertex2sv");
    glad_glVertex2sv(v);
}
PFNGLVERTEX2SVPROC glad_glVertex2sv = glad_on_demand_impl_glVertex2sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertex3d = (PFNGLVERTEX3DPROC) glad_gl_on_demand_loader("glVertex3d");
    glad_glVertex3d(x, y, z);
}
PFNGLVERTEX3DPROC glad_glVertex3d = glad_on_demand_impl_glVertex3d;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3dv(const GLdouble * v) {
    glad_glVertex3dv = (PFNGLVERTEX3DVPROC) glad_gl_on_demand_loader("glVertex3dv");
    glad_glVertex3dv(v);
}
PFNGLVERTEX3DVPROC glad_glVertex3dv = glad_on_demand_impl_glVertex3dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertex3f = (PFNGLVERTEX3FPROC) glad_gl_on_demand_loader("glVertex3f");
    glad_glVertex3f(x, y, z);
}
PFNGLVERTEX3FPROC glad_glVertex3f = glad_on_demand_impl_glVertex3f;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3fv(const GLfloat * v) {
    glad_glVertex3fv = (PFNGLVERTEX3FVPROC) glad_gl_on_demand_loader("glVertex3fv");
    glad_glVertex3fv(v);
}
PFNGLVERTEX3FVPROC glad_glVertex3fv = glad_on_demand_impl_glVertex3fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3i(GLint x, GLint y, GLint z) {
    glad_glVertex3i = (PFNGLVERTEX3IPROC) glad_gl_on_demand_loader("glVertex3i");
    glad_glVertex3i(x, y, z);
}
PFNGLVERTEX3IPROC glad_glVertex3i = glad_on_demand_impl_glVertex3i;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3iv(const GLint * v) {
    glad_glVertex3iv = (PFNGLVERTEX3IVPROC) glad_gl_on_demand_loader("glVertex3iv");
    glad_glVertex3iv(v);
}
PFNGLVERTEX3IVPROC glad_glVertex3iv = glad_on_demand_impl_glVertex3iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3s(GLshort x, GLshort y, GLshort z) {
    glad_glVertex3s = (PFNGLVERTEX3SPROC) glad_gl_on_demand_loader("glVertex3s");
    glad_glVertex3s(x, y, z);
}
PFNGLVERTEX3SPROC glad_glVertex3s = glad_on_demand_impl_glVertex3s;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3sv(const GLshort * v) {
    glad_glVertex3sv = (PFNGLVERTEX3SVPROC) glad_gl_on_demand_loader("glVertex3sv");
    glad_glVertex3sv(v);
}
PFNGLVERTEX3SVPROC glad_glVertex3sv = glad_on_demand_impl_glVertex3sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertex4d = (PFNGLVERTEX4DPROC) glad_gl_on_demand_loader("glVertex4d");
    glad_glVertex4d(x, y, z, w);
}
PFNGLVERTEX4DPROC glad_glVertex4d = glad_on_demand_impl_glVertex4d;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4dv(const GLdouble * v) {
    glad_glVertex4dv = (PFNGLVERTEX4DVPROC) glad_gl_on_demand_loader("glVertex4dv");
    glad_glVertex4dv(v);
}
PFNGLVERTEX4DVPROC glad_glVertex4dv = glad_on_demand_impl_glVertex4dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertex4f = (PFNGLVERTEX4FPROC) glad_gl_on_demand_loader("glVertex4f");
    glad_glVertex4f(x, y, z, w);
}
PFNGLVERTEX4FPROC glad_glVertex4f = glad_on_demand_impl_glVertex4f;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4fv(const GLfloat * v) {
    glad_glVertex4fv = (PFNGLVERTEX4FVPROC) glad_gl_on_demand_loader("glVertex4fv");
    glad_glVertex4fv(v);
}
PFNGLVERTEX4FVPROC glad_glVertex4fv = glad_on_demand_impl_glVertex4fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
    glad_glVertex4i = (PFNGLVERTEX4IPROC) glad_gl_on_demand_loader("glVertex4i");
    glad_glVertex4i(x, y, z, w);
}
PFNGLVERTEX4IPROC glad_glVertex4i = glad_on_demand_impl_glVertex4i;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4iv(const GLint * v) {
    glad_glVertex4iv = (PFNGLVERTEX4IVPROC) glad_gl_on_demand_loader("glVertex4iv");
    glad_glVertex4iv(v);
}
PFNGLVERTEX4IVPROC glad_glVertex4iv = glad_on_demand_impl_glVertex4iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertex4s = (PFNGLVERTEX4SPROC) glad_gl_on_demand_loader("glVertex4s");
    glad_glVertex4s(x, y, z, w);
}
PFNGLVERTEX4SPROC glad_glVertex4s = glad_on_demand_impl_glVertex4s;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4sv(const GLshort * v) {
    glad_glVertex4sv = (PFNGLVERTEX4SVPROC) glad_gl_on_demand_loader("glVertex4sv");
    glad_glVertex4sv(v);
}
PFNGLVERTEX4SVPROC glad_glVertex4sv = glad_on_demand_impl_glVertex4sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
    glad_glVertexArrayAttribBinding = (PFNGLVERTEXARRAYATTRIBBINDINGPROC) glad_gl_on_demand_loader("glVertexArrayAttribBinding");
    glad_glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
}
PFNGLVERTEXARRAYATTRIBBINDINGPROC glad_glVertexArrayAttribBinding = glad_on_demand_impl_glVertexArrayAttribBinding;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
    glad_glVertexArrayAttribFormat = (PFNGLVERTEXARRAYATTRIBFORMATPROC) glad_gl_on_demand_loader("glVertexArrayAttribFormat");
    glad_glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
}
PFNGLVERTEXARRAYATTRIBFORMATPROC glad_glVertexArrayAttribFormat = glad_on_demand_impl_glVertexArrayAttribFormat;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayAttribIFormat = (PFNGLVERTEXARRAYATTRIBIFORMATPROC) glad_gl_on_demand_loader("glVertexArrayAttribIFormat");
    glad_glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
}
PFNGLVERTEXARRAYATTRIBIFORMATPROC glad_glVertexArrayAttribIFormat = glad_on_demand_impl_glVertexArrayAttribIFormat;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayAttribLFormat = (PFNGLVERTEXARRAYATTRIBLFORMATPROC) glad_gl_on_demand_loader("glVertexArrayAttribLFormat");
    glad_glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
}
PFNGLVERTEXARRAYATTRIBLFORMATPROC glad_glVertexArrayAttribLFormat = glad_on_demand_impl_glVertexArrayAttribLFormat;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
    glad_glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) glad_gl_on_demand_loader("glVertexArrayBindVertexBufferEXT");
    glad_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
}
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glad_glVertexArrayBindVertexBufferEXT = glad_on_demand_impl_glVertexArrayBindVertexBufferEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
    glad_glVertexArrayBindingDivisor = (PFNGLVERTEXARRAYBINDINGDIVISORPROC) glad_gl_on_demand_loader("glVertexArrayBindingDivisor");
    glad_glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
}
PFNGLVERTEXARRAYBINDINGDIVISORPROC glad_glVertexArrayBindingDivisor = glad_on_demand_impl_glVertexArrayBindingDivisor;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayColorOffsetEXT");
    glad_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC glad_glVertexArrayColorOffsetEXT = glad_on_demand_impl_glVertexArrayColorOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayEdgeFlagOffsetEXT");
    glad_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
}
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC glad_glVertexArrayEdgeFlagOffsetEXT = glad_on_demand_impl_glVertexArrayEdgeFlagOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) {
    glad_glVertexArrayElementBuffer = (PFNGLVERTEXARRAYELEMENTBUFFERPROC) glad_gl_on_demand_loader("glVertexArrayElementBuffer");
    glad_glVertexArrayElementBuffer(vaobj, buffer);
}
PFNGLVERTEXARRAYELEMENTBUFFERPROC glad_glVertexArrayElementBuffer = glad_on_demand_impl_glVertexArrayElementBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayFogCoordOffsetEXT");
    glad_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
}
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC glad_glVertexArrayFogCoordOffsetEXT = glad_on_demand_impl_glVertexArrayFogCoordOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayIndexOffsetEXT");
    glad_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
}
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC glad_glVertexArrayIndexOffsetEXT = glad_on_demand_impl_glVertexArrayIndexOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayMultiTexCoordOffsetEXT");
    glad_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
}
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC glad_glVertexArrayMultiTexCoordOffsetEXT = glad_on_demand_impl_glVertexArrayMultiTexCoordOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayNormalOffsetEXT");
    glad_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
}
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC glad_glVertexArrayNormalOffsetEXT = glad_on_demand_impl_glVertexArrayNormalOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArraySecondaryColorOffsetEXT");
    glad_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC glad_glVertexArraySecondaryColorOffsetEXT = glad_on_demand_impl_glVertexArraySecondaryColorOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayTexCoordOffsetEXT");
    glad_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
}
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC glad_glVertexArrayTexCoordOffsetEXT = glad_on_demand_impl_glVertexArrayTexCoordOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) {
    glad_glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribBindingEXT");
    glad_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
}
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glad_glVertexArrayVertexAttribBindingEXT = glad_on_demand_impl_glVertexArrayVertexAttribBindingEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) {
    glad_glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribDivisorEXT");
    glad_glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
}
PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC glad_glVertexArrayVertexAttribDivisorEXT = glad_on_demand_impl_glVertexArrayVertexAttribDivisorEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
    glad_glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribFormatEXT");
    glad_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
}
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glad_glVertexArrayVertexAttribFormatEXT = glad_on_demand_impl_glVertexArrayVertexAttribFormatEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribIFormatEXT");
    glad_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glad_glVertexArrayVertexAttribIFormatEXT = glad_on_demand_impl_glVertexArrayVertexAttribIFormatEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribIOffsetEXT");
    glad_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC glad_glVertexArrayVertexAttribIOffsetEXT = glad_on_demand_impl_glVertexArrayVertexAttribIOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribLFormatEXT");
    glad_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
}
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glad_glVertexArrayVertexAttribLFormatEXT = glad_on_demand_impl_glVertexArrayVertexAttribLFormatEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribLOffsetEXT");
    glad_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glad_glVertexArrayVertexAttribLOffsetEXT = glad_on_demand_impl_glVertexArrayVertexAttribLOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexAttribOffsetEXT");
    glad_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
}
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC glad_glVertexArrayVertexAttribOffsetEXT = glad_on_demand_impl_glVertexArrayVertexAttribOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) {
    glad_glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexBindingDivisorEXT");
    glad_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
}
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glad_glVertexArrayVertexBindingDivisorEXT = glad_on_demand_impl_glVertexArrayVertexBindingDivisorEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
    glad_glVertexArrayVertexBuffer = (PFNGLVERTEXARRAYVERTEXBUFFERPROC) glad_gl_on_demand_loader("glVertexArrayVertexBuffer");
    glad_glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
}
PFNGLVERTEXARRAYVERTEXBUFFERPROC glad_glVertexArrayVertexBuffer = glad_on_demand_impl_glVertexArrayVertexBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
    glad_glVertexArrayVertexBuffers = (PFNGLVERTEXARRAYVERTEXBUFFERSPROC) glad_gl_on_demand_loader("glVertexArrayVertexBuffers");
    glad_glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
}
PFNGLVERTEXARRAYVERTEXBUFFERSPROC glad_glVertexArrayVertexBuffers = glad_on_demand_impl_glVertexArrayVertexBuffers;
static void GLAD_API_PTR glad_on_demand_impl_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
    glad_glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) glad_gl_on_demand_loader("glVertexArrayVertexOffsetEXT");
    glad_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
}
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC glad_glVertexArrayVertexOffsetEXT = glad_on_demand_impl_glVertexArrayVertexOffsetEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1d(GLuint index, GLdouble x) {
    glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC) glad_gl_on_demand_loader("glVertexAttrib1d");
    glad_glVertexAttrib1d(index, x);
}
PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d = glad_on_demand_impl_glVertexAttrib1d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1dARB(GLuint index, GLdouble x) {
    glad_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC) glad_gl_on_demand_loader("glVertexAttrib1dARB");
    glad_glVertexAttrib1dARB(index, x);
}
PFNGLVERTEXATTRIB1DARBPROC glad_glVertexAttrib1dARB = glad_on_demand_impl_glVertexAttrib1dARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1dNV(GLuint index, GLdouble x) {
    glad_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC) glad_gl_on_demand_loader("glVertexAttrib1dNV");
    glad_glVertexAttrib1dNV(index, x);
}
PFNGLVERTEXATTRIB1DNVPROC glad_glVertexAttrib1dNV = glad_on_demand_impl_glVertexAttrib1dNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC) glad_gl_on_demand_loader("glVertexAttrib1dv");
    glad_glVertexAttrib1dv(index, v);
}
PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv = glad_on_demand_impl_glVertexAttrib1dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1dvARB(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC) glad_gl_on_demand_loader("glVertexAttrib1dvARB");
    glad_glVertexAttrib1dvARB(index, v);
}
PFNGLVERTEXATTRIB1DVARBPROC glad_glVertexAttrib1dvARB = glad_on_demand_impl_glVertexAttrib1dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1dvNV(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC) glad_gl_on_demand_loader("glVertexAttrib1dvNV");
    glad_glVertexAttrib1dvNV(index, v);
}
PFNGLVERTEXATTRIB1DVNVPROC glad_glVertexAttrib1dvNV = glad_on_demand_impl_glVertexAttrib1dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1f(GLuint index, GLfloat x) {
    glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC) glad_gl_on_demand_loader("glVertexAttrib1f");
    glad_glVertexAttrib1f(index, x);
}
PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f = glad_on_demand_impl_glVertexAttrib1f;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1fARB(GLuint index, GLfloat x) {
    glad_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC) glad_gl_on_demand_loader("glVertexAttrib1fARB");
    glad_glVertexAttrib1fARB(index, x);
}
PFNGLVERTEXATTRIB1FARBPROC glad_glVertexAttrib1fARB = glad_on_demand_impl_glVertexAttrib1fARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1fNV(GLuint index, GLfloat x) {
    glad_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC) glad_gl_on_demand_loader("glVertexAttrib1fNV");
    glad_glVertexAttrib1fNV(index, x);
}
PFNGLVERTEXATTRIB1FNVPROC glad_glVertexAttrib1fNV = glad_on_demand_impl_glVertexAttrib1fNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1fv(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC) glad_gl_on_demand_loader("glVertexAttrib1fv");
    glad_glVertexAttrib1fv(index, v);
}
PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv = glad_on_demand_impl_glVertexAttrib1fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1fvARB(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC) glad_gl_on_demand_loader("glVertexAttrib1fvARB");
    glad_glVertexAttrib1fvARB(index, v);
}
PFNGLVERTEXATTRIB1FVARBPROC glad_glVertexAttrib1fvARB = glad_on_demand_impl_glVertexAttrib1fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1fvNV(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC) glad_gl_on_demand_loader("glVertexAttrib1fvNV");
    glad_glVertexAttrib1fvNV(index, v);
}
PFNGLVERTEXATTRIB1FVNVPROC glad_glVertexAttrib1fvNV = glad_on_demand_impl_glVertexAttrib1fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1s(GLuint index, GLshort x) {
    glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC) glad_gl_on_demand_loader("glVertexAttrib1s");
    glad_glVertexAttrib1s(index, x);
}
PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s = glad_on_demand_impl_glVertexAttrib1s;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1sARB(GLuint index, GLshort x) {
    glad_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC) glad_gl_on_demand_loader("glVertexAttrib1sARB");
    glad_glVertexAttrib1sARB(index, x);
}
PFNGLVERTEXATTRIB1SARBPROC glad_glVertexAttrib1sARB = glad_on_demand_impl_glVertexAttrib1sARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1sNV(GLuint index, GLshort x) {
    glad_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC) glad_gl_on_demand_loader("glVertexAttrib1sNV");
    glad_glVertexAttrib1sNV(index, x);
}
PFNGLVERTEXATTRIB1SNVPROC glad_glVertexAttrib1sNV = glad_on_demand_impl_glVertexAttrib1sNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1sv(GLuint index, const GLshort * v) {
    glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC) glad_gl_on_demand_loader("glVertexAttrib1sv");
    glad_glVertexAttrib1sv(index, v);
}
PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv = glad_on_demand_impl_glVertexAttrib1sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1svARB(GLuint index, const GLshort * v) {
    glad_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC) glad_gl_on_demand_loader("glVertexAttrib1svARB");
    glad_glVertexAttrib1svARB(index, v);
}
PFNGLVERTEXATTRIB1SVARBPROC glad_glVertexAttrib1svARB = glad_on_demand_impl_glVertexAttrib1svARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib1svNV(GLuint index, const GLshort * v) {
    glad_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC) glad_gl_on_demand_loader("glVertexAttrib1svNV");
    glad_glVertexAttrib1svNV(index, v);
}
PFNGLVERTEXATTRIB1SVNVPROC glad_glVertexAttrib1svNV = glad_on_demand_impl_glVertexAttrib1svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC) glad_gl_on_demand_loader("glVertexAttrib2d");
    glad_glVertexAttrib2d(index, x, y);
}
PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d = glad_on_demand_impl_glVertexAttrib2d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC) glad_gl_on_demand_loader("glVertexAttrib2dARB");
    glad_glVertexAttrib2dARB(index, x, y);
}
PFNGLVERTEXATTRIB2DARBPROC glad_glVertexAttrib2dARB = glad_on_demand_impl_glVertexAttrib2dARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC) glad_gl_on_demand_loader("glVertexAttrib2dNV");
    glad_glVertexAttrib2dNV(index, x, y);
}
PFNGLVERTEXATTRIB2DNVPROC glad_glVertexAttrib2dNV = glad_on_demand_impl_glVertexAttrib2dNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC) glad_gl_on_demand_loader("glVertexAttrib2dv");
    glad_glVertexAttrib2dv(index, v);
}
PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv = glad_on_demand_impl_glVertexAttrib2dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2dvARB(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC) glad_gl_on_demand_loader("glVertexAttrib2dvARB");
    glad_glVertexAttrib2dvARB(index, v);
}
PFNGLVERTEXATTRIB2DVARBPROC glad_glVertexAttrib2dvARB = glad_on_demand_impl_glVertexAttrib2dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2dvNV(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC) glad_gl_on_demand_loader("glVertexAttrib2dvNV");
    glad_glVertexAttrib2dvNV(index, v);
}
PFNGLVERTEXATTRIB2DVNVPROC glad_glVertexAttrib2dvNV = glad_on_demand_impl_glVertexAttrib2dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
    glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC) glad_gl_on_demand_loader("glVertexAttrib2f");
    glad_glVertexAttrib2f(index, x, y);
}
PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f = glad_on_demand_impl_glVertexAttrib2f;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) {
    glad_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC) glad_gl_on_demand_loader("glVertexAttrib2fARB");
    glad_glVertexAttrib2fARB(index, x, y);
}
PFNGLVERTEXATTRIB2FARBPROC glad_glVertexAttrib2fARB = glad_on_demand_impl_glVertexAttrib2fARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) {
    glad_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC) glad_gl_on_demand_loader("glVertexAttrib2fNV");
    glad_glVertexAttrib2fNV(index, x, y);
}
PFNGLVERTEXATTRIB2FNVPROC glad_glVertexAttrib2fNV = glad_on_demand_impl_glVertexAttrib2fNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2fv(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC) glad_gl_on_demand_loader("glVertexAttrib2fv");
    glad_glVertexAttrib2fv(index, v);
}
PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv = glad_on_demand_impl_glVertexAttrib2fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2fvARB(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC) glad_gl_on_demand_loader("glVertexAttrib2fvARB");
    glad_glVertexAttrib2fvARB(index, v);
}
PFNGLVERTEXATTRIB2FVARBPROC glad_glVertexAttrib2fvARB = glad_on_demand_impl_glVertexAttrib2fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2fvNV(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC) glad_gl_on_demand_loader("glVertexAttrib2fvNV");
    glad_glVertexAttrib2fvNV(index, v);
}
PFNGLVERTEXATTRIB2FVNVPROC glad_glVertexAttrib2fvNV = glad_on_demand_impl_glVertexAttrib2fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
    glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC) glad_gl_on_demand_loader("glVertexAttrib2s");
    glad_glVertexAttrib2s(index, x, y);
}
PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s = glad_on_demand_impl_glVertexAttrib2s;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) {
    glad_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC) glad_gl_on_demand_loader("glVertexAttrib2sARB");
    glad_glVertexAttrib2sARB(index, x, y);
}
PFNGLVERTEXATTRIB2SARBPROC glad_glVertexAttrib2sARB = glad_on_demand_impl_glVertexAttrib2sARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) {
    glad_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC) glad_gl_on_demand_loader("glVertexAttrib2sNV");
    glad_glVertexAttrib2sNV(index, x, y);
}
PFNGLVERTEXATTRIB2SNVPROC glad_glVertexAttrib2sNV = glad_on_demand_impl_glVertexAttrib2sNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2sv(GLuint index, const GLshort * v) {
    glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC) glad_gl_on_demand_loader("glVertexAttrib2sv");
    glad_glVertexAttrib2sv(index, v);
}
PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv = glad_on_demand_impl_glVertexAttrib2sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2svARB(GLuint index, const GLshort * v) {
    glad_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC) glad_gl_on_demand_loader("glVertexAttrib2svARB");
    glad_glVertexAttrib2svARB(index, v);
}
PFNGLVERTEXATTRIB2SVARBPROC glad_glVertexAttrib2svARB = glad_on_demand_impl_glVertexAttrib2svARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib2svNV(GLuint index, const GLshort * v) {
    glad_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC) glad_gl_on_demand_loader("glVertexAttrib2svNV");
    glad_glVertexAttrib2svNV(index, v);
}
PFNGLVERTEXATTRIB2SVNVPROC glad_glVertexAttrib2svNV = glad_on_demand_impl_glVertexAttrib2svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC) glad_gl_on_demand_loader("glVertexAttrib3d");
    glad_glVertexAttrib3d(index, x, y, z);
}
PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d = glad_on_demand_impl_glVertexAttrib3d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC) glad_gl_on_demand_loader("glVertexAttrib3dARB");
    glad_glVertexAttrib3dARB(index, x, y, z);
}
PFNGLVERTEXATTRIB3DARBPROC glad_glVertexAttrib3dARB = glad_on_demand_impl_glVertexAttrib3dARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC) glad_gl_on_demand_loader("glVertexAttrib3dNV");
    glad_glVertexAttrib3dNV(index, x, y, z);
}
PFNGLVERTEXATTRIB3DNVPROC glad_glVertexAttrib3dNV = glad_on_demand_impl_glVertexAttrib3dNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC) glad_gl_on_demand_loader("glVertexAttrib3dv");
    glad_glVertexAttrib3dv(index, v);
}
PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv = glad_on_demand_impl_glVertexAttrib3dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3dvARB(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC) glad_gl_on_demand_loader("glVertexAttrib3dvARB");
    glad_glVertexAttrib3dvARB(index, v);
}
PFNGLVERTEXATTRIB3DVARBPROC glad_glVertexAttrib3dvARB = glad_on_demand_impl_glVertexAttrib3dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3dvNV(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC) glad_gl_on_demand_loader("glVertexAttrib3dvNV");
    glad_glVertexAttrib3dvNV(index, v);
}
PFNGLVERTEXATTRIB3DVNVPROC glad_glVertexAttrib3dvNV = glad_on_demand_impl_glVertexAttrib3dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC) glad_gl_on_demand_loader("glVertexAttrib3f");
    glad_glVertexAttrib3f(index, x, y, z);
}
PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f = glad_on_demand_impl_glVertexAttrib3f;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC) glad_gl_on_demand_loader("glVertexAttrib3fARB");
    glad_glVertexAttrib3fARB(index, x, y, z);
}
PFNGLVERTEXATTRIB3FARBPROC glad_glVertexAttrib3fARB = glad_on_demand_impl_glVertexAttrib3fARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC) glad_gl_on_demand_loader("glVertexAttrib3fNV");
    glad_glVertexAttrib3fNV(index, x, y, z);
}
PFNGLVERTEXATTRIB3FNVPROC glad_glVertexAttrib3fNV = glad_on_demand_impl_glVertexAttrib3fNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3fv(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC) glad_gl_on_demand_loader("glVertexAttrib3fv");
    glad_glVertexAttrib3fv(index, v);
}
PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv = glad_on_demand_impl_glVertexAttrib3fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3fvARB(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC) glad_gl_on_demand_loader("glVertexAttrib3fvARB");
    glad_glVertexAttrib3fvARB(index, v);
}
PFNGLVERTEXATTRIB3FVARBPROC glad_glVertexAttrib3fvARB = glad_on_demand_impl_glVertexAttrib3fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3fvNV(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC) glad_gl_on_demand_loader("glVertexAttrib3fvNV");
    glad_glVertexAttrib3fvNV(index, v);
}
PFNGLVERTEXATTRIB3FVNVPROC glad_glVertexAttrib3fvNV = glad_on_demand_impl_glVertexAttrib3fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
    glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC) glad_gl_on_demand_loader("glVertexAttrib3s");
    glad_glVertexAttrib3s(index, x, y, z);
}
PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s = glad_on_demand_impl_glVertexAttrib3s;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) {
    glad_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC) glad_gl_on_demand_loader("glVertexAttrib3sARB");
    glad_glVertexAttrib3sARB(index, x, y, z);
}
PFNGLVERTEXATTRIB3SARBPROC glad_glVertexAttrib3sARB = glad_on_demand_impl_glVertexAttrib3sARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) {
    glad_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC) glad_gl_on_demand_loader("glVertexAttrib3sNV");
    glad_glVertexAttrib3sNV(index, x, y, z);
}
PFNGLVERTEXATTRIB3SNVPROC glad_glVertexAttrib3sNV = glad_on_demand_impl_glVertexAttrib3sNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3sv(GLuint index, const GLshort * v) {
    glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC) glad_gl_on_demand_loader("glVertexAttrib3sv");
    glad_glVertexAttrib3sv(index, v);
}
PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv = glad_on_demand_impl_glVertexAttrib3sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3svARB(GLuint index, const GLshort * v) {
    glad_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC) glad_gl_on_demand_loader("glVertexAttrib3svARB");
    glad_glVertexAttrib3svARB(index, v);
}
PFNGLVERTEXATTRIB3SVARBPROC glad_glVertexAttrib3svARB = glad_on_demand_impl_glVertexAttrib3svARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib3svNV(GLuint index, const GLshort * v) {
    glad_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC) glad_gl_on_demand_loader("glVertexAttrib3svNV");
    glad_glVertexAttrib3svNV(index, v);
}
PFNGLVERTEXATTRIB3SVNVPROC glad_glVertexAttrib3svNV = glad_on_demand_impl_glVertexAttrib3svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4Nbv(GLuint index, const GLbyte * v) {
    glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC) glad_gl_on_demand_loader("glVertexAttrib4Nbv");
    glad_glVertexAttrib4Nbv(index, v);
}
PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv = glad_on_demand_impl_glVertexAttrib4Nbv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4NbvARB(GLuint index, const GLbyte * v) {
    glad_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4NbvARB");
    glad_glVertexAttrib4NbvARB(index, v);
}
PFNGLVERTEXATTRIB4NBVARBPROC glad_glVertexAttrib4NbvARB = glad_on_demand_impl_glVertexAttrib4NbvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4Niv(GLuint index, const GLint * v) {
    glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC) glad_gl_on_demand_loader("glVertexAttrib4Niv");
    glad_glVertexAttrib4Niv(index, v);
}
PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv = glad_on_demand_impl_glVertexAttrib4Niv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4NivARB(GLuint index, const GLint * v) {
    glad_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4NivARB");
    glad_glVertexAttrib4NivARB(index, v);
}
PFNGLVERTEXATTRIB4NIVARBPROC glad_glVertexAttrib4NivARB = glad_on_demand_impl_glVertexAttrib4NivARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4Nsv(GLuint index, const GLshort * v) {
    glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC) glad_gl_on_demand_loader("glVertexAttrib4Nsv");
    glad_glVertexAttrib4Nsv(index, v);
}
PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv = glad_on_demand_impl_glVertexAttrib4Nsv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4NsvARB(GLuint index, const GLshort * v) {
    glad_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4NsvARB");
    glad_glVertexAttrib4NsvARB(index, v);
}
PFNGLVERTEXATTRIB4NSVARBPROC glad_glVertexAttrib4NsvARB = glad_on_demand_impl_glVertexAttrib4NsvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC) glad_gl_on_demand_loader("glVertexAttrib4Nub");
    glad_glVertexAttrib4Nub(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub = glad_on_demand_impl_glVertexAttrib4Nub;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    glad_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC) glad_gl_on_demand_loader("glVertexAttrib4NubARB");
    glad_glVertexAttrib4NubARB(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4NUBARBPROC glad_glVertexAttrib4NubARB = glad_on_demand_impl_glVertexAttrib4NubARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4Nubv(GLuint index, const GLubyte * v) {
    glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC) glad_gl_on_demand_loader("glVertexAttrib4Nubv");
    glad_glVertexAttrib4Nubv(index, v);
}
PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv = glad_on_demand_impl_glVertexAttrib4Nubv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4NubvARB(GLuint index, const GLubyte * v) {
    glad_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4NubvARB");
    glad_glVertexAttrib4NubvARB(index, v);
}
PFNGLVERTEXATTRIB4NUBVARBPROC glad_glVertexAttrib4NubvARB = glad_on_demand_impl_glVertexAttrib4NubvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4Nuiv(GLuint index, const GLuint * v) {
    glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC) glad_gl_on_demand_loader("glVertexAttrib4Nuiv");
    glad_glVertexAttrib4Nuiv(index, v);
}
PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv = glad_on_demand_impl_glVertexAttrib4Nuiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4NuivARB(GLuint index, const GLuint * v) {
    glad_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4NuivARB");
    glad_glVertexAttrib4NuivARB(index, v);
}
PFNGLVERTEXATTRIB4NUIVARBPROC glad_glVertexAttrib4NuivARB = glad_on_demand_impl_glVertexAttrib4NuivARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4Nusv(GLuint index, const GLushort * v) {
    glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC) glad_gl_on_demand_loader("glVertexAttrib4Nusv");
    glad_glVertexAttrib4Nusv(index, v);
}
PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv = glad_on_demand_impl_glVertexAttrib4Nusv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4NusvARB(GLuint index, const GLushort * v) {
    glad_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4NusvARB");
    glad_glVertexAttrib4NusvARB(index, v);
}
PFNGLVERTEXATTRIB4NUSVARBPROC glad_glVertexAttrib4NusvARB = glad_on_demand_impl_glVertexAttrib4NusvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4bv(GLuint index, const GLbyte * v) {
    glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC) glad_gl_on_demand_loader("glVertexAttrib4bv");
    glad_glVertexAttrib4bv(index, v);
}
PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv = glad_on_demand_impl_glVertexAttrib4bv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4bvARB(GLuint index, const GLbyte * v) {
    glad_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4bvARB");
    glad_glVertexAttrib4bvARB(index, v);
}
PFNGLVERTEXATTRIB4BVARBPROC glad_glVertexAttrib4bvARB = glad_on_demand_impl_glVertexAttrib4bvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC) glad_gl_on_demand_loader("glVertexAttrib4d");
    glad_glVertexAttrib4d(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d = glad_on_demand_impl_glVertexAttrib4d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC) glad_gl_on_demand_loader("glVertexAttrib4dARB");
    glad_glVertexAttrib4dARB(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4DARBPROC glad_glVertexAttrib4dARB = glad_on_demand_impl_glVertexAttrib4dARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC) glad_gl_on_demand_loader("glVertexAttrib4dNV");
    glad_glVertexAttrib4dNV(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4DNVPROC glad_glVertexAttrib4dNV = glad_on_demand_impl_glVertexAttrib4dNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC) glad_gl_on_demand_loader("glVertexAttrib4dv");
    glad_glVertexAttrib4dv(index, v);
}
PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv = glad_on_demand_impl_glVertexAttrib4dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4dvARB(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4dvARB");
    glad_glVertexAttrib4dvARB(index, v);
}
PFNGLVERTEXATTRIB4DVARBPROC glad_glVertexAttrib4dvARB = glad_on_demand_impl_glVertexAttrib4dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4dvNV(GLuint index, const GLdouble * v) {
    glad_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC) glad_gl_on_demand_loader("glVertexAttrib4dvNV");
    glad_glVertexAttrib4dvNV(index, v);
}
PFNGLVERTEXATTRIB4DVNVPROC glad_glVertexAttrib4dvNV = glad_on_demand_impl_glVertexAttrib4dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC) glad_gl_on_demand_loader("glVertexAttrib4f");
    glad_glVertexAttrib4f(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f = glad_on_demand_impl_glVertexAttrib4f;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC) glad_gl_on_demand_loader("glVertexAttrib4fARB");
    glad_glVertexAttrib4fARB(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4FARBPROC glad_glVertexAttrib4fARB = glad_on_demand_impl_glVertexAttrib4fARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC) glad_gl_on_demand_loader("glVertexAttrib4fNV");
    glad_glVertexAttrib4fNV(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4FNVPROC glad_glVertexAttrib4fNV = glad_on_demand_impl_glVertexAttrib4fNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4fv(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC) glad_gl_on_demand_loader("glVertexAttrib4fv");
    glad_glVertexAttrib4fv(index, v);
}
PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv = glad_on_demand_impl_glVertexAttrib4fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4fvARB(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4fvARB");
    glad_glVertexAttrib4fvARB(index, v);
}
PFNGLVERTEXATTRIB4FVARBPROC glad_glVertexAttrib4fvARB = glad_on_demand_impl_glVertexAttrib4fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4fvNV(GLuint index, const GLfloat * v) {
    glad_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC) glad_gl_on_demand_loader("glVertexAttrib4fvNV");
    glad_glVertexAttrib4fvNV(index, v);
}
PFNGLVERTEXATTRIB4FVNVPROC glad_glVertexAttrib4fvNV = glad_on_demand_impl_glVertexAttrib4fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4iv(GLuint index, const GLint * v) {
    glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC) glad_gl_on_demand_loader("glVertexAttrib4iv");
    glad_glVertexAttrib4iv(index, v);
}
PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv = glad_on_demand_impl_glVertexAttrib4iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4ivARB(GLuint index, const GLint * v) {
    glad_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4ivARB");
    glad_glVertexAttrib4ivARB(index, v);
}
PFNGLVERTEXATTRIB4IVARBPROC glad_glVertexAttrib4ivARB = glad_on_demand_impl_glVertexAttrib4ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC) glad_gl_on_demand_loader("glVertexAttrib4s");
    glad_glVertexAttrib4s(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s = glad_on_demand_impl_glVertexAttrib4s;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC) glad_gl_on_demand_loader("glVertexAttrib4sARB");
    glad_glVertexAttrib4sARB(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4SARBPROC glad_glVertexAttrib4sARB = glad_on_demand_impl_glVertexAttrib4sARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC) glad_gl_on_demand_loader("glVertexAttrib4sNV");
    glad_glVertexAttrib4sNV(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4SNVPROC glad_glVertexAttrib4sNV = glad_on_demand_impl_glVertexAttrib4sNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4sv(GLuint index, const GLshort * v) {
    glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC) glad_gl_on_demand_loader("glVertexAttrib4sv");
    glad_glVertexAttrib4sv(index, v);
}
PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv = glad_on_demand_impl_glVertexAttrib4sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4svARB(GLuint index, const GLshort * v) {
    glad_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4svARB");
    glad_glVertexAttrib4svARB(index, v);
}
PFNGLVERTEXATTRIB4SVARBPROC glad_glVertexAttrib4svARB = glad_on_demand_impl_glVertexAttrib4svARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4svNV(GLuint index, const GLshort * v) {
    glad_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC) glad_gl_on_demand_loader("glVertexAttrib4svNV");
    glad_glVertexAttrib4svNV(index, v);
}
PFNGLVERTEXATTRIB4SVNVPROC glad_glVertexAttrib4svNV = glad_on_demand_impl_glVertexAttrib4svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
    glad_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC) glad_gl_on_demand_loader("glVertexAttrib4ubNV");
    glad_glVertexAttrib4ubNV(index, x, y, z, w);
}
PFNGLVERTEXATTRIB4UBNVPROC glad_glVertexAttrib4ubNV = glad_on_demand_impl_glVertexAttrib4ubNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4ubv(GLuint index, const GLubyte * v) {
    glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC) glad_gl_on_demand_loader("glVertexAttrib4ubv");
    glad_glVertexAttrib4ubv(index, v);
}
PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv = glad_on_demand_impl_glVertexAttrib4ubv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4ubvARB(GLuint index, const GLubyte * v) {
    glad_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4ubvARB");
    glad_glVertexAttrib4ubvARB(index, v);
}
PFNGLVERTEXATTRIB4UBVARBPROC glad_glVertexAttrib4ubvARB = glad_on_demand_impl_glVertexAttrib4ubvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4ubvNV(GLuint index, const GLubyte * v) {
    glad_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC) glad_gl_on_demand_loader("glVertexAttrib4ubvNV");
    glad_glVertexAttrib4ubvNV(index, v);
}
PFNGLVERTEXATTRIB4UBVNVPROC glad_glVertexAttrib4ubvNV = glad_on_demand_impl_glVertexAttrib4ubvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4uiv(GLuint index, const GLuint * v) {
    glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC) glad_gl_on_demand_loader("glVertexAttrib4uiv");
    glad_glVertexAttrib4uiv(index, v);
}
PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv = glad_on_demand_impl_glVertexAttrib4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4uivARB(GLuint index, const GLuint * v) {
    glad_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4uivARB");
    glad_glVertexAttrib4uivARB(index, v);
}
PFNGLVERTEXATTRIB4UIVARBPROC glad_glVertexAttrib4uivARB = glad_on_demand_impl_glVertexAttrib4uivARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4usv(GLuint index, const GLushort * v) {
    glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC) glad_gl_on_demand_loader("glVertexAttrib4usv");
    glad_glVertexAttrib4usv(index, v);
}
PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv = glad_on_demand_impl_glVertexAttrib4usv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttrib4usvARB(GLuint index, const GLushort * v) {
    glad_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC) glad_gl_on_demand_loader("glVertexAttrib4usvARB");
    glad_glVertexAttrib4usvARB(index, v);
}
PFNGLVERTEXATTRIB4USVARBPROC glad_glVertexAttrib4usvARB = glad_on_demand_impl_glVertexAttrib4usvARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
    glad_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC) glad_gl_on_demand_loader("glVertexAttribBinding");
    glad_glVertexAttribBinding(attribindex, bindingindex);
}
PFNGLVERTEXATTRIBBINDINGPROC glad_glVertexAttribBinding = glad_on_demand_impl_glVertexAttribBinding;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribDivisor(GLuint index, GLuint divisor) {
    glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC) glad_gl_on_demand_loader("glVertexAttribDivisor");
    glad_glVertexAttribDivisor(index, divisor);
}
PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor = glad_on_demand_impl_glVertexAttribDivisor;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribDivisorARB(GLuint index, GLuint divisor) {
    glad_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC) glad_gl_on_demand_loader("glVertexAttribDivisorARB");
    glad_glVertexAttribDivisorARB(index, divisor);
}
PFNGLVERTEXATTRIBDIVISORARBPROC glad_glVertexAttribDivisorARB = glad_on_demand_impl_glVertexAttribDivisorARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
    glad_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC) glad_gl_on_demand_loader("glVertexAttribFormat");
    glad_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}
PFNGLVERTEXATTRIBFORMATPROC glad_glVertexAttribFormat = glad_on_demand_impl_glVertexAttribFormat;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1i(GLuint index, GLint x) {
    glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC) glad_gl_on_demand_loader("glVertexAttribI1i");
    glad_glVertexAttribI1i(index, x);
}
PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i = glad_on_demand_impl_glVertexAttribI1i;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1iEXT(GLuint index, GLint x) {
    glad_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC) glad_gl_on_demand_loader("glVertexAttribI1iEXT");
    glad_glVertexAttribI1iEXT(index, x);
}
PFNGLVERTEXATTRIBI1IEXTPROC glad_glVertexAttribI1iEXT = glad_on_demand_impl_glVertexAttribI1iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1iv(GLuint index, const GLint * v) {
    glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC) glad_gl_on_demand_loader("glVertexAttribI1iv");
    glad_glVertexAttribI1iv(index, v);
}
PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv = glad_on_demand_impl_glVertexAttribI1iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1ivEXT(GLuint index, const GLint * v) {
    glad_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI1ivEXT");
    glad_glVertexAttribI1ivEXT(index, v);
}
PFNGLVERTEXATTRIBI1IVEXTPROC glad_glVertexAttribI1ivEXT = glad_on_demand_impl_glVertexAttribI1ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1ui(GLuint index, GLuint x) {
    glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC) glad_gl_on_demand_loader("glVertexAttribI1ui");
    glad_glVertexAttribI1ui(index, x);
}
PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui = glad_on_demand_impl_glVertexAttribI1ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1uiEXT(GLuint index, GLuint x) {
    glad_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC) glad_gl_on_demand_loader("glVertexAttribI1uiEXT");
    glad_glVertexAttribI1uiEXT(index, x);
}
PFNGLVERTEXATTRIBI1UIEXTPROC glad_glVertexAttribI1uiEXT = glad_on_demand_impl_glVertexAttribI1uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1uiv(GLuint index, const GLuint * v) {
    glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC) glad_gl_on_demand_loader("glVertexAttribI1uiv");
    glad_glVertexAttribI1uiv(index, v);
}
PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv = glad_on_demand_impl_glVertexAttribI1uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI1uivEXT(GLuint index, const GLuint * v) {
    glad_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI1uivEXT");
    glad_glVertexAttribI1uivEXT(index, v);
}
PFNGLVERTEXATTRIBI1UIVEXTPROC glad_glVertexAttribI1uivEXT = glad_on_demand_impl_glVertexAttribI1uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2i(GLuint index, GLint x, GLint y) {
    glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC) glad_gl_on_demand_loader("glVertexAttribI2i");
    glad_glVertexAttribI2i(index, x, y);
}
PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i = glad_on_demand_impl_glVertexAttribI2i;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y) {
    glad_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC) glad_gl_on_demand_loader("glVertexAttribI2iEXT");
    glad_glVertexAttribI2iEXT(index, x, y);
}
PFNGLVERTEXATTRIBI2IEXTPROC glad_glVertexAttribI2iEXT = glad_on_demand_impl_glVertexAttribI2iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2iv(GLuint index, const GLint * v) {
    glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC) glad_gl_on_demand_loader("glVertexAttribI2iv");
    glad_glVertexAttribI2iv(index, v);
}
PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv = glad_on_demand_impl_glVertexAttribI2iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2ivEXT(GLuint index, const GLint * v) {
    glad_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI2ivEXT");
    glad_glVertexAttribI2ivEXT(index, v);
}
PFNGLVERTEXATTRIBI2IVEXTPROC glad_glVertexAttribI2ivEXT = glad_on_demand_impl_glVertexAttribI2ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
    glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC) glad_gl_on_demand_loader("glVertexAttribI2ui");
    glad_glVertexAttribI2ui(index, x, y);
}
PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui = glad_on_demand_impl_glVertexAttribI2ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) {
    glad_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC) glad_gl_on_demand_loader("glVertexAttribI2uiEXT");
    glad_glVertexAttribI2uiEXT(index, x, y);
}
PFNGLVERTEXATTRIBI2UIEXTPROC glad_glVertexAttribI2uiEXT = glad_on_demand_impl_glVertexAttribI2uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2uiv(GLuint index, const GLuint * v) {
    glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC) glad_gl_on_demand_loader("glVertexAttribI2uiv");
    glad_glVertexAttribI2uiv(index, v);
}
PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv = glad_on_demand_impl_glVertexAttribI2uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI2uivEXT(GLuint index, const GLuint * v) {
    glad_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI2uivEXT");
    glad_glVertexAttribI2uivEXT(index, v);
}
PFNGLVERTEXATTRIBI2UIVEXTPROC glad_glVertexAttribI2uivEXT = glad_on_demand_impl_glVertexAttribI2uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
    glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC) glad_gl_on_demand_loader("glVertexAttribI3i");
    glad_glVertexAttribI3i(index, x, y, z);
}
PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i = glad_on_demand_impl_glVertexAttribI3i;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) {
    glad_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC) glad_gl_on_demand_loader("glVertexAttribI3iEXT");
    glad_glVertexAttribI3iEXT(index, x, y, z);
}
PFNGLVERTEXATTRIBI3IEXTPROC glad_glVertexAttribI3iEXT = glad_on_demand_impl_glVertexAttribI3iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3iv(GLuint index, const GLint * v) {
    glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC) glad_gl_on_demand_loader("glVertexAttribI3iv");
    glad_glVertexAttribI3iv(index, v);
}
PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv = glad_on_demand_impl_glVertexAttribI3iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3ivEXT(GLuint index, const GLint * v) {
    glad_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI3ivEXT");
    glad_glVertexAttribI3ivEXT(index, v);
}
PFNGLVERTEXATTRIBI3IVEXTPROC glad_glVertexAttribI3ivEXT = glad_on_demand_impl_glVertexAttribI3ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
    glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC) glad_gl_on_demand_loader("glVertexAttribI3ui");
    glad_glVertexAttribI3ui(index, x, y, z);
}
PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui = glad_on_demand_impl_glVertexAttribI3ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) {
    glad_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC) glad_gl_on_demand_loader("glVertexAttribI3uiEXT");
    glad_glVertexAttribI3uiEXT(index, x, y, z);
}
PFNGLVERTEXATTRIBI3UIEXTPROC glad_glVertexAttribI3uiEXT = glad_on_demand_impl_glVertexAttribI3uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3uiv(GLuint index, const GLuint * v) {
    glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC) glad_gl_on_demand_loader("glVertexAttribI3uiv");
    glad_glVertexAttribI3uiv(index, v);
}
PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv = glad_on_demand_impl_glVertexAttribI3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI3uivEXT(GLuint index, const GLuint * v) {
    glad_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI3uivEXT");
    glad_glVertexAttribI3uivEXT(index, v);
}
PFNGLVERTEXATTRIBI3UIVEXTPROC glad_glVertexAttribI3uivEXT = glad_on_demand_impl_glVertexAttribI3uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4bv(GLuint index, const GLbyte * v) {
    glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC) glad_gl_on_demand_loader("glVertexAttribI4bv");
    glad_glVertexAttribI4bv(index, v);
}
PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv = glad_on_demand_impl_glVertexAttribI4bv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4bvEXT(GLuint index, const GLbyte * v) {
    glad_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4bvEXT");
    glad_glVertexAttribI4bvEXT(index, v);
}
PFNGLVERTEXATTRIBI4BVEXTPROC glad_glVertexAttribI4bvEXT = glad_on_demand_impl_glVertexAttribI4bvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC) glad_gl_on_demand_loader("glVertexAttribI4i");
    glad_glVertexAttribI4i(index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i = glad_on_demand_impl_glVertexAttribI4i;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) {
    glad_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4iEXT");
    glad_glVertexAttribI4iEXT(index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4IEXTPROC glad_glVertexAttribI4iEXT = glad_on_demand_impl_glVertexAttribI4iEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4iv(GLuint index, const GLint * v) {
    glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC) glad_gl_on_demand_loader("glVertexAttribI4iv");
    glad_glVertexAttribI4iv(index, v);
}
PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv = glad_on_demand_impl_glVertexAttribI4iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4ivEXT(GLuint index, const GLint * v) {
    glad_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4ivEXT");
    glad_glVertexAttribI4ivEXT(index, v);
}
PFNGLVERTEXATTRIBI4IVEXTPROC glad_glVertexAttribI4ivEXT = glad_on_demand_impl_glVertexAttribI4ivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4sv(GLuint index, const GLshort * v) {
    glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC) glad_gl_on_demand_loader("glVertexAttribI4sv");
    glad_glVertexAttribI4sv(index, v);
}
PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv = glad_on_demand_impl_glVertexAttribI4sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4svEXT(GLuint index, const GLshort * v) {
    glad_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4svEXT");
    glad_glVertexAttribI4svEXT(index, v);
}
PFNGLVERTEXATTRIBI4SVEXTPROC glad_glVertexAttribI4svEXT = glad_on_demand_impl_glVertexAttribI4svEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4ubv(GLuint index, const GLubyte * v) {
    glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC) glad_gl_on_demand_loader("glVertexAttribI4ubv");
    glad_glVertexAttribI4ubv(index, v);
}
PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv = glad_on_demand_impl_glVertexAttribI4ubv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) {
    glad_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4ubvEXT");
    glad_glVertexAttribI4ubvEXT(index, v);
}
PFNGLVERTEXATTRIBI4UBVEXTPROC glad_glVertexAttribI4ubvEXT = glad_on_demand_impl_glVertexAttribI4ubvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC) glad_gl_on_demand_loader("glVertexAttribI4ui");
    glad_glVertexAttribI4ui(index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui = glad_on_demand_impl_glVertexAttribI4ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
    glad_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4uiEXT");
    glad_glVertexAttribI4uiEXT(index, x, y, z, w);
}
PFNGLVERTEXATTRIBI4UIEXTPROC glad_glVertexAttribI4uiEXT = glad_on_demand_impl_glVertexAttribI4uiEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4uiv(GLuint index, const GLuint * v) {
    glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC) glad_gl_on_demand_loader("glVertexAttribI4uiv");
    glad_glVertexAttribI4uiv(index, v);
}
PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv = glad_on_demand_impl_glVertexAttribI4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4uivEXT(GLuint index, const GLuint * v) {
    glad_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4uivEXT");
    glad_glVertexAttribI4uivEXT(index, v);
}
PFNGLVERTEXATTRIBI4UIVEXTPROC glad_glVertexAttribI4uivEXT = glad_on_demand_impl_glVertexAttribI4uivEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4usv(GLuint index, const GLushort * v) {
    glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC) glad_gl_on_demand_loader("glVertexAttribI4usv");
    glad_glVertexAttribI4usv(index, v);
}
PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv = glad_on_demand_impl_glVertexAttribI4usv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribI4usvEXT(GLuint index, const GLushort * v) {
    glad_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC) glad_gl_on_demand_loader("glVertexAttribI4usvEXT");
    glad_glVertexAttribI4usvEXT(index, v);
}
PFNGLVERTEXATTRIBI4USVEXTPROC glad_glVertexAttribI4usvEXT = glad_on_demand_impl_glVertexAttribI4usvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC) glad_gl_on_demand_loader("glVertexAttribIFormat");
    glad_glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}
PFNGLVERTEXATTRIBIFORMATPROC glad_glVertexAttribIFormat = glad_on_demand_impl_glVertexAttribIFormat;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC) glad_gl_on_demand_loader("glVertexAttribIPointer");
    glad_glVertexAttribIPointer(index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer = glad_on_demand_impl_glVertexAttribIPointer;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC) glad_gl_on_demand_loader("glVertexAttribIPointerEXT");
    glad_glVertexAttribIPointerEXT(index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBIPOINTEREXTPROC glad_glVertexAttribIPointerEXT = glad_on_demand_impl_glVertexAttribIPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL1d(GLuint index, GLdouble x) {
    glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC) glad_gl_on_demand_loader("glVertexAttribL1d");
    glad_glVertexAttribL1d(index, x);
}
PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d = glad_on_demand_impl_glVertexAttribL1d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL1dEXT(GLuint index, GLdouble x) {
    glad_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC) glad_gl_on_demand_loader("glVertexAttribL1dEXT");
    glad_glVertexAttribL1dEXT(index, x);
}
PFNGLVERTEXATTRIBL1DEXTPROC glad_glVertexAttribL1dEXT = glad_on_demand_impl_glVertexAttribL1dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL1dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC) glad_gl_on_demand_loader("glVertexAttribL1dv");
    glad_glVertexAttribL1dv(index, v);
}
PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv = glad_on_demand_impl_glVertexAttribL1dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL1dvEXT(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC) glad_gl_on_demand_loader("glVertexAttribL1dvEXT");
    glad_glVertexAttribL1dvEXT(index, v);
}
PFNGLVERTEXATTRIBL1DVEXTPROC glad_glVertexAttribL1dvEXT = glad_on_demand_impl_glVertexAttribL1dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC) glad_gl_on_demand_loader("glVertexAttribL2d");
    glad_glVertexAttribL2d(index, x, y);
}
PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d = glad_on_demand_impl_glVertexAttribL2d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) {
    glad_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC) glad_gl_on_demand_loader("glVertexAttribL2dEXT");
    glad_glVertexAttribL2dEXT(index, x, y);
}
PFNGLVERTEXATTRIBL2DEXTPROC glad_glVertexAttribL2dEXT = glad_on_demand_impl_glVertexAttribL2dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL2dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC) glad_gl_on_demand_loader("glVertexAttribL2dv");
    glad_glVertexAttribL2dv(index, v);
}
PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv = glad_on_demand_impl_glVertexAttribL2dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL2dvEXT(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC) glad_gl_on_demand_loader("glVertexAttribL2dvEXT");
    glad_glVertexAttribL2dvEXT(index, v);
}
PFNGLVERTEXATTRIBL2DVEXTPROC glad_glVertexAttribL2dvEXT = glad_on_demand_impl_glVertexAttribL2dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC) glad_gl_on_demand_loader("glVertexAttribL3d");
    glad_glVertexAttribL3d(index, x, y, z);
}
PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d = glad_on_demand_impl_glVertexAttribL3d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC) glad_gl_on_demand_loader("glVertexAttribL3dEXT");
    glad_glVertexAttribL3dEXT(index, x, y, z);
}
PFNGLVERTEXATTRIBL3DEXTPROC glad_glVertexAttribL3dEXT = glad_on_demand_impl_glVertexAttribL3dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL3dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC) glad_gl_on_demand_loader("glVertexAttribL3dv");
    glad_glVertexAttribL3dv(index, v);
}
PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv = glad_on_demand_impl_glVertexAttribL3dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL3dvEXT(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC) glad_gl_on_demand_loader("glVertexAttribL3dvEXT");
    glad_glVertexAttribL3dvEXT(index, v);
}
PFNGLVERTEXATTRIBL3DVEXTPROC glad_glVertexAttribL3dvEXT = glad_on_demand_impl_glVertexAttribL3dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC) glad_gl_on_demand_loader("glVertexAttribL4d");
    glad_glVertexAttribL4d(index, x, y, z, w);
}
PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d = glad_on_demand_impl_glVertexAttribL4d;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC) glad_gl_on_demand_loader("glVertexAttribL4dEXT");
    glad_glVertexAttribL4dEXT(index, x, y, z, w);
}
PFNGLVERTEXATTRIBL4DEXTPROC glad_glVertexAttribL4dEXT = glad_on_demand_impl_glVertexAttribL4dEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL4dv(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC) glad_gl_on_demand_loader("glVertexAttribL4dv");
    glad_glVertexAttribL4dv(index, v);
}
PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv = glad_on_demand_impl_glVertexAttribL4dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribL4dvEXT(GLuint index, const GLdouble * v) {
    glad_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC) glad_gl_on_demand_loader("glVertexAttribL4dvEXT");
    glad_glVertexAttribL4dvEXT(index, v);
}
PFNGLVERTEXATTRIBL4DVEXTPROC glad_glVertexAttribL4dvEXT = glad_on_demand_impl_glVertexAttribL4dvEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
    glad_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC) glad_gl_on_demand_loader("glVertexAttribLFormat");
    glad_glVertexAttribLFormat(attribindex, size, type, relativeoffset);
}
PFNGLVERTEXATTRIBLFORMATPROC glad_glVertexAttribLFormat = glad_on_demand_impl_glVertexAttribLFormat;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC) glad_gl_on_demand_loader("glVertexAttribLPointer");
    glad_glVertexAttribLPointer(index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer = glad_on_demand_impl_glVertexAttribLPointer;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC) glad_gl_on_demand_loader("glVertexAttribLPointerEXT");
    glad_glVertexAttribLPointerEXT(index, size, type, stride, pointer);
}
PFNGLVERTEXATTRIBLPOINTEREXTPROC glad_glVertexAttribLPointerEXT = glad_on_demand_impl_glVertexAttribLPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC) glad_gl_on_demand_loader("glVertexAttribP1ui");
    glad_glVertexAttribP1ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui = glad_on_demand_impl_glVertexAttribP1ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
    glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC) glad_gl_on_demand_loader("glVertexAttribP1uiv");
    glad_glVertexAttribP1uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv = glad_on_demand_impl_glVertexAttribP1uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC) glad_gl_on_demand_loader("glVertexAttribP2ui");
    glad_glVertexAttribP2ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui = glad_on_demand_impl_glVertexAttribP2ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
    glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC) glad_gl_on_demand_loader("glVertexAttribP2uiv");
    glad_glVertexAttribP2uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv = glad_on_demand_impl_glVertexAttribP2uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC) glad_gl_on_demand_loader("glVertexAttribP3ui");
    glad_glVertexAttribP3ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui = glad_on_demand_impl_glVertexAttribP3ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
    glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC) glad_gl_on_demand_loader("glVertexAttribP3uiv");
    glad_glVertexAttribP3uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv = glad_on_demand_impl_glVertexAttribP3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
    glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC) glad_gl_on_demand_loader("glVertexAttribP4ui");
    glad_glVertexAttribP4ui(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui = glad_on_demand_impl_glVertexAttribP4ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) {
    glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC) glad_gl_on_demand_loader("glVertexAttribP4uiv");
    glad_glVertexAttribP4uiv(index, type, normalized, value);
}
PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv = glad_on_demand_impl_glVertexAttribP4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
    glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC) glad_gl_on_demand_loader("glVertexAttribPointer");
    glad_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}
PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer = glad_on_demand_impl_glVertexAttribPointer;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
    glad_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC) glad_gl_on_demand_loader("glVertexAttribPointerARB");
    glad_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
}
PFNGLVERTEXATTRIBPOINTERARBPROC glad_glVertexAttribPointerARB = glad_on_demand_impl_glVertexAttribPointerARB;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) {
    glad_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC) glad_gl_on_demand_loader("glVertexAttribPointerNV");
    glad_glVertexAttribPointerNV(index, fsize, type, stride, pointer);
}
PFNGLVERTEXATTRIBPOINTERNVPROC glad_glVertexAttribPointerNV = glad_on_demand_impl_glVertexAttribPointerNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) {
    glad_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC) glad_gl_on_demand_loader("glVertexAttribs1dvNV");
    glad_glVertexAttribs1dvNV(index, count, v);
}
PFNGLVERTEXATTRIBS1DVNVPROC glad_glVertexAttribs1dvNV = glad_on_demand_impl_glVertexAttribs1dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) {
    glad_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC) glad_gl_on_demand_loader("glVertexAttribs1fvNV");
    glad_glVertexAttribs1fvNV(index, count, v);
}
PFNGLVERTEXATTRIBS1FVNVPROC glad_glVertexAttribs1fvNV = glad_on_demand_impl_glVertexAttribs1fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) {
    glad_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC) glad_gl_on_demand_loader("glVertexAttribs1svNV");
    glad_glVertexAttribs1svNV(index, count, v);
}
PFNGLVERTEXATTRIBS1SVNVPROC glad_glVertexAttribs1svNV = glad_on_demand_impl_glVertexAttribs1svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) {
    glad_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC) glad_gl_on_demand_loader("glVertexAttribs2dvNV");
    glad_glVertexAttribs2dvNV(index, count, v);
}
PFNGLVERTEXATTRIBS2DVNVPROC glad_glVertexAttribs2dvNV = glad_on_demand_impl_glVertexAttribs2dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) {
    glad_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC) glad_gl_on_demand_loader("glVertexAttribs2fvNV");
    glad_glVertexAttribs2fvNV(index, count, v);
}
PFNGLVERTEXATTRIBS2FVNVPROC glad_glVertexAttribs2fvNV = glad_on_demand_impl_glVertexAttribs2fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) {
    glad_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC) glad_gl_on_demand_loader("glVertexAttribs2svNV");
    glad_glVertexAttribs2svNV(index, count, v);
}
PFNGLVERTEXATTRIBS2SVNVPROC glad_glVertexAttribs2svNV = glad_on_demand_impl_glVertexAttribs2svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) {
    glad_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC) glad_gl_on_demand_loader("glVertexAttribs3dvNV");
    glad_glVertexAttribs3dvNV(index, count, v);
}
PFNGLVERTEXATTRIBS3DVNVPROC glad_glVertexAttribs3dvNV = glad_on_demand_impl_glVertexAttribs3dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) {
    glad_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC) glad_gl_on_demand_loader("glVertexAttribs3fvNV");
    glad_glVertexAttribs3fvNV(index, count, v);
}
PFNGLVERTEXATTRIBS3FVNVPROC glad_glVertexAttribs3fvNV = glad_on_demand_impl_glVertexAttribs3fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) {
    glad_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC) glad_gl_on_demand_loader("glVertexAttribs3svNV");
    glad_glVertexAttribs3svNV(index, count, v);
}
PFNGLVERTEXATTRIBS3SVNVPROC glad_glVertexAttribs3svNV = glad_on_demand_impl_glVertexAttribs3svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) {
    glad_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC) glad_gl_on_demand_loader("glVertexAttribs4dvNV");
    glad_glVertexAttribs4dvNV(index, count, v);
}
PFNGLVERTEXATTRIBS4DVNVPROC glad_glVertexAttribs4dvNV = glad_on_demand_impl_glVertexAttribs4dvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) {
    glad_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC) glad_gl_on_demand_loader("glVertexAttribs4fvNV");
    glad_glVertexAttribs4fvNV(index, count, v);
}
PFNGLVERTEXATTRIBS4FVNVPROC glad_glVertexAttribs4fvNV = glad_on_demand_impl_glVertexAttribs4fvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) {
    glad_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC) glad_gl_on_demand_loader("glVertexAttribs4svNV");
    glad_glVertexAttribs4svNV(index, count, v);
}
PFNGLVERTEXATTRIBS4SVNVPROC glad_glVertexAttribs4svNV = glad_on_demand_impl_glVertexAttribs4svNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) {
    glad_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC) glad_gl_on_demand_loader("glVertexAttribs4ubvNV");
    glad_glVertexAttribs4ubvNV(index, count, v);
}
PFNGLVERTEXATTRIBS4UBVNVPROC glad_glVertexAttribs4ubvNV = glad_on_demand_impl_glVertexAttribs4ubvNV;
static void GLAD_API_PTR glad_on_demand_impl_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
    glad_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC) glad_gl_on_demand_loader("glVertexBindingDivisor");
    glad_glVertexBindingDivisor(bindingindex, divisor);
}
PFNGLVERTEXBINDINGDIVISORPROC glad_glVertexBindingDivisor = glad_on_demand_impl_glVertexBindingDivisor;
static void GLAD_API_PTR glad_on_demand_impl_glVertexP2ui(GLenum type, GLuint value) {
    glad_glVertexP2ui = (PFNGLVERTEXP2UIPROC) glad_gl_on_demand_loader("glVertexP2ui");
    glad_glVertexP2ui(type, value);
}
PFNGLVERTEXP2UIPROC glad_glVertexP2ui = glad_on_demand_impl_glVertexP2ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexP2uiv(GLenum type, const GLuint * value) {
    glad_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC) glad_gl_on_demand_loader("glVertexP2uiv");
    glad_glVertexP2uiv(type, value);
}
PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv = glad_on_demand_impl_glVertexP2uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexP3ui(GLenum type, GLuint value) {
    glad_glVertexP3ui = (PFNGLVERTEXP3UIPROC) glad_gl_on_demand_loader("glVertexP3ui");
    glad_glVertexP3ui(type, value);
}
PFNGLVERTEXP3UIPROC glad_glVertexP3ui = glad_on_demand_impl_glVertexP3ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexP3uiv(GLenum type, const GLuint * value) {
    glad_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC) glad_gl_on_demand_loader("glVertexP3uiv");
    glad_glVertexP3uiv(type, value);
}
PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv = glad_on_demand_impl_glVertexP3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexP4ui(GLenum type, GLuint value) {
    glad_glVertexP4ui = (PFNGLVERTEXP4UIPROC) glad_gl_on_demand_loader("glVertexP4ui");
    glad_glVertexP4ui(type, value);
}
PFNGLVERTEXP4UIPROC glad_glVertexP4ui = glad_on_demand_impl_glVertexP4ui;
static void GLAD_API_PTR glad_on_demand_impl_glVertexP4uiv(GLenum type, const GLuint * value) {
    glad_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC) glad_gl_on_demand_loader("glVertexP4uiv");
    glad_glVertexP4uiv(type, value);
}
PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv = glad_on_demand_impl_glVertexP4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glVertexPointer = (PFNGLVERTEXPOINTERPROC) glad_gl_on_demand_loader("glVertexPointer");
    glad_glVertexPointer(size, type, stride, pointer);
}
PFNGLVERTEXPOINTERPROC glad_glVertexPointer = glad_on_demand_impl_glVertexPointer;
static void GLAD_API_PTR glad_on_demand_impl_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) {
    glad_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC) glad_gl_on_demand_loader("glVertexPointerEXT");
    glad_glVertexPointerEXT(size, type, stride, count, pointer);
}
PFNGLVERTEXPOINTEREXTPROC glad_glVertexPointerEXT = glad_on_demand_impl_glVertexPointerEXT;
static void GLAD_API_PTR glad_on_demand_impl_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glViewport = (PFNGLVIEWPORTPROC) glad_gl_on_demand_loader("glViewport");
    glad_glViewport(x, y, width, height);
}
PFNGLVIEWPORTPROC glad_glViewport = glad_on_demand_impl_glViewport;
static void GLAD_API_PTR glad_on_demand_impl_glViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) {
    glad_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC) glad_gl_on_demand_loader("glViewportArrayv");
    glad_glViewportArrayv(first, count, v);
}
PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv = glad_on_demand_impl_glViewportArrayv;
static void GLAD_API_PTR glad_on_demand_impl_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
    glad_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC) glad_gl_on_demand_loader("glViewportIndexedf");
    glad_glViewportIndexedf(index, x, y, w, h);
}
PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf = glad_on_demand_impl_glViewportIndexedf;
static void GLAD_API_PTR glad_on_demand_impl_glViewportIndexedfv(GLuint index, const GLfloat * v) {
    glad_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC) glad_gl_on_demand_loader("glViewportIndexedfv");
    glad_glViewportIndexedfv(index, v);
}
PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv = glad_on_demand_impl_glViewportIndexedfv;
static void GLAD_API_PTR glad_on_demand_impl_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
    glad_glWaitSync = (PFNGLWAITSYNCPROC) glad_gl_on_demand_loader("glWaitSync");
    glad_glWaitSync(sync, flags, timeout);
}
PFNGLWAITSYNCPROC glad_glWaitSync = glad_on_demand_impl_glWaitSync;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2d(GLdouble x, GLdouble y) {
    glad_glWindowPos2d = (PFNGLWINDOWPOS2DPROC) glad_gl_on_demand_loader("glWindowPos2d");
    glad_glWindowPos2d(x, y);
}
PFNGLWINDOWPOS2DPROC glad_glWindowPos2d = glad_on_demand_impl_glWindowPos2d;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2dARB(GLdouble x, GLdouble y) {
    glad_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC) glad_gl_on_demand_loader("glWindowPos2dARB");
    glad_glWindowPos2dARB(x, y);
}
PFNGLWINDOWPOS2DARBPROC glad_glWindowPos2dARB = glad_on_demand_impl_glWindowPos2dARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2dMESA(GLdouble x, GLdouble y) {
    glad_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC) glad_gl_on_demand_loader("glWindowPos2dMESA");
    glad_glWindowPos2dMESA(x, y);
}
PFNGLWINDOWPOS2DMESAPROC glad_glWindowPos2dMESA = glad_on_demand_impl_glWindowPos2dMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2dv(const GLdouble * v) {
    glad_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC) glad_gl_on_demand_loader("glWindowPos2dv");
    glad_glWindowPos2dv(v);
}
PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv = glad_on_demand_impl_glWindowPos2dv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2dvARB(const GLdouble * v) {
    glad_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC) glad_gl_on_demand_loader("glWindowPos2dvARB");
    glad_glWindowPos2dvARB(v);
}
PFNGLWINDOWPOS2DVARBPROC glad_glWindowPos2dvARB = glad_on_demand_impl_glWindowPos2dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2dvMESA(const GLdouble * v) {
    glad_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC) glad_gl_on_demand_loader("glWindowPos2dvMESA");
    glad_glWindowPos2dvMESA(v);
}
PFNGLWINDOWPOS2DVMESAPROC glad_glWindowPos2dvMESA = glad_on_demand_impl_glWindowPos2dvMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2f(GLfloat x, GLfloat y) {
    glad_glWindowPos2f = (PFNGLWINDOWPOS2FPROC) glad_gl_on_demand_loader("glWindowPos2f");
    glad_glWindowPos2f(x, y);
}
PFNGLWINDOWPOS2FPROC glad_glWindowPos2f = glad_on_demand_impl_glWindowPos2f;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2fARB(GLfloat x, GLfloat y) {
    glad_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC) glad_gl_on_demand_loader("glWindowPos2fARB");
    glad_glWindowPos2fARB(x, y);
}
PFNGLWINDOWPOS2FARBPROC glad_glWindowPos2fARB = glad_on_demand_impl_glWindowPos2fARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2fMESA(GLfloat x, GLfloat y) {
    glad_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC) glad_gl_on_demand_loader("glWindowPos2fMESA");
    glad_glWindowPos2fMESA(x, y);
}
PFNGLWINDOWPOS2FMESAPROC glad_glWindowPos2fMESA = glad_on_demand_impl_glWindowPos2fMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2fv(const GLfloat * v) {
    glad_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC) glad_gl_on_demand_loader("glWindowPos2fv");
    glad_glWindowPos2fv(v);
}
PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv = glad_on_demand_impl_glWindowPos2fv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2fvARB(const GLfloat * v) {
    glad_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC) glad_gl_on_demand_loader("glWindowPos2fvARB");
    glad_glWindowPos2fvARB(v);
}
PFNGLWINDOWPOS2FVARBPROC glad_glWindowPos2fvARB = glad_on_demand_impl_glWindowPos2fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2fvMESA(const GLfloat * v) {
    glad_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC) glad_gl_on_demand_loader("glWindowPos2fvMESA");
    glad_glWindowPos2fvMESA(v);
}
PFNGLWINDOWPOS2FVMESAPROC glad_glWindowPos2fvMESA = glad_on_demand_impl_glWindowPos2fvMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2i(GLint x, GLint y) {
    glad_glWindowPos2i = (PFNGLWINDOWPOS2IPROC) glad_gl_on_demand_loader("glWindowPos2i");
    glad_glWindowPos2i(x, y);
}
PFNGLWINDOWPOS2IPROC glad_glWindowPos2i = glad_on_demand_impl_glWindowPos2i;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2iARB(GLint x, GLint y) {
    glad_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC) glad_gl_on_demand_loader("glWindowPos2iARB");
    glad_glWindowPos2iARB(x, y);
}
PFNGLWINDOWPOS2IARBPROC glad_glWindowPos2iARB = glad_on_demand_impl_glWindowPos2iARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2iMESA(GLint x, GLint y) {
    glad_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC) glad_gl_on_demand_loader("glWindowPos2iMESA");
    glad_glWindowPos2iMESA(x, y);
}
PFNGLWINDOWPOS2IMESAPROC glad_glWindowPos2iMESA = glad_on_demand_impl_glWindowPos2iMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2iv(const GLint * v) {
    glad_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC) glad_gl_on_demand_loader("glWindowPos2iv");
    glad_glWindowPos2iv(v);
}
PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv = glad_on_demand_impl_glWindowPos2iv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2ivARB(const GLint * v) {
    glad_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC) glad_gl_on_demand_loader("glWindowPos2ivARB");
    glad_glWindowPos2ivARB(v);
}
PFNGLWINDOWPOS2IVARBPROC glad_glWindowPos2ivARB = glad_on_demand_impl_glWindowPos2ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2ivMESA(const GLint * v) {
    glad_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC) glad_gl_on_demand_loader("glWindowPos2ivMESA");
    glad_glWindowPos2ivMESA(v);
}
PFNGLWINDOWPOS2IVMESAPROC glad_glWindowPos2ivMESA = glad_on_demand_impl_glWindowPos2ivMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2s(GLshort x, GLshort y) {
    glad_glWindowPos2s = (PFNGLWINDOWPOS2SPROC) glad_gl_on_demand_loader("glWindowPos2s");
    glad_glWindowPos2s(x, y);
}
PFNGLWINDOWPOS2SPROC glad_glWindowPos2s = glad_on_demand_impl_glWindowPos2s;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2sARB(GLshort x, GLshort y) {
    glad_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC) glad_gl_on_demand_loader("glWindowPos2sARB");
    glad_glWindowPos2sARB(x, y);
}
PFNGLWINDOWPOS2SARBPROC glad_glWindowPos2sARB = glad_on_demand_impl_glWindowPos2sARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2sMESA(GLshort x, GLshort y) {
    glad_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC) glad_gl_on_demand_loader("glWindowPos2sMESA");
    glad_glWindowPos2sMESA(x, y);
}
PFNGLWINDOWPOS2SMESAPROC glad_glWindowPos2sMESA = glad_on_demand_impl_glWindowPos2sMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2sv(const GLshort * v) {
    glad_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC) glad_gl_on_demand_loader("glWindowPos2sv");
    glad_glWindowPos2sv(v);
}
PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv = glad_on_demand_impl_glWindowPos2sv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2svARB(const GLshort * v) {
    glad_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC) glad_gl_on_demand_loader("glWindowPos2svARB");
    glad_glWindowPos2svARB(v);
}
PFNGLWINDOWPOS2SVARBPROC glad_glWindowPos2svARB = glad_on_demand_impl_glWindowPos2svARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos2svMESA(const GLshort * v) {
    glad_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC) glad_gl_on_demand_loader("glWindowPos2svMESA");
    glad_glWindowPos2svMESA(v);
}
PFNGLWINDOWPOS2SVMESAPROC glad_glWindowPos2svMESA = glad_on_demand_impl_glWindowPos2svMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glWindowPos3d = (PFNGLWINDOWPOS3DPROC) glad_gl_on_demand_loader("glWindowPos3d");
    glad_glWindowPos3d(x, y, z);
}
PFNGLWINDOWPOS3DPROC glad_glWindowPos3d = glad_on_demand_impl_glWindowPos3d;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) {
    glad_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC) glad_gl_on_demand_loader("glWindowPos3dARB");
    glad_glWindowPos3dARB(x, y, z);
}
PFNGLWINDOWPOS3DARBPROC glad_glWindowPos3dARB = glad_on_demand_impl_glWindowPos3dARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) {
    glad_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC) glad_gl_on_demand_loader("glWindowPos3dMESA");
    glad_glWindowPos3dMESA(x, y, z);
}
PFNGLWINDOWPOS3DMESAPROC glad_glWindowPos3dMESA = glad_on_demand_impl_glWindowPos3dMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3dv(const GLdouble * v) {
    glad_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC) glad_gl_on_demand_loader("glWindowPos3dv");
    glad_glWindowPos3dv(v);
}
PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv = glad_on_demand_impl_glWindowPos3dv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3dvARB(const GLdouble * v) {
    glad_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC) glad_gl_on_demand_loader("glWindowPos3dvARB");
    glad_glWindowPos3dvARB(v);
}
PFNGLWINDOWPOS3DVARBPROC glad_glWindowPos3dvARB = glad_on_demand_impl_glWindowPos3dvARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3dvMESA(const GLdouble * v) {
    glad_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC) glad_gl_on_demand_loader("glWindowPos3dvMESA");
    glad_glWindowPos3dvMESA(v);
}
PFNGLWINDOWPOS3DVMESAPROC glad_glWindowPos3dvMESA = glad_on_demand_impl_glWindowPos3dvMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glWindowPos3f = (PFNGLWINDOWPOS3FPROC) glad_gl_on_demand_loader("glWindowPos3f");
    glad_glWindowPos3f(x, y, z);
}
PFNGLWINDOWPOS3FPROC glad_glWindowPos3f = glad_on_demand_impl_glWindowPos3f;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) {
    glad_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC) glad_gl_on_demand_loader("glWindowPos3fARB");
    glad_glWindowPos3fARB(x, y, z);
}
PFNGLWINDOWPOS3FARBPROC glad_glWindowPos3fARB = glad_on_demand_impl_glWindowPos3fARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) {
    glad_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC) glad_gl_on_demand_loader("glWindowPos3fMESA");
    glad_glWindowPos3fMESA(x, y, z);
}
PFNGLWINDOWPOS3FMESAPROC glad_glWindowPos3fMESA = glad_on_demand_impl_glWindowPos3fMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3fv(const GLfloat * v) {
    glad_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC) glad_gl_on_demand_loader("glWindowPos3fv");
    glad_glWindowPos3fv(v);
}
PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv = glad_on_demand_impl_glWindowPos3fv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3fvARB(const GLfloat * v) {
    glad_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC) glad_gl_on_demand_loader("glWindowPos3fvARB");
    glad_glWindowPos3fvARB(v);
}
PFNGLWINDOWPOS3FVARBPROC glad_glWindowPos3fvARB = glad_on_demand_impl_glWindowPos3fvARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3fvMESA(const GLfloat * v) {
    glad_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC) glad_gl_on_demand_loader("glWindowPos3fvMESA");
    glad_glWindowPos3fvMESA(v);
}
PFNGLWINDOWPOS3FVMESAPROC glad_glWindowPos3fvMESA = glad_on_demand_impl_glWindowPos3fvMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3i(GLint x, GLint y, GLint z) {
    glad_glWindowPos3i = (PFNGLWINDOWPOS3IPROC) glad_gl_on_demand_loader("glWindowPos3i");
    glad_glWindowPos3i(x, y, z);
}
PFNGLWINDOWPOS3IPROC glad_glWindowPos3i = glad_on_demand_impl_glWindowPos3i;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3iARB(GLint x, GLint y, GLint z) {
    glad_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC) glad_gl_on_demand_loader("glWindowPos3iARB");
    glad_glWindowPos3iARB(x, y, z);
}
PFNGLWINDOWPOS3IARBPROC glad_glWindowPos3iARB = glad_on_demand_impl_glWindowPos3iARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3iMESA(GLint x, GLint y, GLint z) {
    glad_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC) glad_gl_on_demand_loader("glWindowPos3iMESA");
    glad_glWindowPos3iMESA(x, y, z);
}
PFNGLWINDOWPOS3IMESAPROC glad_glWindowPos3iMESA = glad_on_demand_impl_glWindowPos3iMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3iv(const GLint * v) {
    glad_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC) glad_gl_on_demand_loader("glWindowPos3iv");
    glad_glWindowPos3iv(v);
}
PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv = glad_on_demand_impl_glWindowPos3iv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3ivARB(const GLint * v) {
    glad_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC) glad_gl_on_demand_loader("glWindowPos3ivARB");
    glad_glWindowPos3ivARB(v);
}
PFNGLWINDOWPOS3IVARBPROC glad_glWindowPos3ivARB = glad_on_demand_impl_glWindowPos3ivARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3ivMESA(const GLint * v) {
    glad_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC) glad_gl_on_demand_loader("glWindowPos3ivMESA");
    glad_glWindowPos3ivMESA(v);
}
PFNGLWINDOWPOS3IVMESAPROC glad_glWindowPos3ivMESA = glad_on_demand_impl_glWindowPos3ivMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3s(GLshort x, GLshort y, GLshort z) {
    glad_glWindowPos3s = (PFNGLWINDOWPOS3SPROC) glad_gl_on_demand_loader("glWindowPos3s");
    glad_glWindowPos3s(x, y, z);
}
PFNGLWINDOWPOS3SPROC glad_glWindowPos3s = glad_on_demand_impl_glWindowPos3s;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3sARB(GLshort x, GLshort y, GLshort z) {
    glad_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC) glad_gl_on_demand_loader("glWindowPos3sARB");
    glad_glWindowPos3sARB(x, y, z);
}
PFNGLWINDOWPOS3SARBPROC glad_glWindowPos3sARB = glad_on_demand_impl_glWindowPos3sARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z) {
    glad_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC) glad_gl_on_demand_loader("glWindowPos3sMESA");
    glad_glWindowPos3sMESA(x, y, z);
}
PFNGLWINDOWPOS3SMESAPROC glad_glWindowPos3sMESA = glad_on_demand_impl_glWindowPos3sMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3sv(const GLshort * v) {
    glad_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC) glad_gl_on_demand_loader("glWindowPos3sv");
    glad_glWindowPos3sv(v);
}
PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv = glad_on_demand_impl_glWindowPos3sv;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3svARB(const GLshort * v) {
    glad_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC) glad_gl_on_demand_loader("glWindowPos3svARB");
    glad_glWindowPos3svARB(v);
}
PFNGLWINDOWPOS3SVARBPROC glad_glWindowPos3svARB = glad_on_demand_impl_glWindowPos3svARB;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos3svMESA(const GLshort * v) {
    glad_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC) glad_gl_on_demand_loader("glWindowPos3svMESA");
    glad_glWindowPos3svMESA(v);
}
PFNGLWINDOWPOS3SVMESAPROC glad_glWindowPos3svMESA = glad_on_demand_impl_glWindowPos3svMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC) glad_gl_on_demand_loader("glWindowPos4dMESA");
    glad_glWindowPos4dMESA(x, y, z, w);
}
PFNGLWINDOWPOS4DMESAPROC glad_glWindowPos4dMESA = glad_on_demand_impl_glWindowPos4dMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4dvMESA(const GLdouble * v) {
    glad_glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC) glad_gl_on_demand_loader("glWindowPos4dvMESA");
    glad_glWindowPos4dvMESA(v);
}
PFNGLWINDOWPOS4DVMESAPROC glad_glWindowPos4dvMESA = glad_on_demand_impl_glWindowPos4dvMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC) glad_gl_on_demand_loader("glWindowPos4fMESA");
    glad_glWindowPos4fMESA(x, y, z, w);
}
PFNGLWINDOWPOS4FMESAPROC glad_glWindowPos4fMESA = glad_on_demand_impl_glWindowPos4fMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4fvMESA(const GLfloat * v) {
    glad_glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC) glad_gl_on_demand_loader("glWindowPos4fvMESA");
    glad_glWindowPos4fvMESA(v);
}
PFNGLWINDOWPOS4FVMESAPROC glad_glWindowPos4fvMESA = glad_on_demand_impl_glWindowPos4fvMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) {
    glad_glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC) glad_gl_on_demand_loader("glWindowPos4iMESA");
    glad_glWindowPos4iMESA(x, y, z, w);
}
PFNGLWINDOWPOS4IMESAPROC glad_glWindowPos4iMESA = glad_on_demand_impl_glWindowPos4iMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4ivMESA(const GLint * v) {
    glad_glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC) glad_gl_on_demand_loader("glWindowPos4ivMESA");
    glad_glWindowPos4ivMESA(v);
}
PFNGLWINDOWPOS4IVMESAPROC glad_glWindowPos4ivMESA = glad_on_demand_impl_glWindowPos4ivMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC) glad_gl_on_demand_loader("glWindowPos4sMESA");
    glad_glWindowPos4sMESA(x, y, z, w);
}
PFNGLWINDOWPOS4SMESAPROC glad_glWindowPos4sMESA = glad_on_demand_impl_glWindowPos4sMESA;
static void GLAD_API_PTR glad_on_demand_impl_glWindowPos4svMESA(const GLshort * v) {
    glad_glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC) glad_gl_on_demand_loader("glWindowPos4svMESA");
    glad_glWindowPos4svMESA(v);
}
PFNGLWINDOWPOS4SVMESAPROC glad_glWindowPos4svMESA = glad_on_demand_impl_glWindowPos4svMESA;


 


#ifdef __cplusplus
}
#endif

#endif /* GLAD_GL_IMPLEMENTATION */

